{
			"scope": "source.lua,source.moonscript","completions": 
	[{ "trigger": "s_setAnchr2(vec2:#cc.Vec2):void [PhysicsJointSpring]", "contents": "setAnchr2(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setAnchr1(vec2:#cc.Vec2):void [PhysicsJointSpring]", "contents": "setAnchr1(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getDamping():ret (return value: float):#float [PhysicsJointSpring]", "contents": "getDamping()" },{ "trigger": "s_setStiffness(float:#float):void [PhysicsJointSpring]", "contents": "setStiffness(${1:float:#float})" },{ "trigger": "s_getRestLength():ret (return value: float):#float [PhysicsJointSpring]", "contents": "getRestLength()" },{ "trigger": "s_getAnchr2():ret (return value: cc.Vec2):#Vec2 [PhysicsJointSpring]", "contents": "getAnchr2()" },{ "trigger": "s_getAnchr1():ret (return value: cc.Vec2):#Vec2 [PhysicsJointSpring]", "contents": "getAnchr1()" },{ "trigger": "s_getStiffness():ret (return value: float):#float [PhysicsJointSpring]", "contents": "getStiffness()" },{ "trigger": "s_setRestLength(float:#float):void [PhysicsJointSpring]", "contents": "setRestLength(${1:float:#float})" },{ "trigger": "s_setDamping(float:#float):void [PhysicsJointSpring]", "contents": "setDamping(${1:float:#float})" },{ "trigger": "s_construct(physicsbody:#cc.PhysicsBody,physicsbody:#cc.PhysicsBody,vec2:#cc.Vec2,vec2:#cc.Vec2,float:#float,float:#float):ret (return value: cc.PhysicsJointSpring):#PhysicsJointSpring [PhysicsJointSpring]", "contents": "construct(${1:physicsbody:#cc.PhysicsBody},${2:physicsbody:#cc.PhysicsBody},${3:vec2:#cc.Vec2},${4:vec2:#cc.Vec2},${5:float:#float},${6:float:#float})" },{ "trigger": "PVTouchDirm_touchLeft [PVTouchDir]", "contents": "PVTouchDir.touchLeft" },{ "trigger": "PVTouchDirm_touchRight [PVTouchDir]", "contents": "PVTouchDir.touchRight" },{ "trigger": "TextTypem_SYSTEM [TextType]", "contents": "TextType.SYSTEM" },{ "trigger": "TextTypem_TTF [TextType]", "contents": "TextType.TTF" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseSineInOut):#EaseSineInOut [EaseSineInOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseSineInOut):#EaseSineInOut [EaseSineInOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseSineInOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseSineInOut):#EaseSineInOut [EaseSineInOut]", "contents": "reverse()" },{ "trigger": "s_create(float:#float,vec2:#cc.Vec2):ret (return value: cc.MoveTo):#MoveTo [MoveTo]", "contents": "create(${1:float:#float},${2:vec2:#cc.Vec2})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [MoveTo]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.MoveTo):#MoveTo [MoveTo]", "contents": "clone()" },{ "trigger": "ListViewDirectionm_none [ListViewDirection]", "contents": "ListViewDirection.none" },{ "trigger": "ListViewDirectionm_vertical [ListViewDirection]", "contents": "ListViewDirection.vertical" },{ "trigger": "ListViewDirectionm_horizontal [ListViewDirection]", "contents": "ListViewDirection.horizontal" },{ "trigger": "s_create(float:#float,int int:#unsigned):ret (return value: cc.SplitRows):#SplitRows [SplitRows]", "contents": "create(${1:float:#float},${2:int int:#unsigned})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [SplitRows]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.SplitRows):#SplitRows [SplitRows]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [SplitRows]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getPointsCount():ret (return value: int):#int [PhysicsShapeEdgeChain]", "contents": "getPointsCount()" },{ "trigger": "s_getCenter():ret (return value: cc.Vec2):#Vec2 [PhysicsShapeEdgeChain]", "contents": "getCenter()" },{ "trigger": "s_setPercent(int:#int):void [Slider]", "contents": "setPercent(${1:int:#int})" },{ "trigger": "s_loadSlidBallTextureDisabled(str:#string,texturerestype:#ccui.Widget::TextureResType):void [Slider]", "contents": "loadSlidBallTextureDisabled(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_loadSlidBallTextureNormal(str:#string,texturerestype:#ccui.Widget::TextureResType):void [Slider]", "contents": "loadSlidBallTextureNormal(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_loadBarTexture(str:#string,texturerestype:#ccui.Widget::TextureResType):void [Slider]", "contents": "loadBarTexture(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_loadProgressBarTexture(str:#string,texturerestype:#ccui.Widget::TextureResType):void [Slider]", "contents": "loadProgressBarTexture(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_loadSlidBallTextures(str:#string,str:#string,str:#string,texturerestype:#ccui.Widget::TextureResType):void [Slider]", "contents": "loadSlidBallTextures(${1:str:#string},${2:str:#string},${3:str:#string},${4:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_setCapInsetProgressBarRebderer(rect:#rect_table):void [Slider]", "contents": "setCapInsetProgressBarRebderer(${1:rect:#rect_table})" },{ "trigger": "s_setCapInsetsBarRenderer(rect:#rect_table):void [Slider]", "contents": "setCapInsetsBarRenderer(${1:rect:#rect_table})" },{ "trigger": "s_getCapInsetsProgressBarRebderer():ret (return value: rect_table):#rect_table [Slider]", "contents": "getCapInsetsProgressBarRebderer()" },{ "trigger": "s_setScale9Enabled(bool:#bool):void [Slider]", "contents": "setScale9Enabled(${1:bool:#bool})" },{ "trigger": "s_setCapInsets(rect:#rect_table):void [Slider]", "contents": "setCapInsets(${1:rect:#rect_table})" },{ "trigger": "s_addEventListener(func:#function):void [Slider]", "contents": "addEventListener(${1:func:#function})" },{ "trigger": "s_loadSlidBallTexturePressed(str:#string,texturerestype:#ccui.Widget::TextureResType):void [Slider]", "contents": "loadSlidBallTexturePressed(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_isScale9Enabled():ret (return value: bool):#bool [Slider]", "contents": "isScale9Enabled()" },{ "trigger": "s_getCapInsetsBarRenderer():ret (return value: rect_table):#rect_table [Slider]", "contents": "getCapInsetsBarRenderer()" },{ "trigger": "s_getPercent():ret (return value: int):#int [Slider]", "contents": "getPercent()" },{ "trigger": "s_create():ret (return value: ccui.Slider):#Slider [Slider]", "contents": "create()" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [Slider]", "contents": "createInstance()" },{ "trigger": "s_getVirtualRenderer():ret (return value: cc.Node):#Node [Slider]", "contents": "getVirtualRenderer()" },{ "trigger": "s_ignoreContentAdaptWithSize(bool:#bool):void [Slider]", "contents": "ignoreContentAdaptWithSize(${1:bool:#bool})" },{ "trigger": "s_getDescription():ret (return value: string):#string [Slider]", "contents": "getDescription()" },{ "trigger": "s_hitTest(vec2:#cc.Vec2):ret (return value: bool):#bool [Slider]", "contents": "hitTest(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getVirtualRendererSize():ret (return value: size_table):#size_table [Slider]", "contents": "getVirtualRendererSize()" },{ "trigger": "s_Slider():void [Slider]", "contents": "Slider()" },{ "trigger": "s_getAmplitudeRate():ret (return value: float):#float [ActionInterval]", "contents": "getAmplitudeRate()" },{ "trigger": "s_setAmplitudeRate(float:#float):void [ActionInterval]", "contents": "setAmplitudeRate(${1:float:#float})" },{ "trigger": "s_getElapsed():ret (return value: float):#float [ActionInterval]", "contents": "getElapsed()" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [ActionInterval]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_step(float:#float):void [ActionInterval]", "contents": "step(${1:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.ActionInterval):#ActionInterval [ActionInterval]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.ActionInterval):#ActionInterval [ActionInterval]", "contents": "reverse()" },{ "trigger": "s_isDone():ret (return value: bool):#bool [ActionInterval]", "contents": "isDone()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionProgressInOut):#TransitionProgressInOut [TransitionProgressInOut]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_setDisabledSpriteFrame(spriteframe:#cc.SpriteFrame):void [MenuItemImage]", "contents": "setDisabledSpriteFrame(${1:spriteframe:#cc.SpriteFrame})" },{ "trigger": "s_setSelectedSpriteFrame(spriteframe:#cc.SpriteFrame):void [MenuItemImage]", "contents": "setSelectedSpriteFrame(${1:spriteframe:#cc.SpriteFrame})" },{ "trigger": "s_setNormalSpriteFrame(spriteframe:#cc.SpriteFrame):void [MenuItemImage]", "contents": "setNormalSpriteFrame(${1:spriteframe:#cc.SpriteFrame})" },{ "trigger": "s_getIndex(widget:#ccui.Widget):ret (return value: long):#long [ListView]", "contents": "getIndex(${1:widget:#ccui.Widget})" },{ "trigger": "s_removeAllItems():void [ListView]", "contents": "removeAllItems()" },{ "trigger": "s_setGravity(gravity:#ccui.ListView::Gravity):void [ListView]", "contents": "setGravity(${1:gravity:#ccui.ListView::Gravity})" },{ "trigger": "s_pushBackCustomItem(widget:#ccui.Widget):void [ListView]", "contents": "pushBackCustomItem(${1:widget:#ccui.Widget})" },{ "trigger": "s_getItems():ret (return value: array_table):#array_table [ListView]", "contents": "getItems()" },{ "trigger": "s_removeItem(long:#long):void [ListView]", "contents": "removeItem(${1:long:#long})" },{ "trigger": "s_getCurSelectedIndex():ret (return value: long):#long [ListView]", "contents": "getCurSelectedIndex()" },{ "trigger": "s_insertDefaultItem(long:#long):void [ListView]", "contents": "insertDefaultItem(${1:long:#long})" },{ "trigger": "s_setItemsMargin(float:#float):void [ListView]", "contents": "setItemsMargin(${1:float:#float})" },{ "trigger": "s_refreshView():void [ListView]", "contents": "refreshView()" },{ "trigger": "s_removeLastItem():void [ListView]", "contents": "removeLastItem()" },{ "trigger": "s_getItemsMargin():ret (return value: float):#float [ListView]", "contents": "getItemsMargin()" },{ "trigger": "s_addEventListener(func:#function):void [ListView]", "contents": "addEventListener(${1:func:#function})" },{ "trigger": "s_getItem(long:#long):ret (return value: ccui.Widget):#Widget [ListView]", "contents": "getItem(${1:long:#long})" },{ "trigger": "s_setItemModel(widget:#ccui.Widget):void [ListView]", "contents": "setItemModel(${1:widget:#ccui.Widget})" },{ "trigger": "s_requestRefreshView():void [ListView]", "contents": "requestRefreshView()" },{ "trigger": "s_pushBackDefaultItem():void [ListView]", "contents": "pushBackDefaultItem()" },{ "trigger": "s_insertCustomItem(widget:#ccui.Widget,long:#long):void [ListView]", "contents": "insertCustomItem(${1:widget:#ccui.Widget},${2:long:#long})" },{ "trigger": "s_create():ret (return value: ccui.ListView):#ListView [ListView]", "contents": "create()" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [ListView]", "contents": "createInstance()" },{ "trigger": "s_setDirection(direction:#ccui.ScrollView::Direction):void [ListView]", "contents": "setDirection(${1:direction:#ccui.ScrollView::Direction})" },{ "trigger": "s_getDescription():ret (return value: string):#string [ListView]", "contents": "getDescription()" },{ "trigger": "s_sortAllChildren():void [ListView]", "contents": "sortAllChildren()" },{ "trigger": "s_ListView():void [ListView]", "contents": "ListView()" },{ "trigger": "s_setRate(float:#float):void [PhysicsJointMotor]", "contents": "setRate(${1:float:#float})" },{ "trigger": "s_getRate():ret (return value: float):#float [PhysicsJointMotor]", "contents": "getRate()" },{ "trigger": "s_construct(physicsbody:#cc.PhysicsBody,physicsbody:#cc.PhysicsBody,float:#float):ret (return value: cc.PhysicsJointMotor):#PhysicsJointMotor [PhysicsJointMotor]", "contents": "construct(${1:physicsbody:#cc.PhysicsBody},${2:physicsbody:#cc.PhysicsBody},${3:float:#float})" },{ "trigger": "s_appendChild(sprite:#cc.Sprite):void [SpriteBatchNode]", "contents": "appendChild(${1:sprite:#cc.Sprite})" },{ "trigger": "s_addSpriteWithoutQuad(sprite:#cc.Sprite,int:#int,int:#int):ret (return value: cc.SpriteBatchNode):#SpriteBatchNode [SpriteBatchNode]", "contents": "addSpriteWithoutQuad(${1:sprite:#cc.Sprite},${2:int:#int},${3:int:#int})" },{ "trigger": "s_reorderBatch(bool:#bool):void [SpriteBatchNode]", "contents": "reorderBatch(${1:bool:#bool})" },{ "trigger": "s_removeAllChildrenWithCleanup(bool:#bool):void [SpriteBatchNode]", "contents": "removeAllChildrenWithCleanup(${1:bool:#bool})" },{ "trigger": "s_lowestAtlasIndexInChild(sprite:#cc.Sprite):ret (return value: long):#long [SpriteBatchNode]", "contents": "lowestAtlasIndexInChild(${1:sprite:#cc.Sprite})" },{ "trigger": "s_atlasIndexForChild(sprite:#cc.Sprite,int:#int):ret (return value: long):#long [SpriteBatchNode]", "contents": "atlasIndexForChild(${1:sprite:#cc.Sprite},${2:int:#int})" },{ "trigger": "s_setTextureAtlas(textureatlas:#cc.TextureAtlas):void [SpriteBatchNode]", "contents": "setTextureAtlas(${1:textureatlas:#cc.TextureAtlas})" },{ "trigger": "s_getTexture():ret (return value: cc.Texture2D):#Texture2D [SpriteBatchNode]", "contents": "getTexture()" },{ "trigger": "s_increaseAtlasCapacity():void [SpriteBatchNode]", "contents": "increaseAtlasCapacity()" },{ "trigger": "s_getTextureAtlas():ret (return value: cc.TextureAtlas):#TextureAtlas [SpriteBatchNode]", "contents": "getTextureAtlas()" },{ "trigger": "s_insertQuadFromSprite(sprite:#cc.Sprite,long:#long):void [SpriteBatchNode]", "contents": "insertQuadFromSprite(${1:sprite:#cc.Sprite},${2:long:#long})" },{ "trigger": "s_setTexture(texture2d:#cc.Texture2D):void [SpriteBatchNode]", "contents": "setTexture(${1:texture2d:#cc.Texture2D})" },{ "trigger": "s_rebuildIndexInOrder(sprite:#cc.Sprite,long:#long):ret (return value: long):#long [SpriteBatchNode]", "contents": "rebuildIndexInOrder(${1:sprite:#cc.Sprite},${2:long:#long})" },{ "trigger": "s_highestAtlasIndexInChild(sprite:#cc.Sprite):ret (return value: long):#long [SpriteBatchNode]", "contents": "highestAtlasIndexInChild(${1:sprite:#cc.Sprite})" },{ "trigger": "s_removeChildAtIndex(long:#long,bool:#bool):void [SpriteBatchNode]", "contents": "removeChildAtIndex(${1:long:#long},${2:bool:#bool})" },{ "trigger": "s_removeSpriteFromAtlas(sprite:#cc.Sprite):void [SpriteBatchNode]", "contents": "removeSpriteFromAtlas(${1:sprite:#cc.Sprite})" },{ "trigger": "s_create(str:#string,long:#long):ret (return value: cc.SpriteBatchNode):#SpriteBatchNode [SpriteBatchNode]", "contents": "create(${1:str:#string},${2:long:#long})" },{ "trigger": "s_createWithTexture(texture2d:#cc.Texture2D,long:#long):ret (return value: cc.SpriteBatchNode):#SpriteBatchNode [SpriteBatchNode]", "contents": "createWithTexture(${1:texture2d:#cc.Texture2D},${2:long:#long})" },{ "trigger": "s_addChild(node:#cc.Node,int:#int,int:#int):void [SpriteBatchNode]", "contents": "addChild(${1:node:#cc.Node},${2:int:#int},${3:int:#int})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [SpriteBatchNode]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_getDescription():ret (return value: string):#string [SpriteBatchNode]", "contents": "getDescription()" },{ "trigger": "s_sortAllChildren():void [SpriteBatchNode]", "contents": "sortAllChildren()" },{ "trigger": "s_removeChild(node:#cc.Node,bool:#bool):void [SpriteBatchNode]", "contents": "removeChild(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "s_reorderChild(node:#cc.Node,int:#int):void [SpriteBatchNode]", "contents": "reorderChild(${1:node:#cc.Node},${2:int:#int})" },{ "trigger": "f_getAnimation():ret (retunr value: cc.Animation):#Animation [Animate]", "contents": "getAnimation(${1:})" },{ "trigger": "f_getAnimation():ret (retunr value: cc.Animation):#Animation [Animate]", "contents": "getAnimation(${1:})" },{ "trigger": "s_getAnimation():ret (retunr value: cc.Animation):#Animation [Animate]", "contents": "getAnimation()" },{ "trigger": "s_setAnimation(animation:#cc.Animation):void [Animate]", "contents": "setAnimation(${1:animation:#cc.Animation})" },{ "trigger": "s_create(animation:#cc.Animation):ret (return value: cc.Animate):#Animate [Animate]", "contents": "create(${1:animation:#cc.Animation})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [Animate]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.Animate):#Animate [Animate]", "contents": "clone()" },{ "trigger": "s_stop():void [Animate]", "contents": "stop()" },{ "trigger": "s_reverse():ret (return value: cc.Animate):#Animate [Animate]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [Animate]", "contents": "update(${1:float:#float})" },{ "trigger": "s_action():ret (return value: cc.ActionInterval):#ActionInterval [TransitionSlideInR]", "contents": "action()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionSlideInR):#TransitionSlideInR [TransitionSlideInR]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_setEnabled(bool:#bool):void [Control]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_onTouchMoved(touch:#cc.Touch,event:#cc.Event):void [Control]", "contents": "onTouchMoved(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_getState():ret (return value: cc.Control::State):#Control::State [Control]", "contents": "getState()" },{ "trigger": "s_onTouchEnded(touch:#cc.Touch,event:#cc.Event):void [Control]", "contents": "onTouchEnded(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_sendActionsForControlEvents(eventtype:#cc.Control::EventType):void [Control]", "contents": "sendActionsForControlEvents(${1:eventtype:#cc.Control::EventType})" },{ "trigger": "s_setSelected(bool:#bool):void [Control]", "contents": "setSelected(${1:bool:#bool})" },{ "trigger": "s_isEnabled():ret (return value: bool):#bool [Control]", "contents": "isEnabled()" },{ "trigger": "s_onTouchCancelled(touch:#cc.Touch,event:#cc.Event):void [Control]", "contents": "onTouchCancelled(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_needsLayout():void [Control]", "contents": "needsLayout()" },{ "trigger": "s_onTouchBegan(touch:#cc.Touch,event:#cc.Event):ret (return value: bool):#bool [Control]", "contents": "onTouchBegan(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_hasVisibleParents():ret (return value: bool):#bool [Control]", "contents": "hasVisibleParents()" },{ "trigger": "s_isSelected():ret (return value: bool):#bool [Control]", "contents": "isSelected()" },{ "trigger": "s_isTouchInside(touch:#cc.Touch):ret (return value: bool):#bool [Control]", "contents": "isTouchInside(${1:touch:#cc.Touch})" },{ "trigger": "s_setHighlighted(bool:#bool):void [Control]", "contents": "setHighlighted(${1:bool:#bool})" },{ "trigger": "s_getTouchLocation(touch:#cc.Touch):ret (return value: cc.Vec2):#Vec2 [Control]", "contents": "getTouchLocation(${1:touch:#cc.Touch})" },{ "trigger": "s_isHighlighted():ret (return value: bool):#bool [Control]", "contents": "isHighlighted()" },{ "trigger": "s_create():ret (return value: cc.Control):#Control [Control]", "contents": "create()" },{ "trigger": "s_isOpacityModifyRGB():ret (return value: bool):#bool [Control]", "contents": "isOpacityModifyRGB()" },{ "trigger": "s_setOpacityModifyRGB(bool:#bool):void [Control]", "contents": "setOpacityModifyRGB(${1:bool:#bool})" },{ "trigger": "f_create(size_table):ret (retunr value: cc.Grid3D):#Grid3D [Grid3D]", "contents": "create(${1:size_table})" },{ "trigger": "f_create(size_table, cc.Texture2D, bool):ret (retunr value: cc.Grid3D):#Grid3D [Grid3D]", "contents": "create(${1:size_table},${2: cc.Texture2D},${3: bool})" },{ "trigger": "s_create(size:#size_table,texture2d:#cc.Texture2D,bool:#bool):ret (retunr value: cc.Grid3D):#Grid3D [Grid3D]", "contents": "create(${1:size:#size_table},${2:texture2d:#cc.Texture2D},${3:bool:#bool})" },{ "trigger": "s_calculateVertexPoints():void [Grid3D]", "contents": "calculateVertexPoints()" },{ "trigger": "s_blit():void [Grid3D]", "contents": "blit()" },{ "trigger": "s_reuse():void [Grid3D]", "contents": "reuse()" },{ "trigger": "s_Grid3D():void [Grid3D]", "contents": "Grid3D()" },{ "trigger": "s_setTexture(texture2d:#cc.Texture2D):void [ParticleBatchNode]", "contents": "setTexture(${1:texture2d:#cc.Texture2D})" },{ "trigger": "s_disableParticle(int:#int):void [ParticleBatchNode]", "contents": "disableParticle(${1:int:#int})" },{ "trigger": "s_getTexture():ret (return value: cc.Texture2D):#Texture2D [ParticleBatchNode]", "contents": "getTexture()" },{ "trigger": "s_setTextureAtlas(textureatlas:#cc.TextureAtlas):void [ParticleBatchNode]", "contents": "setTextureAtlas(${1:textureatlas:#cc.TextureAtlas})" },{ "trigger": "s_removeAllChildrenWithCleanup(bool:#bool):void [ParticleBatchNode]", "contents": "removeAllChildrenWithCleanup(${1:bool:#bool})" },{ "trigger": "s_getTextureAtlas():ret (return value: cc.TextureAtlas):#TextureAtlas [ParticleBatchNode]", "contents": "getTextureAtlas()" },{ "trigger": "s_insertChild(particlesystem:#cc.ParticleSystem,int:#int):void [ParticleBatchNode]", "contents": "insertChild(${1:particlesystem:#cc.ParticleSystem},${2:int:#int})" },{ "trigger": "s_removeChildAtIndex(int:#int,bool:#bool):void [ParticleBatchNode]", "contents": "removeChildAtIndex(${1:int:#int},${2:bool:#bool})" },{ "trigger": "s_create(str:#string,int:#int):ret (return value: cc.ParticleBatchNode):#ParticleBatchNode [ParticleBatchNode]", "contents": "create(${1:str:#string},${2:int:#int})" },{ "trigger": "s_createWithTexture(texture2d:#cc.Texture2D,int:#int):ret (return value: cc.ParticleBatchNode):#ParticleBatchNode [ParticleBatchNode]", "contents": "createWithTexture(${1:texture2d:#cc.Texture2D},${2:int:#int})" },{ "trigger": "s_addChild(node:#cc.Node,int:#int,int:#int):void [ParticleBatchNode]", "contents": "addChild(${1:node:#cc.Node},${2:int:#int},${3:int:#int})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [ParticleBatchNode]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_reorderChild(node:#cc.Node,int:#int):void [ParticleBatchNode]", "contents": "reorderChild(${1:node:#cc.Node},${2:int:#int})" },{ "trigger": "s_removeChild(node:#cc.Node,bool:#bool):void [ParticleBatchNode]", "contents": "removeChild(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "s_create(float:#float,short:#short,short:#short,short:#short):ret (return value: cc.TintBy):#TintBy [TintBy]", "contents": "create(${1:float:#float},${2:short:#short},${3:short:#short},${4:short:#short})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [TintBy]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.TintBy):#TintBy [TintBy]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.TintBy):#TintBy [TintBy]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [TintBy]", "contents": "update(${1:float:#float})" },{ "trigger": "s_step(float:#float):void [ActionInstant]", "contents": "step(${1:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.ActionInstant):#ActionInstant [ActionInstant]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.ActionInstant):#ActionInstant [ActionInstant]", "contents": "reverse()" },{ "trigger": "s_isDone():ret (return value: bool):#bool [ActionInstant]", "contents": "isDone()" },{ "trigger": "s_update(float:#float):void [ActionInstant]", "contents": "update(${1:float:#float})" },{ "trigger": "s_create(float:#float,char char:#unsigned,char char:#unsigned,char char:#unsigned):ret (return value: cc.TintTo):#TintTo [TintTo]", "contents": "create(${1:float:#float},${2:char char:#unsigned},${3:char char:#unsigned},${4:char char:#unsigned})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [TintTo]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.TintTo):#TintTo [TintTo]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.TintTo):#TintTo [TintTo]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [TintTo]", "contents": "update(${1:float:#float})" },{ "trigger": "s_create():ret (return value: cc.Layer):#Layer [Layer]", "contents": "create()" },{ "trigger": "s_getDescription():ret (return value: string):#string [Layer]", "contents": "getDescription()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval,float:#float):ret (return value: cc.EaseOut):#EaseOut [EaseOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval},${2:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.EaseOut):#EaseOut [EaseOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseOut):#EaseOut [EaseOut]", "contents": "reverse()" },{ "trigger": "s_create(float:#float,float:#float,float:#float):ret (return value: cc.SkewTo):#SkewTo [SkewTo]", "contents": "create(${1:float:#float},${2:float:#float},${3:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [SkewTo]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.SkewTo):#SkewTo [SkewTo]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.SkewTo):#SkewTo [SkewTo]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [SkewTo]", "contents": "update(${1:float:#float})" },{ "trigger": "ccm_PhysicsWorld [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsWorld" },{ "trigger": "ccm_PhysicsDebugDraw [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsDebugDraw" },{ "trigger": "ccm_PhysicsShape [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsShape" },{ "trigger": "ccm_PhysicsShapeCircle [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsShapeCircle" },{ "trigger": "ccm_PhysicsShapeBox [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsShapeBox" },{ "trigger": "ccm_PhysicsShapePolygon [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsShapePolygon" },{ "trigger": "ccm_PhysicsShapeEdgeSegment [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsShapeEdgeSegment" },{ "trigger": "ccm_PhysicsShapeEdgeBox [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsShapeEdgeBox" },{ "trigger": "ccm_PhysicsShapeEdgePolygon [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsShapeEdgePolygon" },{ "trigger": "ccm_PhysicsShapeEdgeChain [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsShapeEdgeChain" },{ "trigger": "ccm_PhysicsBody [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsBody" },{ "trigger": "ccm_PhysicsContact [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsContact" },{ "trigger": "ccm_PhysicsContactPreSolve [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsContactPreSolve" },{ "trigger": "ccm_PhysicsContactPostSolve [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsContactPostSolve" },{ "trigger": "ccm_EventListenerPhysicsContact [lua_cocos2dx_physics_auto_api]", "contents": "cc.EventListenerPhysicsContact" },{ "trigger": "ccm_EventListenerPhysicsContactWithBodies [lua_cocos2dx_physics_auto_api]", "contents": "cc.EventListenerPhysicsContactWithBodies" },{ "trigger": "ccm_EventListenerPhysicsContactWithShapes [lua_cocos2dx_physics_auto_api]", "contents": "cc.EventListenerPhysicsContactWithShapes" },{ "trigger": "ccm_EventListenerPhysicsContactWithGroup [lua_cocos2dx_physics_auto_api]", "contents": "cc.EventListenerPhysicsContactWithGroup" },{ "trigger": "ccm_PhysicsJoint [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsJoint" },{ "trigger": "ccm_PhysicsJointFixed [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsJointFixed" },{ "trigger": "ccm_PhysicsJointLimit [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsJointLimit" },{ "trigger": "ccm_PhysicsJointPin [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsJointPin" },{ "trigger": "ccm_PhysicsJointDistance [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsJointDistance" },{ "trigger": "ccm_PhysicsJointSpring [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsJointSpring" },{ "trigger": "ccm_PhysicsJointGroove [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsJointGroove" },{ "trigger": "ccm_PhysicsJointRotarySpring [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsJointRotarySpring" },{ "trigger": "ccm_PhysicsJointRotaryLimit [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsJointRotaryLimit" },{ "trigger": "ccm_PhysicsJointRatchet [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsJointRatchet" },{ "trigger": "ccm_PhysicsJointGear [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsJointGear" },{ "trigger": "ccm_PhysicsJointMotor [lua_cocos2dx_physics_auto_api]", "contents": "cc.PhysicsJointMotor" },{ "trigger": "s_setBezierParamer(float:#float,float:#float,float:#float,float:#float):void [EaseBezierAction]", "contents": "setBezierParamer(${1:float:#float},${2:float:#float},${3:float:#float},${4:float:#float})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseBezierAction):#EaseBezierAction [EaseBezierAction]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseBezierAction):#EaseBezierAction [EaseBezierAction]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseBezierAction]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseBezierAction):#EaseBezierAction [EaseBezierAction]", "contents": "reverse()" },{ "trigger": "s_setTimeScale(float:#float):void [Scheduler]", "contents": "setTimeScale(${1:float:#float})" },{ "trigger": "s_getTimeScale():ret (return value: float):#float [Scheduler]", "contents": "getTimeScale()" },{ "trigger": "s_Scheduler():void [Scheduler]", "contents": "Scheduler()" },{ "trigger": "s_create():ret (return value: cc.ToggleVisibility):#ToggleVisibility [ToggleVisibility]", "contents": "create()" },{ "trigger": "s_clone():ret (return value: cc.ToggleVisibility):#ToggleVisibility [ToggleVisibility]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [ToggleVisibility]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.ToggleVisibility):#ToggleVisibility [ToggleVisibility]", "contents": "reverse()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionMoveInB):#TransitionMoveInB [TransitionMoveInB]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_setInnerAction(actioninterval:#cc.ActionInterval):void [Speed]", "contents": "setInnerAction(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_setSpeed(float:#float):void [Speed]", "contents": "setSpeed(${1:float:#float})" },{ "trigger": "s_getInnerAction():ret (return value: cc.ActionInterval):#ActionInterval [Speed]", "contents": "getInnerAction()" },{ "trigger": "s_getSpeed():ret (return value: float):#float [Speed]", "contents": "getSpeed()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval,float:#float):ret (return value: cc.Speed):#Speed [Speed]", "contents": "create(${1:actioninterval:#cc.ActionInterval},${2:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [Speed]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_reverse():ret (return value: cc.Speed):#Speed [Speed]", "contents": "reverse()" },{ "trigger": "s_clone():ret (return value: cc.Speed):#Speed [Speed]", "contents": "clone()" },{ "trigger": "s_stop():void [Speed]", "contents": "stop()" },{ "trigger": "s_step(float:#float):void [Speed]", "contents": "step(${1:float:#float})" },{ "trigger": "s_isDone():ret (return value: bool):#bool [Speed]", "contents": "isDone()" },{ "trigger": "f_create(float, cc.Scene):ret (retunr value: cc.TransitionFlipAngular):#TransitionFlipAngular [TransitionFlipAngular]", "contents": "create(${1:float},${2: cc.Scene})" },{ "trigger": "f_create(float, cc.Scene, cc.TransitionScene::Orientation):ret (retunr value: cc.TransitionFlipAngular):#TransitionFlipAngular [TransitionFlipAngular]", "contents": "create(${1:float},${2: cc.Scene},${3: cc.TransitionScene::Orientation})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene,orientation:#cc.TransitionScene::Orientation):ret (retunr value: cc.TransitionFlipAngular):#TransitionFlipAngular [TransitionFlipAngular]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene},${3:orientation:#cc.TransitionScene::Orientation})" },{ "trigger": "s_setString(str:#string):void [LabelAtlas]", "contents": "setString(${1:str:#string})" },{ "trigger": "f_initWithString(string, string):ret (retunr value: bool):#bool [LabelAtlas]", "contents": "initWithString(${1:string},${2: string})" },{ "trigger": "f_initWithString(string, string, int, int, int):ret (retunr value: bool):#bool [LabelAtlas]", "contents": "initWithString(${1:string},${2: string},${3: int},${4: int},${5: int})" },{ "trigger": "f_initWithString(string, cc.Texture2D, int, int, int):ret (retunr value: bool):#bool [LabelAtlas]", "contents": "initWithString(${1:string},${2: cc.Texture2D},${3: int},${4: int},${5: int})" },{ "trigger": "s_initWithString(str:#string,texture2d:#cc.Texture2D,int:#int,int:#int,int:#int):ret (retunr value: bool):#bool [LabelAtlas]", "contents": "initWithString(${1:str:#string},${2:texture2d:#cc.Texture2D},${3:int:#int},${4:int:#int},${5:int:#int})" },{ "trigger": "s_updateAtlasValues():void [LabelAtlas]", "contents": "updateAtlasValues()" },{ "trigger": "s_getString():ret (return value: string):#string [LabelAtlas]", "contents": "getString()" },{ "trigger": "f_create(string, string, int, int, int):ret (retunr value: cc.LabelAtlas):#LabelAtlas [LabelAtlas]", "contents": "create(${1:string},${2: string},${3: int},${4: int},${5: int})" },{ "trigger": "f_create():ret (retunr value: cc.LabelAtlas):#LabelAtlas [LabelAtlas]", "contents": "create(${1:})" },{ "trigger": "f_create(string, string):ret (retunr value: cc.LabelAtlas):#LabelAtlas [LabelAtlas]", "contents": "create(${1:string},${2: string})" },{ "trigger": "s_create(str:#string,str:#string,int:#int,int:#int,int:#int):ret (retunr value: cc.LabelAtlas):#LabelAtlas [LabelAtlas]", "contents": "create(${1:str:#string},${2:str:#string},${3:int:#int},${4:int:#int},${5:int:#int})" },{ "trigger": "s_getDescription():ret (return value: string):#string [LabelAtlas]", "contents": "getDescription()" },{ "trigger": "f_create(size_table):ret (retunr value: cc.TiledGrid3D):#TiledGrid3D [TiledGrid3D]", "contents": "create(${1:size_table})" },{ "trigger": "f_create(size_table, cc.Texture2D, bool):ret (retunr value: cc.TiledGrid3D):#TiledGrid3D [TiledGrid3D]", "contents": "create(${1:size_table},${2: cc.Texture2D},${3: bool})" },{ "trigger": "s_create(size:#size_table,texture2d:#cc.Texture2D,bool:#bool):ret (retunr value: cc.TiledGrid3D):#TiledGrid3D [TiledGrid3D]", "contents": "create(${1:size:#size_table},${2:texture2d:#cc.Texture2D},${3:bool:#bool})" },{ "trigger": "s_calculateVertexPoints():void [TiledGrid3D]", "contents": "calculateVertexPoints()" },{ "trigger": "s_blit():void [TiledGrid3D]", "contents": "blit()" },{ "trigger": "s_reuse():void [TiledGrid3D]", "contents": "reuse()" },{ "trigger": "s_TiledGrid3D():void [TiledGrid3D]", "contents": "TiledGrid3D()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseCircleActionIn):#EaseCircleActionIn [EaseCircleActionIn]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseCircleActionIn):#EaseCircleActionIn [EaseCircleActionIn]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseCircleActionIn]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseCircleActionIn):#EaseCircleActionIn [EaseCircleActionIn]", "contents": "reverse()" },{ "trigger": "s_setDisplayFrame(spriteframe:#cc.SpriteFrame):void [ParticleSystemQuad]", "contents": "setDisplayFrame(${1:spriteframe:#cc.SpriteFrame})" },{ "trigger": "s_setTextureWithRect(texture2d:#cc.Texture2D,rect:#rect_table):void [ParticleSystemQuad]", "contents": "setTextureWithRect(${1:texture2d:#cc.Texture2D},${2:rect:#rect_table})" },{ "trigger": "f_create(string):ret (retunr value: cc.ParticleSystemQuad):#ParticleSystemQuad [ParticleSystemQuad]", "contents": "create(${1:string})" },{ "trigger": "f_create():ret (retunr value: cc.ParticleSystemQuad):#ParticleSystemQuad [ParticleSystemQuad]", "contents": "create(${1:})" },{ "trigger": "f_create(map_table):ret (retunr value: cc.ParticleSystemQuad):#ParticleSystemQuad [ParticleSystemQuad]", "contents": "create(${1:map_table})" },{ "trigger": "s_create(map:#map_table):ret (retunr value: cc.ParticleSystemQuad):#ParticleSystemQuad [ParticleSystemQuad]", "contents": "create(${1:map:#map_table})" },{ "trigger": "s_createWithTotalParticles(int:#int):ret (return value: cc.ParticleSystemQuad):#ParticleSystemQuad [ParticleSystemQuad]", "contents": "createWithTotalParticles(${1:int:#int})" },{ "trigger": "s_getDescription():ret (return value: string):#string [ParticleSystemQuad]", "contents": "getDescription()" },{ "trigger": "f_create(float, float):ret (retunr value: cc.RotateTo):#RotateTo [RotateTo]", "contents": "create(${1:float},${2: float})" },{ "trigger": "f_create(float, float, float):ret (retunr value: cc.RotateTo):#RotateTo [RotateTo]", "contents": "create(${1:float},${2: float},${3: float})" },{ "trigger": "s_create(float:#float,float:#float,float:#float):ret (retunr value: cc.RotateTo):#RotateTo [RotateTo]", "contents": "create(${1:float:#float},${2:float:#float},${3:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [RotateTo]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.RotateTo):#RotateTo [RotateTo]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.RotateTo):#RotateTo [RotateTo]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [RotateTo]", "contents": "update(${1:float:#float})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionMoveInR):#TransitionMoveInR [TransitionMoveInR]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_setNode(node:#cc.Node):void [ComRender]", "contents": "setNode(${1:node:#cc.Node})" },{ "trigger": "s_getNode():ret (return value: cc.Node):#Node [ComRender]", "contents": "getNode()" },{ "trigger": "f_create(cc.Node, char):ret (retunr value: ccs.ComRender):#ComRender [ComRender]", "contents": "create(${1:cc.Node},${2: char})" },{ "trigger": "f_create():ret (retunr value: ccs.ComRender):#ComRender [ComRender]", "contents": "create(${1:})" },{ "trigger": "s_create(node:#cc.Node,char:#char):ret (retunr value: ccs.ComRender):#ComRender [ComRender]", "contents": "create(${1:node:#cc.Node},${2:char:#char})" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [ComRender]", "contents": "createInstance()" },{ "trigger": "s_serialize(void:#void):ret (return value: bool):#bool [ComRender]", "contents": "serialize(${1:void:#void})" },{ "trigger": "s_action():ret (return value: cc.ActionInterval):#ActionInterval [TransitionSplitCols]", "contents": "action()" },{ "trigger": "s_easeActionWithAction(actioninterval:#cc.ActionInterval):ret (return value: cc.ActionInterval):#ActionInterval [TransitionSplitCols]", "contents": "easeActionWithAction(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionSplitCols):#TransitionSplitCols [TransitionSplitCols]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [TransitionSplitCols]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_isGravityEnabled():ret (return value: bool):#bool [PhysicsBody]", "contents": "isGravityEnabled()" },{ "trigger": "s_resetForces():void [PhysicsBody]", "contents": "resetForces()" },{ "trigger": "s_getVelocityLimit():ret (return value: float):#float [PhysicsBody]", "contents": "getVelocityLimit()" },{ "trigger": "s_setGroup(int:#int):void [PhysicsBody]", "contents": "setGroup(${1:int:#int})" },{ "trigger": "s_getMass():ret (return value: float):#float [PhysicsBody]", "contents": "getMass()" },{ "trigger": "s_getCollisionBitmask():ret (return value: int):#int [PhysicsBody]", "contents": "getCollisionBitmask()" },{ "trigger": "s_getRotationOffset():ret (return value: float):#float [PhysicsBody]", "contents": "getRotationOffset()" },{ "trigger": "s_getRotation():ret (return value: float):#float [PhysicsBody]", "contents": "getRotation()" },{ "trigger": "s_getMoment():ret (return value: float):#float [PhysicsBody]", "contents": "getMoment()" },{ "trigger": "f_applyImpulse(cc.Vec2, cc.Vec2):void [PhysicsBody]", "contents": "applyImpulse(${1:cc.Vec2},${2: cc.Vec2})" },{ "trigger": "f_applyImpulse(cc.Vec2):void [PhysicsBody]", "contents": "applyImpulse(${1:cc.Vec2})" },{ "trigger": "s_applyImpulse(vec2:#cc.Vec2,vec2:#cc.Vec2):void [PhysicsBody]", "contents": "applyImpulse(${1:vec2:#cc.Vec2},${2:vec2:#cc.Vec2})" },{ "trigger": "s_setRotationOffset(float:#float):void [PhysicsBody]", "contents": "setRotationOffset(${1:float:#float})" },{ "trigger": "f_applyForce(cc.Vec2, cc.Vec2):void [PhysicsBody]", "contents": "applyForce(${1:cc.Vec2},${2: cc.Vec2})" },{ "trigger": "f_applyForce(cc.Vec2):void [PhysicsBody]", "contents": "applyForce(${1:cc.Vec2})" },{ "trigger": "s_applyForce(vec2:#cc.Vec2,vec2:#cc.Vec2):void [PhysicsBody]", "contents": "applyForce(${1:vec2:#cc.Vec2},${2:vec2:#cc.Vec2})" },{ "trigger": "s_addShape(physicsshape:#cc.PhysicsShape,bool:#bool):ret (return value: cc.PhysicsShape):#PhysicsShape [PhysicsBody]", "contents": "addShape(${1:physicsshape:#cc.PhysicsShape},${2:bool:#bool})" },{ "trigger": "s_applyTorque(float:#float):void [PhysicsBody]", "contents": "applyTorque(${1:float:#float})" },{ "trigger": "s_getAngularVelocityLimit():ret (return value: float):#float [PhysicsBody]", "contents": "getAngularVelocityLimit()" },{ "trigger": "s_setAngularVelocityLimit(float:#float):void [PhysicsBody]", "contents": "setAngularVelocityLimit(${1:float:#float})" },{ "trigger": "s_getVelocity():ret (return value: cc.Vec2):#Vec2 [PhysicsBody]", "contents": "getVelocity()" },{ "trigger": "s_getLinearDamping():ret (return value: float):#float [PhysicsBody]", "contents": "getLinearDamping()" },{ "trigger": "s_removeAllShapes():void [PhysicsBody]", "contents": "removeAllShapes()" },{ "trigger": "s_setAngularDamping(float:#float):void [PhysicsBody]", "contents": "setAngularDamping(${1:float:#float})" },{ "trigger": "s_setVelocityLimit(float:#float):void [PhysicsBody]", "contents": "setVelocityLimit(${1:float:#float})" },{ "trigger": "s_setResting(bool:#bool):void [PhysicsBody]", "contents": "setResting(${1:bool:#bool})" },{ "trigger": "s_getPositionOffset():ret (return value: cc.Vec2):#Vec2 [PhysicsBody]", "contents": "getPositionOffset()" },{ "trigger": "s_setCategoryBitmask(int:#int):void [PhysicsBody]", "contents": "setCategoryBitmask(${1:int:#int})" },{ "trigger": "s_getWorld():ret (return value: cc.PhysicsWorld):#PhysicsWorld [PhysicsBody]", "contents": "getWorld()" },{ "trigger": "s_getAngularVelocity():ret (return value: float):#float [PhysicsBody]", "contents": "getAngularVelocity()" },{ "trigger": "s_getPosition():ret (return value: cc.Vec2):#Vec2 [PhysicsBody]", "contents": "getPosition()" },{ "trigger": "s_setEnable(bool:#bool):void [PhysicsBody]", "contents": "setEnable(${1:bool:#bool})" },{ "trigger": "s_setGravityEnable(bool:#bool):void [PhysicsBody]", "contents": "setGravityEnable(${1:bool:#bool})" },{ "trigger": "s_getGroup():ret (return value: int):#int [PhysicsBody]", "contents": "getGroup()" },{ "trigger": "s_setMoment(float:#float):void [PhysicsBody]", "contents": "setMoment(${1:float:#float})" },{ "trigger": "s_getTag():ret (return value: int):#int [PhysicsBody]", "contents": "getTag()" },{ "trigger": "s_local2World(vec2:#cc.Vec2):ret (return value: cc.Vec2):#Vec2 [PhysicsBody]", "contents": "local2World(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getCategoryBitmask():ret (return value: int):#int [PhysicsBody]", "contents": "getCategoryBitmask()" },{ "trigger": "s_setDynamic(bool:#bool):void [PhysicsBody]", "contents": "setDynamic(${1:bool:#bool})" },{ "trigger": "s_getFirstShape():ret (return value: cc.PhysicsShape):#PhysicsShape [PhysicsBody]", "contents": "getFirstShape()" },{ "trigger": "s_getShapes():ret (return value: array_table):#array_table [PhysicsBody]", "contents": "getShapes()" },{ "trigger": "s_getContactTestBitmask():ret (return value: int):#int [PhysicsBody]", "contents": "getContactTestBitmask()" },{ "trigger": "s_setAngularVelocity(float:#float):void [PhysicsBody]", "contents": "setAngularVelocity(${1:float:#float})" },{ "trigger": "s_world2Local(vec2:#cc.Vec2):ret (return value: cc.Vec2):#Vec2 [PhysicsBody]", "contents": "world2Local(${1:vec2:#cc.Vec2})" },{ "trigger": "s_isEnabled():ret (return value: bool):#bool [PhysicsBody]", "contents": "isEnabled()" },{ "trigger": "f_removeShape(int, bool):void [PhysicsBody]", "contents": "removeShape(${1:int},${2: bool})" },{ "trigger": "f_removeShape(cc.PhysicsShape, bool):void [PhysicsBody]", "contents": "removeShape(${1:cc.PhysicsShape},${2: bool})" },{ "trigger": "s_removeShape(physicsshape:#cc.PhysicsShape,bool:#bool):void [PhysicsBody]", "contents": "removeShape(${1:physicsshape:#cc.PhysicsShape},${2:bool:#bool})" },{ "trigger": "s_setMass(float:#float):void [PhysicsBody]", "contents": "setMass(${1:float:#float})" },{ "trigger": "s_addMoment(float:#float):void [PhysicsBody]", "contents": "addMoment(${1:float:#float})" },{ "trigger": "s_setVelocity(vec2:#cc.Vec2):void [PhysicsBody]", "contents": "setVelocity(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setLinearDamping(float:#float):void [PhysicsBody]", "contents": "setLinearDamping(${1:float:#float})" },{ "trigger": "s_setCollisionBitmask(int:#int):void [PhysicsBody]", "contents": "setCollisionBitmask(${1:int:#int})" },{ "trigger": "s_setPositionOffset(vec2:#cc.Vec2):void [PhysicsBody]", "contents": "setPositionOffset(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setRotationEnable(bool:#bool):void [PhysicsBody]", "contents": "setRotationEnable(${1:bool:#bool})" },{ "trigger": "s_isRotationEnabled():ret (return value: bool):#bool [PhysicsBody]", "contents": "isRotationEnabled()" },{ "trigger": "s_getAngularDamping():ret (return value: float):#float [PhysicsBody]", "contents": "getAngularDamping()" },{ "trigger": "s_getVelocityAtLocalPoint(vec2:#cc.Vec2):ret (return value: cc.Vec2):#Vec2 [PhysicsBody]", "contents": "getVelocityAtLocalPoint(${1:vec2:#cc.Vec2})" },{ "trigger": "s_isResting():ret (return value: bool):#bool [PhysicsBody]", "contents": "isResting()" },{ "trigger": "s_addMass(float:#float):void [PhysicsBody]", "contents": "addMass(${1:float:#float})" },{ "trigger": "s_getShape(int:#int):ret (return value: cc.PhysicsShape):#PhysicsShape [PhysicsBody]", "contents": "getShape(${1:int:#int})" },{ "trigger": "s_setTag(int:#int):void [PhysicsBody]", "contents": "setTag(${1:int:#int})" },{ "trigger": "s_getVelocityAtWorldPoint(vec2:#cc.Vec2):ret (return value: cc.Vec2):#Vec2 [PhysicsBody]", "contents": "getVelocityAtWorldPoint(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setContactTestBitmask(int:#int):void [PhysicsBody]", "contents": "setContactTestBitmask(${1:int:#int})" },{ "trigger": "s_removeFromWorld():void [PhysicsBody]", "contents": "removeFromWorld()" },{ "trigger": "s_isDynamic():ret (return value: bool):#bool [PhysicsBody]", "contents": "isDynamic()" },{ "trigger": "s_getNode():ret (return value: cc.Node):#Node [PhysicsBody]", "contents": "getNode()" },{ "trigger": "s_createBox(size:#size_table,physicsmaterial:#cc.PhysicsMaterial,vec2:#cc.Vec2):ret (return value: cc.PhysicsBody):#PhysicsBody [PhysicsBody]", "contents": "createBox(${1:size:#size_table},${2:physicsmaterial:#cc.PhysicsMaterial},${3:vec2:#cc.Vec2})" },{ "trigger": "s_createEdgeSegment(vec2:#cc.Vec2,vec2:#cc.Vec2,physicsmaterial:#cc.PhysicsMaterial,float:#float):ret (return value: cc.PhysicsBody):#PhysicsBody [PhysicsBody]", "contents": "createEdgeSegment(${1:vec2:#cc.Vec2},${2:vec2:#cc.Vec2},${3:physicsmaterial:#cc.PhysicsMaterial},${4:float:#float})" },{ "trigger": "f_create(float):ret (retunr value: cc.PhysicsBody):#PhysicsBody [PhysicsBody]", "contents": "create(${1:float})" },{ "trigger": "f_create():ret (retunr value: cc.PhysicsBody):#PhysicsBody [PhysicsBody]", "contents": "create(${1:})" },{ "trigger": "f_create(float, float):ret (retunr value: cc.PhysicsBody):#PhysicsBody [PhysicsBody]", "contents": "create(${1:float},${2: float})" },{ "trigger": "s_create(float:#float,float:#float):ret (retunr value: cc.PhysicsBody):#PhysicsBody [PhysicsBody]", "contents": "create(${1:float:#float},${2:float:#float})" },{ "trigger": "s_createEdgeBox(size:#size_table,physicsmaterial:#cc.PhysicsMaterial,float:#float,vec2:#cc.Vec2):ret (return value: cc.PhysicsBody):#PhysicsBody [PhysicsBody]", "contents": "createEdgeBox(${1:size:#size_table},${2:physicsmaterial:#cc.PhysicsMaterial},${3:float:#float},${4:vec2:#cc.Vec2})" },{ "trigger": "s_createCircle(float:#float,physicsmaterial:#cc.PhysicsMaterial,vec2:#cc.Vec2):ret (return value: cc.PhysicsBody):#PhysicsBody [PhysicsBody]", "contents": "createCircle(${1:float:#float},${2:physicsmaterial:#cc.PhysicsMaterial},${3:vec2:#cc.Vec2})" },{ "trigger": "s_clone():ret (return value: cc.EventListenerCustom):#EventListenerCustom [EventListenerCustom]", "contents": "clone()" },{ "trigger": "s_checkAvailable():ret (return value: bool):#bool [EventListenerCustom]", "contents": "checkAvailable()" },{ "trigger": "s_setAttachWithIME(bool:#bool):void [TextField]", "contents": "setAttachWithIME(${1:bool:#bool})" },{ "trigger": "s_getFontSize():ret (return value: int):#int [TextField]", "contents": "getFontSize()" },{ "trigger": "s_getStringValue():ret (return value: string):#string [TextField]", "contents": "getStringValue()" },{ "trigger": "s_getDeleteBackward():ret (return value: bool):#bool [TextField]", "contents": "getDeleteBackward()" },{ "trigger": "s_getPlaceHolder():ret (return value: string):#string [TextField]", "contents": "getPlaceHolder()" },{ "trigger": "s_getAttachWithIME():ret (return value: bool):#bool [TextField]", "contents": "getAttachWithIME()" },{ "trigger": "s_setFontName(str:#string):void [TextField]", "contents": "setFontName(${1:str:#string})" },{ "trigger": "s_getInsertText():ret (return value: bool):#bool [TextField]", "contents": "getInsertText()" },{ "trigger": "s_setInsertText(bool:#bool):void [TextField]", "contents": "setInsertText(${1:bool:#bool})" },{ "trigger": "s_getDetachWithIME():ret (return value: bool):#bool [TextField]", "contents": "getDetachWithIME()" },{ "trigger": "s_setTextVerticalAlignment(textvalignment:#cc.TextVAlignment):void [TextField]", "contents": "setTextVerticalAlignment(${1:textvalignment:#cc.TextVAlignment})" },{ "trigger": "s_addEventListener(func:#function):void [TextField]", "contents": "addEventListener(${1:func:#function})" },{ "trigger": "s_didNotSelectSelf():void [TextField]", "contents": "didNotSelectSelf()" },{ "trigger": "s_getFontName():ret (return value: string):#string [TextField]", "contents": "getFontName()" },{ "trigger": "s_setTextAreaSize(size:#size_table):void [TextField]", "contents": "setTextAreaSize(${1:size:#size_table})" },{ "trigger": "s_attachWithIME():void [TextField]", "contents": "attachWithIME()" },{ "trigger": "s_setPasswordEnabled(bool:#bool):void [TextField]", "contents": "setPasswordEnabled(${1:bool:#bool})" },{ "trigger": "s_getPasswordStyleText():ret (return value: char):#char [TextField]", "contents": "getPasswordStyleText()" },{ "trigger": "s_setMaxLengthEnabled(bool:#bool):void [TextField]", "contents": "setMaxLengthEnabled(${1:bool:#bool})" },{ "trigger": "s_setPasswordStyleText(char:#char):void [TextField]", "contents": "setPasswordStyleText(${1:char:#char})" },{ "trigger": "s_setDeleteBackward(bool:#bool):void [TextField]", "contents": "setDeleteBackward(${1:bool:#bool})" },{ "trigger": "s_setFontSize(int:#int):void [TextField]", "contents": "setFontSize(${1:int:#int})" },{ "trigger": "s_setPlaceHolder(str:#string):void [TextField]", "contents": "setPlaceHolder(${1:str:#string})" },{ "trigger": "s_isPasswordEnabled():ret (return value: bool):#bool [TextField]", "contents": "isPasswordEnabled()" },{ "trigger": "s_setTextHorizontalAlignment(texthalignment:#cc.TextHAlignment):void [TextField]", "contents": "setTextHorizontalAlignment(${1:texthalignment:#cc.TextHAlignment})" },{ "trigger": "s_getMaxLength():ret (return value: int):#int [TextField]", "contents": "getMaxLength()" },{ "trigger": "s_isMaxLengthEnabled():ret (return value: bool):#bool [TextField]", "contents": "isMaxLengthEnabled()" },{ "trigger": "s_setDetachWithIME(bool:#bool):void [TextField]", "contents": "setDetachWithIME(${1:bool:#bool})" },{ "trigger": "s_setText(str:#string):void [TextField]", "contents": "setText(${1:str:#string})" },{ "trigger": "s_setTouchAreaEnabled(bool:#bool):void [TextField]", "contents": "setTouchAreaEnabled(${1:bool:#bool})" },{ "trigger": "s_hitTest(vec2:#cc.Vec2):ret (return value: bool):#bool [TextField]", "contents": "hitTest(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setMaxLength(int:#int):void [TextField]", "contents": "setMaxLength(${1:int:#int})" },{ "trigger": "s_setTouchSize(size:#size_table):void [TextField]", "contents": "setTouchSize(${1:size:#size_table})" },{ "trigger": "s_getTouchSize():ret (return value: size_table):#size_table [TextField]", "contents": "getTouchSize()" },{ "trigger": "f_create(string, string, int):ret (retunr value: ccui.TextField):#TextField [TextField]", "contents": "create(${1:string},${2: string},${3: int})" },{ "trigger": "f_create():ret (retunr value: ccui.TextField):#TextField [TextField]", "contents": "create(${1:})" },{ "trigger": "s_create(str:#string,str:#string,int:#int):ret (retunr value: ccui.TextField):#TextField [TextField]", "contents": "create(${1:str:#string},${2:str:#string},${3:int:#int})" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [TextField]", "contents": "createInstance()" },{ "trigger": "s_getVirtualRenderer():ret (return value: cc.Node):#Node [TextField]", "contents": "getVirtualRenderer()" },{ "trigger": "s_getDescription():ret (return value: string):#string [TextField]", "contents": "getDescription()" },{ "trigger": "s_update(float:#float):void [TextField]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getVirtualRendererSize():ret (return value: size_table):#size_table [TextField]", "contents": "getVirtualRendererSize()" },{ "trigger": "s_TextField():void [TextField]", "contents": "TextField()" },{ "trigger": "s_clone():ret (return value: cc.EventListenerFocus):#EventListenerFocus [EventListenerFocus]", "contents": "clone()" },{ "trigger": "s_checkAvailable():ret (return value: bool):#bool [EventListenerFocus]", "contents": "checkAvailable()" },{ "trigger": "s_setDuration(float:#float):void [FiniteTimeAction]", "contents": "setDuration(${1:float:#float})" },{ "trigger": "s_getDuration():ret (return value: float):#float [FiniteTimeAction]", "contents": "getDuration()" },{ "trigger": "s_clone():ret (return value: cc.FiniteTimeAction):#FiniteTimeAction [FiniteTimeAction]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.FiniteTimeAction):#FiniteTimeAction [FiniteTimeAction]", "contents": "reverse()" },{ "trigger": "s_easeActionWithAction(actioninterval:#cc.ActionInterval):ret (return value: cc.ActionInterval):#ActionInterval [TransitionFadeTR]", "contents": "easeActionWithAction(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_actionWithSize(size:#size_table):ret (return value: cc.ActionInterval):#ActionInterval [TransitionFadeTR]", "contents": "actionWithSize(${1:size:#size_table})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionFadeTR):#TransitionFadeTR [TransitionFadeTR]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [TransitionFadeTR]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_init():ret (return value: bool):#bool [BatchNode]", "contents": "init()" },{ "trigger": "s_create():ret (return value: ccs.BatchNode):#BatchNode [BatchNode]", "contents": "create()" },{ "trigger": "f_addChild(cc.Node, int):void [BatchNode]", "contents": "addChild(${1:cc.Node},${2: int})" },{ "trigger": "f_addChild(cc.Node):void [BatchNode]", "contents": "addChild(${1:cc.Node})" },{ "trigger": "f_addChild(cc.Node, int, int):void [BatchNode]", "contents": "addChild(${1:cc.Node},${2: int},${3: int})" },{ "trigger": "s_addChild(node:#cc.Node,int:#int,int:#int):void [BatchNode]", "contents": "addChild(${1:node:#cc.Node},${2:int:#int},${3:int:#int})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [BatchNode]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_removeChild(node:#cc.Node,bool:#bool):void [BatchNode]", "contents": "removeChild(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "s_create():ret (return value: ccs.ComController):#ComController [ComController]", "contents": "create()" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [ComController]", "contents": "createInstance()" },{ "trigger": "s_setEnabled(bool:#bool):void [ComController]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_isEnabled():ret (return value: bool):#bool [ComController]", "contents": "isEnabled()" },{ "trigger": "s_update(float:#float):void [ComController]", "contents": "update(${1:float:#float})" },{ "trigger": "s_init():ret (return value: bool):#bool [ComController]", "contents": "init()" },{ "trigger": "s_ComController():void [ComController]", "contents": "ComController()" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [Spawn]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.Spawn):#Spawn [Spawn]", "contents": "clone()" },{ "trigger": "s_stop():void [Spawn]", "contents": "stop()" },{ "trigger": "s_reverse():ret (return value: cc.Spawn):#Spawn [Spawn]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [Spawn]", "contents": "update(${1:float:#float})" },{ "trigger": "f_create(float, cc.Scene):ret (retunr value: cc.TransitionFlipX):#TransitionFlipX [TransitionFlipX]", "contents": "create(${1:float},${2: cc.Scene})" },{ "trigger": "f_create(float, cc.Scene, cc.TransitionScene::Orientation):ret (retunr value: cc.TransitionFlipX):#TransitionFlipX [TransitionFlipX]", "contents": "create(${1:float},${2: cc.Scene},${3: cc.TransitionScene::Orientation})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene,orientation:#cc.TransitionScene::Orientation):ret (retunr value: cc.TransitionFlipX):#TransitionFlipX [TransitionFlipX]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene},${3:orientation:#cc.TransitionScene::Orientation})" },{ "trigger": "s_setInnerAction(finitetimeaction:#cc.FiniteTimeAction):void [Repeat]", "contents": "setInnerAction(${1:finitetimeaction:#cc.FiniteTimeAction})" },{ "trigger": "s_getInnerAction():ret (return value: cc.FiniteTimeAction):#FiniteTimeAction [Repeat]", "contents": "getInnerAction()" },{ "trigger": "s_create(finitetimeaction:#cc.FiniteTimeAction,int int:#unsigned):ret (return value: cc.Repeat):#Repeat [Repeat]", "contents": "create(${1:finitetimeaction:#cc.FiniteTimeAction},${2:int int:#unsigned})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [Repeat]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_reverse():ret (return value: cc.Repeat):#Repeat [Repeat]", "contents": "reverse()" },{ "trigger": "s_clone():ret (return value: cc.Repeat):#Repeat [Repeat]", "contents": "clone()" },{ "trigger": "s_stop():void [Repeat]", "contents": "stop()" },{ "trigger": "s_update(float:#float):void [Repeat]", "contents": "update(${1:float:#float})" },{ "trigger": "s_isDone():ret (return value: bool):#bool [Repeat]", "contents": "isDone()" },{ "trigger": "s_clone():ret (return value: cc.SpriteFrame):#SpriteFrame [SpriteFrame]", "contents": "clone()" },{ "trigger": "s_setRotated(bool:#bool):void [SpriteFrame]", "contents": "setRotated(${1:bool:#bool})" },{ "trigger": "s_setTexture(texture2d:#cc.Texture2D):void [SpriteFrame]", "contents": "setTexture(${1:texture2d:#cc.Texture2D})" },{ "trigger": "f_initWithTexture(cc.Texture2D, rect_table, bool, cc.Vec2, size_table):ret (retunr value: bool):#bool [SpriteFrame]", "contents": "initWithTexture(${1:cc.Texture2D},${2: rect_table},${3: bool},${4: cc.Vec2},${5: size_table})" },{ "trigger": "f_initWithTexture(cc.Texture2D, rect_table):ret (retunr value: bool):#bool [SpriteFrame]", "contents": "initWithTexture(${1:cc.Texture2D},${2: rect_table})" },{ "trigger": "s_initWithTexture(texture2d:#cc.Texture2D,rect:#rect_table,bool:#bool,vec2:#cc.Vec2,size:#size_table):ret (retunr value: bool):#bool [SpriteFrame]", "contents": "initWithTexture(${1:texture2d:#cc.Texture2D},${2:rect:#rect_table},${3:bool:#bool},${4:vec2:#cc.Vec2},${5:size:#size_table})" },{ "trigger": "s_setRectInPixels(rect:#rect_table):void [SpriteFrame]", "contents": "setRectInPixels(${1:rect:#rect_table})" },{ "trigger": "s_getTexture():ret (return value: cc.Texture2D):#Texture2D [SpriteFrame]", "contents": "getTexture()" },{ "trigger": "s_getRect():ret (return value: rect_table):#rect_table [SpriteFrame]", "contents": "getRect()" },{ "trigger": "s_setOffsetInPixels(vec2:#cc.Vec2):void [SpriteFrame]", "contents": "setOffsetInPixels(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getRectInPixels():ret (return value: rect_table):#rect_table [SpriteFrame]", "contents": "getRectInPixels()" },{ "trigger": "s_setOriginalSize(size:#size_table):void [SpriteFrame]", "contents": "setOriginalSize(${1:size:#size_table})" },{ "trigger": "s_getOriginalSizeInPixels():ret (return value: size_table):#size_table [SpriteFrame]", "contents": "getOriginalSizeInPixels()" },{ "trigger": "s_setOriginalSizeInPixels(size:#size_table):void [SpriteFrame]", "contents": "setOriginalSizeInPixels(${1:size:#size_table})" },{ "trigger": "s_setOffset(vec2:#cc.Vec2):void [SpriteFrame]", "contents": "setOffset(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getOffset():ret (return value: cc.Vec2):#Vec2 [SpriteFrame]", "contents": "getOffset()" },{ "trigger": "s_isRotated():ret (return value: bool):#bool [SpriteFrame]", "contents": "isRotated()" },{ "trigger": "f_initWithTextureFilename(string, rect_table, bool, cc.Vec2, size_table):ret (retunr value: bool):#bool [SpriteFrame]", "contents": "initWithTextureFilename(${1:string},${2: rect_table},${3: bool},${4: cc.Vec2},${5: size_table})" },{ "trigger": "f_initWithTextureFilename(string, rect_table):ret (retunr value: bool):#bool [SpriteFrame]", "contents": "initWithTextureFilename(${1:string},${2: rect_table})" },{ "trigger": "s_initWithTextureFilename(str:#string,rect:#rect_table,bool:#bool,vec2:#cc.Vec2,size:#size_table):ret (retunr value: bool):#bool [SpriteFrame]", "contents": "initWithTextureFilename(${1:str:#string},${2:rect:#rect_table},${3:bool:#bool},${4:vec2:#cc.Vec2},${5:size:#size_table})" },{ "trigger": "s_setRect(rect:#rect_table):void [SpriteFrame]", "contents": "setRect(${1:rect:#rect_table})" },{ "trigger": "s_getOffsetInPixels():ret (return value: cc.Vec2):#Vec2 [SpriteFrame]", "contents": "getOffsetInPixels()" },{ "trigger": "s_getOriginalSize():ret (return value: size_table):#size_table [SpriteFrame]", "contents": "getOriginalSize()" },{ "trigger": "f_create(string, rect_table, bool, cc.Vec2, size_table):ret (retunr value: cc.SpriteFrame):#SpriteFrame [SpriteFrame]", "contents": "create(${1:string},${2: rect_table},${3: bool},${4: cc.Vec2},${5: size_table})" },{ "trigger": "f_create(string, rect_table):ret (retunr value: cc.SpriteFrame):#SpriteFrame [SpriteFrame]", "contents": "create(${1:string},${2: rect_table})" },{ "trigger": "s_create(str:#string,rect:#rect_table,bool:#bool,vec2:#cc.Vec2,size:#size_table):ret (retunr value: cc.SpriteFrame):#SpriteFrame [SpriteFrame]", "contents": "create(${1:str:#string},${2:rect:#rect_table},${3:bool:#bool},${4:vec2:#cc.Vec2},${5:size:#size_table})" },{ "trigger": "f_createWithTexture(cc.Texture2D, rect_table, bool, cc.Vec2, size_table):ret (retunr value: cc.SpriteFrame):#SpriteFrame [SpriteFrame]", "contents": "createWithTexture(${1:cc.Texture2D},${2: rect_table},${3: bool},${4: cc.Vec2},${5: size_table})" },{ "trigger": "f_createWithTexture(cc.Texture2D, rect_table):ret (retunr value: cc.SpriteFrame):#SpriteFrame [SpriteFrame]", "contents": "createWithTexture(${1:cc.Texture2D},${2: rect_table})" },{ "trigger": "s_createWithTexture(texture2d:#cc.Texture2D,rect:#rect_table,bool:#bool,vec2:#cc.Vec2,size:#size_table):ret (retunr value: cc.SpriteFrame):#SpriteFrame [SpriteFrame]", "contents": "createWithTexture(${1:texture2d:#cc.Texture2D},${2:rect:#rect_table},${3:bool:#bool},${4:vec2:#cc.Vec2},${5:size:#size_table})" },{ "trigger": "s_create():ret (return value: cc.Show):#Show [Show]", "contents": "create()" },{ "trigger": "s_clone():ret (return value: cc.Show):#Show [Show]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [Show]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.ActionInstant):#ActionInstant [Show]", "contents": "reverse()" },{ "trigger": "s_setReverseAction(fadeto:#cc.FadeTo):void [FadeOut]", "contents": "setReverseAction(${1:fadeto:#cc.FadeTo})" },{ "trigger": "s_create(float:#float):ret (return value: cc.FadeOut):#FadeOut [FadeOut]", "contents": "create(${1:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [FadeOut]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.FadeOut):#FadeOut [FadeOut]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.FadeTo):#FadeTo [FadeOut]", "contents": "reverse()" },{ "trigger": "s_getMax():ret (return value: float):#float [PhysicsJointRotaryLimit]", "contents": "getMax()" },{ "trigger": "s_setMin(float:#float):void [PhysicsJointRotaryLimit]", "contents": "setMin(${1:float:#float})" },{ "trigger": "s_setMax(float:#float):void [PhysicsJointRotaryLimit]", "contents": "setMax(${1:float:#float})" },{ "trigger": "s_getMin():ret (return value: float):#float [PhysicsJointRotaryLimit]", "contents": "getMin()" },{ "trigger": "f_construct(cc.PhysicsBody, cc.PhysicsBody):ret (retunr value: cc.PhysicsJointRotaryLimit):#PhysicsJointRotaryLimit [PhysicsJointRotaryLimit]", "contents": "construct(${1:cc.PhysicsBody},${2: cc.PhysicsBody})" },{ "trigger": "f_construct(cc.PhysicsBody, cc.PhysicsBody, float, float):ret (retunr value: cc.PhysicsJointRotaryLimit):#PhysicsJointRotaryLimit [PhysicsJointRotaryLimit]", "contents": "construct(${1:cc.PhysicsBody},${2: cc.PhysicsBody},${3: float},${4: float})" },{ "trigger": "s_construct(physicsbody:#cc.PhysicsBody,physicsbody:#cc.PhysicsBody,float:#float,float:#float):ret (retunr value: cc.PhysicsJointRotaryLimit):#PhysicsJointRotaryLimit [PhysicsJointRotaryLimit]", "contents": "construct(${1:physicsbody:#cc.PhysicsBody},${2:physicsbody:#cc.PhysicsBody},${3:float:#float},${4:float:#float})" },{ "trigger": "ListViewGravitym_left [ListViewGravity]", "contents": "ListViewGravity.left" },{ "trigger": "ListViewGravitym_right [ListViewGravity]", "contents": "ListViewGravity.right" },{ "trigger": "ListViewGravitym_centerHorizontal [ListViewGravity]", "contents": "ListViewGravity.centerHorizontal" },{ "trigger": "ListViewGravitym_top [ListViewGravity]", "contents": "ListViewGravity.top" },{ "trigger": "ListViewGravitym_bottom [ListViewGravity]", "contents": "ListViewGravity.bottom" },{ "trigger": "ListViewGravitym_centerVertical [ListViewGravity]", "contents": "ListViewGravity.centerVertical" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionProgressHorizontal):#TransitionProgressHorizontal [TransitionProgressHorizontal]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_getGrid():ret (return value: cc.GridBase):#GridBase [TiledGrid3DAction]", "contents": "getGrid()" },{ "trigger": "s_clone():ret (return value: cc.TiledGrid3DAction):#TiledGrid3DAction [TiledGrid3DAction]", "contents": "clone()" },{ "trigger": "s_hitTest(physicsshape:#cc.PhysicsShape,physicsshape:#cc.PhysicsShape):ret (return value: bool):#bool [EventListenerPhysicsContactWithBodies]", "contents": "hitTest(${1:physicsshape:#cc.PhysicsShape},${2:physicsshape:#cc.PhysicsShape})" },{ "trigger": "s_create(physicsbody:#cc.PhysicsBody,physicsbody:#cc.PhysicsBody):ret (return value: cc.EventListenerPhysicsContactWithBodies):#EventListenerPhysicsContactWithBodies [EventListenerPhysicsContactWithBodies]", "contents": "create(${1:physicsbody:#cc.PhysicsBody},${2:physicsbody:#cc.PhysicsBody})" },{ "trigger": "s_clone():ret (return value: cc.EventListenerPhysicsContactWithBodies):#EventListenerPhysicsContactWithBodies [EventListenerPhysicsContactWithBodies]", "contents": "clone()" },{ "trigger": "s_getMaxT():ret (return value: float):#float [Texture2D]", "contents": "getMaxT()" },{ "trigger": "s_getStringForFormat():ret (return value: char):#char [Texture2D]", "contents": "getStringForFormat()" },{ "trigger": "f_initWithImage(cc.Image, cc.Texture2D::PixelFormat):ret (retunr value: bool):#bool [Texture2D]", "contents": "initWithImage(${1:cc.Image},${2: cc.Texture2D::PixelFormat})" },{ "trigger": "f_initWithImage(cc.Image):ret (retunr value: bool):#bool [Texture2D]", "contents": "initWithImage(${1:cc.Image})" },{ "trigger": "s_initWithImage(image:#cc.Image,pixelformat:#cc.Texture2D::PixelFormat):ret (retunr value: bool):#bool [Texture2D]", "contents": "initWithImage(${1:image:#cc.Image},${2:pixelformat:#cc.Texture2D::PixelFormat})" },{ "trigger": "s_getMaxS():ret (return value: float):#float [Texture2D]", "contents": "getMaxS()" },{ "trigger": "s_updateWithData(void:#void,int:#int,int:#int,int:#int,int:#int):ret (return value: bool):#bool [Texture2D]", "contents": "updateWithData(${1:void:#void},${2:int:#int},${3:int:#int},${4:int:#int},${5:int:#int})" },{ "trigger": "s_hasPremultipliedAlpha():ret (return value: bool):#bool [Texture2D]", "contents": "hasPremultipliedAlpha()" },{ "trigger": "s_initWithMipmaps(map:#cc._MipmapInfo,int:#int,pixelformat:#cc.Texture2D::PixelFormat,int:#int,int:#int):ret (return value: bool):#bool [Texture2D]", "contents": "initWithMipmaps(${1:map:#cc._MipmapInfo},${2:int:#int},${3:pixelformat:#cc.Texture2D::PixelFormat},${4:int:#int},${5:int:#int})" },{ "trigger": "s_getPixelsHigh():ret (return value: int):#int [Texture2D]", "contents": "getPixelsHigh()" },{ "trigger": "f_getBitsPerPixelForFormat(cc.Texture2D::PixelFormat):unsigned [Texture2D]", "contents": "getBitsPerPixelForFormat(${1:cc.Texture2D::PixelFormat})" },{ "trigger": "f_getBitsPerPixelForFormat():unsigned [Texture2D]", "contents": "getBitsPerPixelForFormat(${1:})" },{ "trigger": "s_getBitsPerPixelForFormat(pixelformat:#cc.Texture2D::PixelFormat):unsigned [Texture2D]", "contents": "getBitsPerPixelForFormat(${1:pixelformat:#cc.Texture2D::PixelFormat})" },{ "trigger": "s_getName():unsigned [Texture2D]", "contents": "getName()" },{ "trigger": "f_initWithString(char, cc.FontDefinition):ret (retunr value: bool):#bool [Texture2D]", "contents": "initWithString(${1:char},${2: cc.FontDefinition})" },{ "trigger": "f_initWithString(char, string, float, size_table, cc.TextHAlignment, cc.TextVAlignment):ret (retunr value: bool):#bool [Texture2D]", "contents": "initWithString(${1:char},${2: string},${3: float},${4: size_table},${5: cc.TextHAlignment},${6: cc.TextVAlignment})" },{ "trigger": "s_initWithString(char:#char,str:#string,float:#float,size:#size_table,texthalignment:#cc.TextHAlignment,textvalignment:#cc.TextVAlignment):ret (retunr value: bool):#bool [Texture2D]", "contents": "initWithString(${1:char:#char},${2:str:#string},${3:float:#float},${4:size:#size_table},${5:texthalignment:#cc.TextHAlignment},${6:textvalignment:#cc.TextVAlignment})" },{ "trigger": "s_setMaxT(float:#float):void [Texture2D]", "contents": "setMaxT(${1:float:#float})" },{ "trigger": "s_drawInRect(rect:#rect_table):void [Texture2D]", "contents": "drawInRect(${1:rect:#rect_table})" },{ "trigger": "s_getContentSize():ret (return value: size_table):#size_table [Texture2D]", "contents": "getContentSize()" },{ "trigger": "s_setAliasTexParameters():void [Texture2D]", "contents": "setAliasTexParameters()" },{ "trigger": "s_setAntiAliasTexParameters():void [Texture2D]", "contents": "setAntiAliasTexParameters()" },{ "trigger": "s_generateMipmap():void [Texture2D]", "contents": "generateMipmap()" },{ "trigger": "s_getDescription():ret (return value: string):#string [Texture2D]", "contents": "getDescription()" },{ "trigger": "s_getPixelFormat():ret (return value: cc.Texture2D::PixelFormat):#Texture2D::PixelFormat [Texture2D]", "contents": "getPixelFormat()" },{ "trigger": "s_setGLProgram(glprogram:#cc.GLProgram):void [Texture2D]", "contents": "setGLProgram(${1:glprogram:#cc.GLProgram})" },{ "trigger": "s_getContentSizeInPixels():ret (return value: size_table):#size_table [Texture2D]", "contents": "getContentSizeInPixels()" },{ "trigger": "s_getPixelsWide():ret (return value: int):#int [Texture2D]", "contents": "getPixelsWide()" },{ "trigger": "s_drawAtPoint(vec2:#cc.Vec2):void [Texture2D]", "contents": "drawAtPoint(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getGLProgram():ret (return value: cc.GLProgram):#GLProgram [Texture2D]", "contents": "getGLProgram()" },{ "trigger": "s_hasMipmaps():ret (return value: bool):#bool [Texture2D]", "contents": "hasMipmaps()" },{ "trigger": "s_setMaxS(float:#float):void [Texture2D]", "contents": "setMaxS(${1:float:#float})" },{ "trigger": "s_setDefaultAlphaPixelFormat(pixelformat:#cc.Texture2D::PixelFormat):void [Texture2D]", "contents": "setDefaultAlphaPixelFormat(${1:pixelformat:#cc.Texture2D::PixelFormat})" },{ "trigger": "s_getDefaultAlphaPixelFormat():ret (return value: cc.Texture2D::PixelFormat):#Texture2D::PixelFormat [Texture2D]", "contents": "getDefaultAlphaPixelFormat()" },{ "trigger": "s_PVRImagesHavePremultipliedAlpha(bool:#bool):void [Texture2D]", "contents": "PVRImagesHavePremultipliedAlpha(${1:bool:#bool})" },{ "trigger": "s_Texture2D():void [Texture2D]", "contents": "Texture2D()" },{ "trigger": "f_CCBReaderLoad(string:#string,CCBProxy:#cc.CCBProxy,table:#table):ret (return value: cc.Node):#Node [global]", "contents": "CCBReaderLoad(${1:string:#string},${2:CCBProxy:#cc.CCBProxy},${3:table:#table})" },{ "trigger": "f_ccDrawInit():void [global]", "contents": "ccDrawInit()" },{ "trigger": "f_ccDrawFree():void [global]", "contents": "ccDrawFree()" },{ "trigger": "f_ccDrawColor4f(float:#float,float:#float,float:#float,float:#float):void [global]", "contents": "ccDrawColor4f(${1:float:#float},${2:float:#float},${3:float:#float},${4:float:#float})" },{ "trigger": "f_ccPointSize(float:#float):void [global]", "contents": "ccPointSize(${1:float:#float})" },{ "trigger": "f_ccDrawColor4B(float:#float,float:#float,float:#float,float:#float):void [global]", "contents": "ccDrawColor4B(${1:float:#float},${2:float:#float},${3:float:#float},${4:float:#float})" },{ "trigger": "f_ccDrawPoint(point:#point_table):void [global]", "contents": "ccDrawPoint(${1:point:#point_table})" },{ "trigger": "f_ccDrawPoints(points:#point_array,int:#int):void [global]", "contents": "ccDrawPoints(${1:points:#point_array},${2:int:#int})" },{ "trigger": "f_ccDrawLine(point:#point_table,point:#point_table):void [global]", "contents": "ccDrawLine(${1:point:#point_table},${2:point:#point_table})" },{ "trigger": "f_ccDrawPoly(points:#point_array,int:#int,bool:#bool):void [global]", "contents": "ccDrawPoly(${1:points:#point_array},${2:int:#int},${3:bool:#bool})" },{ "trigger": "f_ccDrawSolidPoly(points:#point_array,int:#int,color4f:#color4f_table):void [global]", "contents": "ccDrawSolidPoly(${1:points:#point_array},${2:int:#int},${3:color4f:#color4f_table})" },{ "trigger": "f_ccDrawRect(point:#point_table,point:#point_table):void [global]", "contents": "ccDrawRect(${1:point:#point_table},${2:point:#point_table})" },{ "trigger": "f_ccDrawSolidRect(point:#point_table,point:#point_table,color4f:#color4f_table):void [global]", "contents": "ccDrawSolidRect(${1:point:#point_table},${2:point:#point_table},${3:color4f:#color4f_table})" },{ "trigger": "f_ccDrawCircleScale(point:#point_table,float:#float,float:#float,int:#int,bool:#bool,float:#float,float:#float):void [global]", "contents": "ccDrawCircleScale(${1:point:#point_table},${2:float:#float},${3:float:#float},${4:int:#int},${5:bool:#bool},${6:float:#float},${7:float:#float})" },{ "trigger": "f_ccDrawCircle(point:#point_table,float:#float,float:#float,int:#int,bool:#bool):void [global]", "contents": "ccDrawCircle(${1:point:#point_table},${2:float:#float},${3:float:#float},${4:int:#int},${5:bool:#bool})" },{ "trigger": "f_ccDrawSolidCircle(point:#point_table,float:#float,float:#float,int:#int,float:#float,float:#float):void [global]", "contents": "ccDrawSolidCircle(${1:point:#point_table},${2:float:#float},${3:float:#float},${4:int:#int},${5:float:#float},${6:float:#float})" },{ "trigger": "f_ccDrawCubicBezier(point:#point_table,point:#point_table,point:#point_table,point:#point_table,int:#int):void [global]", "contents": "ccDrawCubicBezier(${1:point:#point_table},${2:point:#point_table},${3:point:#point_table},${4:point:#point_table},${5:int:#int})" },{ "trigger": "f_clone(object:#Object):ret (return value: Obejct):#Obejct [global]", "contents": "clone(${1:object:#Object})" },{ "trigger": "f_class(classname:#string,super:#Obejct): ret (return value: table):#table [global]", "contents": "class(${1:classname:#string},${2:super:#Obejct})" },{ "trigger": "f_schedule(node:#cc.Node,func:#function,delay:#float):(return value: cc.RepeatForever):#RepeatForever [global]", "contents": "schedule(${1:node:#cc.Node},${2:func:#function},${3:delay:#float})" },{ "trigger": "f_performWithDelay(node:#cc.Node,func:#function,delay:#float):(return value: cc.Sequence):#Sequence [global]", "contents": "performWithDelay(${1:node:#cc.Node},${2:func:#function},${3:delay:#float})" },{ "trigger": "globalm_cc [global]", "contents": "global.cc" },{ "trigger": "globalm_ccs [global]", "contents": "global.ccs" },{ "trigger": "globalm_ccui [global]", "contents": "global.ccui" },{ "trigger": "globalm_sp [global]", "contents": "global.sp" },{ "trigger": "globalm_ScriptHandlerMgr [global]", "contents": "global.ScriptHandlerMgr" },{ "trigger": "globalm_WebSocket [global]", "contents": "global.WebSocket" },{ "trigger": "globalm_XmlHttpRequest [global]", "contents": "global.XmlHttpRequest" },{ "trigger": "globalm_gl [global]", "contents": "global.gl" },{ "trigger": "globalm_AudioEngine [global]", "contents": "global.AudioEngine" },{ "trigger": "globalm_LuaObjcBridge [global]", "contents": "global.LuaObjcBridge" },{ "trigger": "globalm_LuaJavaBridge [global]", "contents": "global.LuaJavaBridge" },{ "trigger": "f_create(float, cc.Scene):ret (retunr value: cc.TransitionZoomFlipX):#TransitionZoomFlipX [TransitionZoomFlipX]", "contents": "create(${1:float},${2: cc.Scene})" },{ "trigger": "f_create(float, cc.Scene, cc.TransitionScene::Orientation):ret (retunr value: cc.TransitionZoomFlipX):#TransitionZoomFlipX [TransitionZoomFlipX]", "contents": "create(${1:float},${2: cc.Scene},${3: cc.TransitionScene::Orientation})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene,orientation:#cc.TransitionScene::Orientation):ret (retunr value: cc.TransitionZoomFlipX):#TransitionZoomFlipX [TransitionZoomFlipX]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene},${3:orientation:#cc.TransitionScene::Orientation})" },{ "trigger": "s_action():ret (return value: cc.ActionInterval):#ActionInterval [TransitionMoveInL]", "contents": "action()" },{ "trigger": "s_easeActionWithAction(actioninterval:#cc.ActionInterval):ret (return value: cc.ActionInterval):#ActionInterval [TransitionMoveInL]", "contents": "easeActionWithAction(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionMoveInL):#TransitionMoveInL [TransitionMoveInL]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_getStartColor():ret (return value: color3b_table):#color3b_table [LayerGradient]", "contents": "getStartColor()" },{ "trigger": "s_isCompressedInterpolation():ret (return value: bool):#bool [LayerGradient]", "contents": "isCompressedInterpolation()" },{ "trigger": "s_getStartOpacity():unsigned [LayerGradient]", "contents": "getStartOpacity()" },{ "trigger": "s_setVector(vec2:#cc.Vec2):void [LayerGradient]", "contents": "setVector(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setStartOpacity(char char:#unsigned):void [LayerGradient]", "contents": "setStartOpacity(${1:char char:#unsigned})" },{ "trigger": "s_setCompressedInterpolation(bool:#bool):void [LayerGradient]", "contents": "setCompressedInterpolation(${1:bool:#bool})" },{ "trigger": "s_setEndOpacity(char char:#unsigned):void [LayerGradient]", "contents": "setEndOpacity(${1:char char:#unsigned})" },{ "trigger": "s_getVector():ret (return value: cc.Vec2):#Vec2 [LayerGradient]", "contents": "getVector()" },{ "trigger": "s_setEndColor(color3b:#color3b_table):void [LayerGradient]", "contents": "setEndColor(${1:color3b:#color3b_table})" },{ "trigger": "s_getEndColor():ret (return value: color3b_table):#color3b_table [LayerGradient]", "contents": "getEndColor()" },{ "trigger": "s_getEndOpacity():unsigned [LayerGradient]", "contents": "getEndOpacity()" },{ "trigger": "s_setStartColor(color3b:#color3b_table):void [LayerGradient]", "contents": "setStartColor(${1:color3b:#color3b_table})" },{ "trigger": "f_create(color4b_table, color4b_table):ret (retunr value: cc.LayerGradient):#LayerGradient [LayerGradient]", "contents": "create(${1:color4b_table},${2: color4b_table})" },{ "trigger": "f_create():ret (retunr value: cc.LayerGradient):#LayerGradient [LayerGradient]", "contents": "create(${1:})" },{ "trigger": "f_create(color4b_table, color4b_table, cc.Vec2):ret (retunr value: cc.LayerGradient):#LayerGradient [LayerGradient]", "contents": "create(${1:color4b_table},${2: color4b_table},${3: cc.Vec2})" },{ "trigger": "s_create(color4b:#color4b_table,color4b:#color4b_table,vec2:#cc.Vec2):ret (retunr value: cc.LayerGradient):#LayerGradient [LayerGradient]", "contents": "create(${1:color4b:#color4b_table},${2:color4b:#color4b_table},${3:vec2:#cc.Vec2})" },{ "trigger": "s_getDescription():ret (return value: string):#string [LayerGradient]", "contents": "getDescription()" },{ "trigger": "s_setCurrentTime(float:#float):void [ActionObject]", "contents": "setCurrentTime(${1:float:#float})" },{ "trigger": "s_pause():void [ActionObject]", "contents": "pause()" },{ "trigger": "s_setName(char:#char):void [ActionObject]", "contents": "setName(${1:char:#char})" },{ "trigger": "s_setUnitTime(float:#float):void [ActionObject]", "contents": "setUnitTime(${1:float:#float})" },{ "trigger": "s_getTotalTime():ret (return value: float):#float [ActionObject]", "contents": "getTotalTime()" },{ "trigger": "s_getName():ret (return value: char):#char [ActionObject]", "contents": "getName()" },{ "trigger": "s_stop():void [ActionObject]", "contents": "stop()" },{ "trigger": "f_play(cc.CallFunc):void [ActionObject]", "contents": "play(${1:cc.CallFunc})" },{ "trigger": "f_play():void [ActionObject]", "contents": "play(${1:})" },{ "trigger": "s_play(callfunc:#cc.CallFunc):void [ActionObject]", "contents": "play(${1:callfunc:#cc.CallFunc})" },{ "trigger": "s_getCurrentTime():ret (return value: float):#float [ActionObject]", "contents": "getCurrentTime()" },{ "trigger": "s_removeActionNode(actionnode:#ccs.ActionNode):void [ActionObject]", "contents": "removeActionNode(${1:actionnode:#ccs.ActionNode})" },{ "trigger": "s_getLoop():ret (return value: bool):#bool [ActionObject]", "contents": "getLoop()" },{ "trigger": "s_addActionNode(actionnode:#ccs.ActionNode):void [ActionObject]", "contents": "addActionNode(${1:actionnode:#ccs.ActionNode})" },{ "trigger": "s_getUnitTime():ret (return value: float):#float [ActionObject]", "contents": "getUnitTime()" },{ "trigger": "s_isPlaying():ret (return value: bool):#bool [ActionObject]", "contents": "isPlaying()" },{ "trigger": "s_updateToFrameByTime(float:#float):void [ActionObject]", "contents": "updateToFrameByTime(${1:float:#float})" },{ "trigger": "s_setLoop(bool:#bool):void [ActionObject]", "contents": "setLoop(${1:bool:#bool})" },{ "trigger": "s_simulationActionUpdate(float:#float):void [ActionObject]", "contents": "simulationActionUpdate(${1:float:#float})" },{ "trigger": "s_ActionObject():void [ActionObject]", "contents": "ActionObject()" },{ "trigger": "f_callStaticMethod(className:#string,methodName:#string,args:#table,methodSig:#string):ret (return value: int):#int [LuaJavaBridge]", "contents": "callStaticMethod(${1:className:#string},${2:methodName:#string},${3:args:#table},${4:methodSig:#string})" },{ "trigger": "Handlerm_NODE [Handler]", "contents": "Handler.NODE" },{ "trigger": "Handlerm_MENU_CLICKED [Handler]", "contents": "Handler.MENU_CLICKED" },{ "trigger": "Handlerm_CALLFUNC [Handler]", "contents": "Handler.CALLFUNC" },{ "trigger": "Handlerm_SCHEDULE [Handler]", "contents": "Handler.SCHEDULE" },{ "trigger": "Handlerm_TOUCHES [Handler]", "contents": "Handler.TOUCHES" },{ "trigger": "Handlerm_KEYPAD [Handler]", "contents": "Handler.KEYPAD" },{ "trigger": "Handlerm_ACCELEROMETER [Handler]", "contents": "Handler.ACCELEROMETER" },{ "trigger": "Handlerm_CONTROL_TOUCH_DOWN [Handler]", "contents": "Handler.CONTROL_TOUCH_DOWN" },{ "trigger": "Handlerm_CONTROL_TOUCH_DRAG_INSIDE [Handler]", "contents": "Handler.CONTROL_TOUCH_DRAG_INSIDE" },{ "trigger": "Handlerm_CONTROL_TOUCH_DRAG_OUTSIDE [Handler]", "contents": "Handler.CONTROL_TOUCH_DRAG_OUTSIDE" },{ "trigger": "Handlerm_CONTROL_TOUCH_DRAG_OUTSIDE [Handler]", "contents": "Handler.CONTROL_TOUCH_DRAG_OUTSIDE" },{ "trigger": "Handlerm_CONTROL_TOUCH_DRAG_OUTSIDE [Handler]", "contents": "Handler.CONTROL_TOUCH_DRAG_OUTSIDE" },{ "trigger": "Handlerm_CONTROL_TOUCH_UP_INSIDE [Handler]", "contents": "Handler.CONTROL_TOUCH_UP_INSIDE" },{ "trigger": "Handlerm_CONTROL_TOUCH_UP_OUTSIDE [Handler]", "contents": "Handler.CONTROL_TOUCH_UP_OUTSIDE" },{ "trigger": "Handlerm_CONTROL_TOUCH_UP_CANCEL [Handler]", "contents": "Handler.CONTROL_TOUCH_UP_CANCEL" },{ "trigger": "Handlerm_CONTROL_VALUE_CHANGED [Handler]", "contents": "Handler.CONTROL_VALUE_CHANGED" },{ "trigger": "Handlerm_WEBSOCKET_OPEN [Handler]", "contents": "Handler.WEBSOCKET_OPEN" },{ "trigger": "Handlerm_WEBSOCKET_MESSAGE [Handler]", "contents": "Handler.WEBSOCKET_MESSAGE" },{ "trigger": "Handlerm_WEBSOCKET_CLOSE [Handler]", "contents": "Handler.WEBSOCKET_CLOSE" },{ "trigger": "Handlerm_WEBSOCKET_ERROR [Handler]", "contents": "Handler.WEBSOCKET_ERROR" },{ "trigger": "Handlerm_GL_NODE_DRAW [Handler]", "contents": "Handler.GL_NODE_DRAW" },{ "trigger": "Handlerm_SCROLLVIEW_SCROLL [Handler]", "contents": "Handler.SCROLLVIEW_SCROLL" },{ "trigger": "Handlerm_SCROLLVIEW_ZOOM [Handler]", "contents": "Handler.SCROLLVIEW_ZOOM" },{ "trigger": "Handlerm_TABLECELL_TOUCHED [Handler]", "contents": "Handler.TABLECELL_TOUCHED" },{ "trigger": "Handlerm_TABLECELL_HIGHLIGHT [Handler]", "contents": "Handler.TABLECELL_HIGHLIGHT" },{ "trigger": "Handlerm_TABLECELL_UNHIGHLIGHT [Handler]", "contents": "Handler.TABLECELL_UNHIGHLIGHT" },{ "trigger": "Handlerm_TABLECELL_WILL_RECYCLE [Handler]", "contents": "Handler.TABLECELL_WILL_RECYCLE" },{ "trigger": "Handlerm_TABLECELL_SIZE_FOR_INDEX [Handler]", "contents": "Handler.TABLECELL_SIZE_FOR_INDEX" },{ "trigger": "Handlerm_TABLECELL_AT_INDEX [Handler]", "contents": "Handler.TABLECELL_AT_INDEX" },{ "trigger": "Handlerm_TABLEVIEW_NUMS_OF_CELLS [Handler]", "contents": "Handler.TABLEVIEW_NUMS_OF_CELLS" },{ "trigger": "Handlerm_HTTPREQUEST_STATE_CHANGE [Handler]", "contents": "Handler.HTTPREQUEST_STATE_CHANGE" },{ "trigger": "Handlerm_ASSETSMANAGER_PROGRESS [Handler]", "contents": "Handler.ASSETSMANAGER_PROGRESS" },{ "trigger": "Handlerm_ASSETSMANAGER_SUCCESS [Handler]", "contents": "Handler.ASSETSMANAGER_SUCCESS" },{ "trigger": "Handlerm_ASSETSMANAGER_ERROR [Handler]", "contents": "Handler.ASSETSMANAGER_ERROR" },{ "trigger": "Handlerm_STUDIO_EVENT_LISTENER [Handler]", "contents": "Handler.STUDIO_EVENT_LISTENER" },{ "trigger": "Handlerm_ARMATURE_EVENT [Handler]", "contents": "Handler.ARMATURE_EVENT" },{ "trigger": "Handlerm_EVENT_ACC [Handler]", "contents": "Handler.EVENT_ACC" },{ "trigger": "Handlerm_EVENT_CUSTIOM [Handler]", "contents": "Handler.EVENT_CUSTIOM" },{ "trigger": "Handlerm_EVENT_KEYBOARD_PRESSED [Handler]", "contents": "Handler.EVENT_KEYBOARD_PRESSED" },{ "trigger": "Handlerm_EVENT_TOUCH_BEGAN [Handler]", "contents": "Handler.EVENT_TOUCH_BEGAN" },{ "trigger": "Handlerm_EVENT_TOUCH_MOVED [Handler]", "contents": "Handler.EVENT_TOUCH_MOVED" },{ "trigger": "Handlerm_EVENT_TOUCH_ENDED [Handler]", "contents": "Handler.EVENT_TOUCH_ENDED" },{ "trigger": "Handlerm_EVENT_TOUCH_CANCELLED [Handler]", "contents": "Handler.EVENT_TOUCH_CANCELLED" },{ "trigger": "Handlerm_EVENT_TOUCHES_BEGAN [Handler]", "contents": "Handler.EVENT_TOUCHES_BEGAN" },{ "trigger": "Handlerm_EVENT_TOUCHES_MOVED [Handler]", "contents": "Handler.EVENT_TOUCHES_MOVED" },{ "trigger": "Handlerm_EVENT_TOUCHES_CANCELLED [Handler]", "contents": "Handler.EVENT_TOUCHES_CANCELLED" },{ "trigger": "Handlerm_EVENT_TOUCHES_CANCELLED [Handler]", "contents": "Handler.EVENT_TOUCHES_CANCELLED" },{ "trigger": "Handlerm_EVENT_MOUSE_DOWN [Handler]", "contents": "Handler.EVENT_MOUSE_DOWN" },{ "trigger": "Handlerm_EVENT_MOUSE_UP [Handler]", "contents": "Handler.EVENT_MOUSE_UP" },{ "trigger": "Handlerm_EVENT_MOUSE_MOVE [Handler]", "contents": "Handler.EVENT_MOUSE_MOVE" },{ "trigger": "Handlerm_EVENT_MOUSE_SCROLL [Handler]", "contents": "Handler.EVENT_MOUSE_SCROLL" },{ "trigger": "Handlerm_EVENT_SPINE [Handler]", "contents": "Handler.EVENT_SPINE" },{ "trigger": "Handlerm_EVENT_PHYSICS_CONTACT_BEGIN [Handler]", "contents": "Handler.EVENT_PHYSICS_CONTACT_BEGIN" },{ "trigger": "Handlerm_EVENT_PHYSICS_CONTACT_PRESOLVE [Handler]", "contents": "Handler.EVENT_PHYSICS_CONTACT_PRESOLVE" },{ "trigger": "Handlerm_EVENT_PHYSICS_CONTACT_POSTSOLVE [Handler]", "contents": "Handler.EVENT_PHYSICS_CONTACT_POSTSOLVE" },{ "trigger": "Handlerm_EVENT_PHYSICS_CONTACT_SEPERATE [Handler]", "contents": "Handler.EVENT_PHYSICS_CONTACT_SEPERATE" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionProgress):#TransitionProgress [TransitionProgress]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_TransitionProgress():void [TransitionProgress]", "contents": "TransitionProgress()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionProgressVertical):#TransitionProgressVertical [TransitionProgressVertical]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_initWithDuration(float:#float,pointarray:#point_table):ret (return value: bool):#bool [CatmullRomBy]", "contents": "initWithDuration(${1:float:#float},${2:pointarray:#point_table})" },{ "trigger": "s_clone():ret (return value: cc.CatmullRomBy):#CatmullRomBy [CatmullRomBy]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.CatmullRomBy):#CatmullRomBy [CatmullRomBy]", "contents": "reverse()" },{ "trigger": "s_getRectForGID(int int:#unsigned):ret (return value: rect_table):#rect_table [TMXTilesetInfo]", "contents": "getRectForGID(${1:int int:#unsigned})" },{ "trigger": "s_TMXTilesetInfo():void [TMXTilesetInfo]", "contents": "TMXTilesetInfo()" },{ "trigger": "s_reset():void [TableViewCell]", "contents": "reset()" },{ "trigger": "s_getIdx():ret (return value: long):#long [TableViewCell]", "contents": "getIdx()" },{ "trigger": "s_setIdx(long:#long):void [TableViewCell]", "contents": "setIdx(${1:long:#long})" },{ "trigger": "s_create():ret (return value: cc.TableViewCell):#TableViewCell [TableViewCell]", "contents": "create()" },{ "trigger": "s_TableViewCell():void [TableViewCell]", "contents": "TableViewCell()" },{ "trigger": "f_create(cc.ActionInterval):ret (retunr value: cc.EaseElasticOut):#EaseElasticOut [EaseElasticOut]", "contents": "create(${1:cc.ActionInterval})" },{ "trigger": "f_create(cc.ActionInterval, float):ret (retunr value: cc.EaseElasticOut):#EaseElasticOut [EaseElasticOut]", "contents": "create(${1:cc.ActionInterval},${2: float})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval,float:#float):ret (retunr value: cc.EaseElasticOut):#EaseElasticOut [EaseElasticOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval},${2:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.EaseElasticOut):#EaseElasticOut [EaseElasticOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseElasticOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseElastic):#EaseElastic [EaseElasticOut]", "contents": "reverse()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionProgressOutIn):#TransitionProgressOutIn [TransitionProgressOutIn]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_seekWidgetByTag(widget:#ccui.Widget,int:#int):ret (return value: ccui.Widget):#Widget [Helper]", "contents": "seekWidgetByTag(${1:widget:#ccui.Widget},${2:int:#int})" },{ "trigger": "s_seekActionWidgetByActionTag(widget:#ccui.Widget,int:#int):ret (return value: ccui.Widget):#Widget [Helper]", "contents": "seekActionWidgetByActionTag(${1:widget:#ccui.Widget},${2:int:#int})" },{ "trigger": "s_seekWidgetByName(widget:#ccui.Widget,str:#string):ret (return value: ccui.Widget):#Widget [Helper]", "contents": "seekWidgetByName(${1:widget:#ccui.Widget},${2:str:#string})" },{ "trigger": "s_getSelectedThumbSprite():ret (return value: cc.Sprite):#Sprite [ControlSlider]", "contents": "getSelectedThumbSprite()" },{ "trigger": "s_locationFromTouch(touch:#cc.Touch):ret (return value: cc.Vec2):#Vec2 [ControlSlider]", "contents": "locationFromTouch(${1:touch:#cc.Touch})" },{ "trigger": "s_setSelectedThumbSprite(sprite:#cc.Sprite):void [ControlSlider]", "contents": "setSelectedThumbSprite(${1:sprite:#cc.Sprite})" },{ "trigger": "s_setProgressSprite(sprite:#cc.Sprite):void [ControlSlider]", "contents": "setProgressSprite(${1:sprite:#cc.Sprite})" },{ "trigger": "s_getMaximumAllowedValue():ret (return value: float):#float [ControlSlider]", "contents": "getMaximumAllowedValue()" },{ "trigger": "s_getMinimumAllowedValue():ret (return value: float):#float [ControlSlider]", "contents": "getMinimumAllowedValue()" },{ "trigger": "s_getMinimumValue():ret (return value: float):#float [ControlSlider]", "contents": "getMinimumValue()" },{ "trigger": "s_setThumbSprite(sprite:#cc.Sprite):void [ControlSlider]", "contents": "setThumbSprite(${1:sprite:#cc.Sprite})" },{ "trigger": "s_setMinimumValue(float:#float):void [ControlSlider]", "contents": "setMinimumValue(${1:float:#float})" },{ "trigger": "s_setMinimumAllowedValue(float:#float):void [ControlSlider]", "contents": "setMinimumAllowedValue(${1:float:#float})" },{ "trigger": "s_setEnabled(bool:#bool):void [ControlSlider]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_setValue(float:#float):void [ControlSlider]", "contents": "setValue(${1:float:#float})" },{ "trigger": "s_setMaximumValue(float:#float):void [ControlSlider]", "contents": "setMaximumValue(${1:float:#float})" },{ "trigger": "s_needsLayout():void [ControlSlider]", "contents": "needsLayout()" },{ "trigger": "s_getBackgroundSprite():ret (return value: cc.Sprite):#Sprite [ControlSlider]", "contents": "getBackgroundSprite()" },{ "trigger": "f_initWithSprites(cc.Sprite, cc.Sprite, cc.Sprite, cc.Sprite):ret (retunr value: bool):#bool [ControlSlider]", "contents": "initWithSprites(${1:cc.Sprite},${2: cc.Sprite},${3: cc.Sprite},${4: cc.Sprite})" },{ "trigger": "f_initWithSprites(cc.Sprite, cc.Sprite, cc.Sprite):ret (retunr value: bool):#bool [ControlSlider]", "contents": "initWithSprites(${1:cc.Sprite},${2: cc.Sprite},${3: cc.Sprite})" },{ "trigger": "s_initWithSprites(sprite:#cc.Sprite,sprite:#cc.Sprite,sprite:#cc.Sprite,sprite:#cc.Sprite):ret (retunr value: bool):#bool [ControlSlider]", "contents": "initWithSprites(${1:sprite:#cc.Sprite},${2:sprite:#cc.Sprite},${3:sprite:#cc.Sprite},${4:sprite:#cc.Sprite})" },{ "trigger": "s_getMaximumValue():ret (return value: float):#float [ControlSlider]", "contents": "getMaximumValue()" },{ "trigger": "s_isTouchInside(touch:#cc.Touch):ret (return value: bool):#bool [ControlSlider]", "contents": "isTouchInside(${1:touch:#cc.Touch})" },{ "trigger": "s_getValue():ret (return value: float):#float [ControlSlider]", "contents": "getValue()" },{ "trigger": "s_getThumbSprite():ret (return value: cc.Sprite):#Sprite [ControlSlider]", "contents": "getThumbSprite()" },{ "trigger": "s_getProgressSprite():ret (return value: cc.Sprite):#Sprite [ControlSlider]", "contents": "getProgressSprite()" },{ "trigger": "s_setBackgroundSprite(sprite:#cc.Sprite):void [ControlSlider]", "contents": "setBackgroundSprite(${1:sprite:#cc.Sprite})" },{ "trigger": "s_setMaximumAllowedValue(float:#float):void [ControlSlider]", "contents": "setMaximumAllowedValue(${1:float:#float})" },{ "trigger": "f_create(cc.Sprite, cc.Sprite, cc.Sprite):ret (retunr value: cc.ControlSlider):#ControlSlider [ControlSlider]", "contents": "create(${1:cc.Sprite},${2: cc.Sprite},${3: cc.Sprite})" },{ "trigger": "f_create(char, char, char):ret (retunr value: cc.ControlSlider):#ControlSlider [ControlSlider]", "contents": "create(${1:char},${2: char},${3: char})" },{ "trigger": "f_create(char, char, char, char):ret (retunr value: cc.ControlSlider):#ControlSlider [ControlSlider]", "contents": "create(${1:char},${2: char},${3: char},${4: char})" },{ "trigger": "f_create(cc.Sprite, cc.Sprite, cc.Sprite, cc.Sprite):ret (retunr value: cc.ControlSlider):#ControlSlider [ControlSlider]", "contents": "create(${1:cc.Sprite},${2: cc.Sprite},${3: cc.Sprite},${4: cc.Sprite})" },{ "trigger": "s_create(sprite:#cc.Sprite,sprite:#cc.Sprite,sprite:#cc.Sprite,sprite:#cc.Sprite):ret (retunr value: cc.ControlSlider):#ControlSlider [ControlSlider]", "contents": "create(${1:sprite:#cc.Sprite},${2:sprite:#cc.Sprite},${3:sprite:#cc.Sprite},${4:sprite:#cc.Sprite})" },{ "trigger": "s_ControlSlider():void [ControlSlider]", "contents": "ControlSlider()" },{ "trigger": "s_getFriction():ret (return value: float):#float [PhysicsContactPostSolve]", "contents": "getFriction()" },{ "trigger": "s_getSurfaceVelocity():ret (return value: cc.Vec2):#Vec2 [PhysicsContactPostSolve]", "contents": "getSurfaceVelocity()" },{ "trigger": "s_getRestitution():ret (return value: float):#float [PhysicsContactPostSolve]", "contents": "getRestitution()" },{ "trigger": "s_getColor():ret (return value: color4b_table):#color4b_table [BaseData]", "contents": "getColor()" },{ "trigger": "s_setColor(color4b:#color4b_table):void [BaseData]", "contents": "setColor(${1:color4b:#color4b_table})" },{ "trigger": "s_create():ret (return value: ccs.BaseData):#BaseData [BaseData]", "contents": "create()" },{ "trigger": "s_BaseData():void [BaseData]", "contents": "BaseData()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionProgressRadialCCW):#TransitionProgressRadialCCW [TransitionProgressRadialCCW]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_clone():ret (return value: cc.EventListenerAcceleration):#EventListenerAcceleration [EventListenerAcceleration]", "contents": "clone()" },{ "trigger": "s_checkAvailable():ret (return value: bool):#bool [EventListenerAcceleration]", "contents": "checkAvailable()" },{ "trigger": "s_getActionByTag(int:#int,node:#cc.Node):ret (return value: cc.Action):#Action [ActionManager]", "contents": "getActionByTag(${1:int:#int},${2:node:#cc.Node})" },{ "trigger": "s_removeActionByTag(int:#int,node:#cc.Node):void [ActionManager]", "contents": "removeActionByTag(${1:int:#int},${2:node:#cc.Node})" },{ "trigger": "s_removeAllActions():void [ActionManager]", "contents": "removeAllActions()" },{ "trigger": "s_addAction(action:#cc.Action,node:#cc.Node,bool:#bool):void [ActionManager]", "contents": "addAction(${1:action:#cc.Action},${2:node:#cc.Node},${3:bool:#bool})" },{ "trigger": "s_resumeTarget(node:#cc.Node):void [ActionManager]", "contents": "resumeTarget(${1:node:#cc.Node})" },{ "trigger": "s_update(float:#float):void [ActionManager]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getNumberOfRunningActionsInTarget(node:#cc.Node):ret (return value: long):#long [ActionManager]", "contents": "getNumberOfRunningActionsInTarget(${1:node:#cc.Node})" },{ "trigger": "s_removeAllActionsFromTarget(node:#cc.Node):void [ActionManager]", "contents": "removeAllActionsFromTarget(${1:node:#cc.Node})" },{ "trigger": "s_resumeTargets(array:#array_table):void [ActionManager]", "contents": "resumeTargets(${1:array:#array_table})" },{ "trigger": "s_removeAction(action:#cc.Action):void [ActionManager]", "contents": "removeAction(${1:action:#cc.Action})" },{ "trigger": "s_pauseTarget(node:#cc.Node):void [ActionManager]", "contents": "pauseTarget(${1:node:#cc.Node})" },{ "trigger": "s_pauseAllRunningActions():ret (return value: array_table):#array_table [ActionManager]", "contents": "pauseAllRunningActions()" },{ "trigger": "s_ActionManager():void [ActionManager]", "contents": "ActionManager()" },{ "trigger": "s_finish():void [TransitionScene]", "contents": "finish()" },{ "trigger": "s_hideOutShowIn():void [TransitionScene]", "contents": "hideOutShowIn()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionScene):#TransitionScene [TransitionScene]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [TransitionScene]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_cleanup():void [TransitionScene]", "contents": "cleanup()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseExponentialIn):#EaseExponentialIn [EaseExponentialIn]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseExponentialIn):#EaseExponentialIn [EaseExponentialIn]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseExponentialIn]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.ActionEase):#ActionEase [EaseExponentialIn]", "contents": "reverse()" },{ "trigger": "s_hasPremultipliedAlpha():ret (return value: bool):#bool [Image]", "contents": "hasPremultipliedAlpha()" },{ "trigger": "s_saveToFile(str:#string,bool:#bool):ret (return value: bool):#bool [Image]", "contents": "saveToFile(${1:str:#string},${2:bool:#bool})" },{ "trigger": "s_getBitPerPixel():ret (return value: int):#int [Image]", "contents": "getBitPerPixel()" },{ "trigger": "s_hasAlpha():ret (return value: bool):#bool [Image]", "contents": "hasAlpha()" },{ "trigger": "s_isCompressed():ret (return value: bool):#bool [Image]", "contents": "isCompressed()" },{ "trigger": "s_getHeight():ret (return value: int):#int [Image]", "contents": "getHeight()" },{ "trigger": "s_initWithImageFile(str:#string):ret (return value: bool):#bool [Image]", "contents": "initWithImageFile(${1:str:#string})" },{ "trigger": "s_getWidth():ret (return value: int):#int [Image]", "contents": "getWidth()" },{ "trigger": "s_isPremultipliedAlpha():ret (return value: bool):#bool [Image]", "contents": "isPremultipliedAlpha()" },{ "trigger": "s_getFileType():ret (return value: cc.Image::Format):#Image::Format [Image]", "contents": "getFileType()" },{ "trigger": "s_getNumberOfMipmaps():ret (return value: int):#int [Image]", "contents": "getNumberOfMipmaps()" },{ "trigger": "s_getRenderFormat():ret (return value: cc.Texture2D::PixelFormat):#Texture2D::PixelFormat [Image]", "contents": "getRenderFormat()" },{ "trigger": "s_Image():void [Image]", "contents": "Image()" },{ "trigger": "s_setObjectGroups(array:#array_table):void [TMXMapInfo]", "contents": "setObjectGroups(${1:array:#array_table})" },{ "trigger": "s_setTileSize(size:#size_table):void [TMXMapInfo]", "contents": "setTileSize(${1:size:#size_table})" },{ "trigger": "s_initWithTMXFile(str:#string):ret (return value: bool):#bool [TMXMapInfo]", "contents": "initWithTMXFile(${1:str:#string})" },{ "trigger": "s_getOrientation():ret (return value: int):#int [TMXMapInfo]", "contents": "getOrientation()" },{ "trigger": "s_isStoringCharacters():ret (return value: bool):#bool [TMXMapInfo]", "contents": "isStoringCharacters()" },{ "trigger": "s_setLayers(array:#array_table):void [TMXMapInfo]", "contents": "setLayers(${1:array:#array_table})" },{ "trigger": "s_parseXMLFile(str:#string):ret (return value: bool):#bool [TMXMapInfo]", "contents": "parseXMLFile(${1:str:#string})" },{ "trigger": "s_getParentElement():ret (return value: int):#int [TMXMapInfo]", "contents": "getParentElement()" },{ "trigger": "s_setTMXFileName(str:#string):void [TMXMapInfo]", "contents": "setTMXFileName(${1:str:#string})" },{ "trigger": "s_parseXMLString(str:#string):ret (return value: bool):#bool [TMXMapInfo]", "contents": "parseXMLString(${1:str:#string})" },{ "trigger": "f_getLayers():ret (retunr value: array_table):#array_table [TMXMapInfo]", "contents": "getLayers(${1:})" },{ "trigger": "f_getLayers():ret (retunr value: array_table):#array_table [TMXMapInfo]", "contents": "getLayers(${1:})" },{ "trigger": "s_getLayers():ret (retunr value: array_table):#array_table [TMXMapInfo]", "contents": "getLayers()" },{ "trigger": "f_getTilesets():ret (retunr value: array_table):#array_table [TMXMapInfo]", "contents": "getTilesets(${1:})" },{ "trigger": "f_getTilesets():ret (retunr value: array_table):#array_table [TMXMapInfo]", "contents": "getTilesets(${1:})" },{ "trigger": "s_getTilesets():ret (retunr value: array_table):#array_table [TMXMapInfo]", "contents": "getTilesets()" },{ "trigger": "s_getParentGID():ret (return value: int):#int [TMXMapInfo]", "contents": "getParentGID()" },{ "trigger": "s_setParentElement(int:#int):void [TMXMapInfo]", "contents": "setParentElement(${1:int:#int})" },{ "trigger": "s_initWithXML(str:#string,str:#string):ret (return value: bool):#bool [TMXMapInfo]", "contents": "initWithXML(${1:str:#string},${2:str:#string})" },{ "trigger": "s_setParentGID(int:#int):void [TMXMapInfo]", "contents": "setParentGID(${1:int:#int})" },{ "trigger": "s_getLayerAttribs():ret (return value: int):#int [TMXMapInfo]", "contents": "getLayerAttribs()" },{ "trigger": "s_getTileSize():ret (return value: size_table):#size_table [TMXMapInfo]", "contents": "getTileSize()" },{ "trigger": "s_getTileProperties():ret (return value: map_table):#map_table [TMXMapInfo]", "contents": "getTileProperties()" },{ "trigger": "f_getObjectGroups():ret (retunr value: array_table):#array_table [TMXMapInfo]", "contents": "getObjectGroups(${1:})" },{ "trigger": "f_getObjectGroups():ret (retunr value: array_table):#array_table [TMXMapInfo]", "contents": "getObjectGroups(${1:})" },{ "trigger": "s_getObjectGroups():ret (retunr value: array_table):#array_table [TMXMapInfo]", "contents": "getObjectGroups()" },{ "trigger": "s_getTMXFileName():ret (return value: string):#string [TMXMapInfo]", "contents": "getTMXFileName()" },{ "trigger": "s_setCurrentString(str:#string):void [TMXMapInfo]", "contents": "setCurrentString(${1:str:#string})" },{ "trigger": "s_setProperties(map:#map_table):void [TMXMapInfo]", "contents": "setProperties(${1:map:#map_table})" },{ "trigger": "s_setOrientation(int:#int):void [TMXMapInfo]", "contents": "setOrientation(${1:int:#int})" },{ "trigger": "s_setTileProperties(map:#map_table):void [TMXMapInfo]", "contents": "setTileProperties(${1:map:#map_table})" },{ "trigger": "s_setMapSize(size:#size_table):void [TMXMapInfo]", "contents": "setMapSize(${1:size:#size_table})" },{ "trigger": "s_setStoringCharacters(bool:#bool):void [TMXMapInfo]", "contents": "setStoringCharacters(${1:bool:#bool})" },{ "trigger": "s_getMapSize():ret (return value: size_table):#size_table [TMXMapInfo]", "contents": "getMapSize()" },{ "trigger": "s_setTilesets(array:#array_table):void [TMXMapInfo]", "contents": "setTilesets(${1:array:#array_table})" },{ "trigger": "f_getProperties():ret (retunr value: map_table):#map_table [TMXMapInfo]", "contents": "getProperties(${1:})" },{ "trigger": "f_getProperties():ret (retunr value: map_table):#map_table [TMXMapInfo]", "contents": "getProperties(${1:})" },{ "trigger": "s_getProperties():ret (retunr value: map_table):#map_table [TMXMapInfo]", "contents": "getProperties()" },{ "trigger": "s_getCurrentString():ret (return value: string):#string [TMXMapInfo]", "contents": "getCurrentString()" },{ "trigger": "s_setLayerAttribs(int:#int):void [TMXMapInfo]", "contents": "setLayerAttribs(${1:int:#int})" },{ "trigger": "s_create(str:#string):ret (return value: cc.TMXMapInfo):#TMXMapInfo [TMXMapInfo]", "contents": "create(${1:str:#string})" },{ "trigger": "s_createWithXML(str:#string,str:#string):ret (return value: cc.TMXMapInfo):#TMXMapInfo [TMXMapInfo]", "contents": "createWithXML(${1:str:#string},${2:str:#string})" },{ "trigger": "s_TMXMapInfo():void [TMXMapInfo]", "contents": "TMXMapInfo()" },{ "trigger": "s_create(float:#float):ret (return value: cc.FlipY3D):#FlipY3D [FlipY3D]", "contents": "create(${1:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.FlipY3D):#FlipY3D [FlipY3D]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [FlipY3D]", "contents": "update(${1:float:#float})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseCubicActionInOut):#EaseCubicActionInOut [EaseCubicActionInOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseCubicActionInOut):#EaseCubicActionInOut [EaseCubicActionInOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseCubicActionInOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseCubicActionInOut):#EaseCubicActionInOut [EaseCubicActionInOut]", "contents": "reverse()" },{ "trigger": "s_create():ret (return value: cc.StopGrid):#StopGrid [StopGrid]", "contents": "create()" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [StopGrid]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.StopGrid):#StopGrid [StopGrid]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.StopGrid):#StopGrid [StopGrid]", "contents": "reverse()" },{ "trigger": "f_createTexture():ret (return value: int):#int [gl]", "contents": "createTexture()" },{ "trigger": "f_createBuffer():ret (return value: int):#int [gl]", "contents": "createBuffer()" },{ "trigger": "f_createRenderbuffer(int:#int):ret (return value: int):#int [gl]", "contents": "createRenderbuffer(${1:int:#int})" },{ "trigger": "f_createFramebuffer(int:#int):ret (return value: int):#int [gl]", "contents": "createFramebuffer(${1:int:#int})" },{ "trigger": "f_createProgram():ret (return value: int):#int [gl]", "contents": "createProgram()" },{ "trigger": "f_createShader(int:#int):void [gl]", "contents": "createShader(${1:int:#int})" },{ "trigger": "f_deleteTexture(int:#int):void [gl]", "contents": "deleteTexture(${1:int:#int})" },{ "trigger": "f_deleteBuffer(int:#int):void [gl]", "contents": "deleteBuffer(${1:int:#int})" },{ "trigger": "f_deleteRenderbuffer(int:#int):void [gl]", "contents": "deleteRenderbuffer(${1:int:#int})" },{ "trigger": "f_deleteFramebuffer(int:#int):void [gl]", "contents": "deleteFramebuffer(${1:int:#int})" },{ "trigger": "f_deleteProgram(int:#int):void [gl]", "contents": "deleteProgram(${1:int:#int})" },{ "trigger": "f_deleteShader(int:#int):void [gl]", "contents": "deleteShader(${1:int:#int})" },{ "trigger": "f_bindTexture(int:#int,int:#int):void [gl]", "contents": "bindTexture(${1:int:#int},${2:int:#int})" },{ "trigger": "f_bindBuffer(int:#int,int:#int):void [gl]", "contents": "bindBuffer(${1:int:#int},${2:int:#int})" },{ "trigger": "f_bindRenderBuffer(int:#int,int:#int):void [gl]", "contents": "bindRenderBuffer(${1:int:#int},${2:int:#int})" },{ "trigger": "f_bindFramebuffer(int:#int,int:#int):void [gl]", "contents": "bindFramebuffer(${1:int:#int},${2:int:#int})" },{ "trigger": "f_getUniform(int:#int,string:#string):ret (return value: int):#int [gl]", "contents": "getUniform(${1:int:#int},${2:string:#string})" },{ "trigger": "f_compileShader(int:#int):void [gl]", "contents": "compileShader(${1:int:#int})" },{ "trigger": "f_shaderSource(int:#int,string:#string):void [gl]", "contents": "shaderSource(${1:int:#int},${2:string:#string})" },{ "trigger": "f_getShaderParameter(int:#int,int:#int):ret (return value: int):#int [gl]", "contents": "getShaderParameter(${1:int:#int},${2:int:#int})" },{ "trigger": "f_getShaderInfoLog(int:#int):ret (return value: string):#string [gl]", "contents": "getShaderInfoLog(${1:int:#int})" },{ "trigger": "f_attachShader(int:#int,int:#int):void [gl]", "contents": "attachShader(${1:int:#int},${2:int:#int})" },{ "trigger": "f_linkProgram(int:#int):void [gl]", "contents": "linkProgram(${1:int:#int})" },{ "trigger": "f_getProgramParameter(int:#int,int:#int):ret (return value: int):#int [gl]", "contents": "getProgramParameter(${1:int:#int},${2:int:#int})" },{ "trigger": "f_useProgram(int:#int):ret (return value: int):#int [gl]", "contents": "useProgram(${1:int:#int})" },{ "trigger": "f_getAttribLocation(int:#int,string:#string):ret (return value: int):#int [gl]", "contents": "getAttribLocation(${1:int:#int},${2:string:#string})" },{ "trigger": "f_getUniformLocation(int:#int,string:#string):ret (return value: int):#int [gl]", "contents": "getUniformLocation(${1:int:#int},${2:string:#string})" },{ "trigger": "f_getActiveAttrib(int:#int,int:#int):ret (return value: string):#string [gl]", "contents": "getActiveAttrib(${1:int:#int},${2:int:#int})" },{ "trigger": "f_getActiveUniform(int:#int,int:#int):ret (return value: string):#string [gl]", "contents": "getActiveUniform(${1:int:#int},${2:int:#int})" },{ "trigger": "f_getAttachedShaders(int:#int):table (return value: table):#table [gl]", "contents": "getAttachedShaders(${1:int:#int})" },{ "trigger": "f_glNodeCreate():ret (return value: cc.GLNode):#GLNode [gl]", "contents": "glNodeCreate()" },{ "trigger": "glm_GCCSO_SHADER_BINARY_FJ [gl]", "contents": "gl.GCCSO_SHADER_BINARY_FJ" },{ "trigger": "glm__3DC_XY_AMD [gl]", "contents": "gl._3DC_XY_AMD" },{ "trigger": "glm__3DC_X_AMD [gl]", "contents": "gl._3DC_X_AMD" },{ "trigger": "glm_ACTIVE_ATTRIBUTES [gl]", "contents": "gl.ACTIVE_ATTRIBUTES" },{ "trigger": "glm_ACTIVE_ATTRIBUTE_MAX_LENGTH [gl]", "contents": "gl.ACTIVE_ATTRIBUTE_MAX_LENGTH" },{ "trigger": "glm_ACTIVE_PROGRAM_EXT [gl]", "contents": "gl.ACTIVE_PROGRAM_EXT" },{ "trigger": "glm_ACTIVE_TEXTURE [gl]", "contents": "gl.ACTIVE_TEXTURE" },{ "trigger": "glm_ACTIVE_UNIFORMS [gl]", "contents": "gl.ACTIVE_UNIFORMS" },{ "trigger": "glm_ACTIVE_UNIFORM_MAX_LENGTH [gl]", "contents": "gl.ACTIVE_UNIFORM_MAX_LENGTH" },{ "trigger": "glm_ALIASED_LINE_WIDTH_RANGE [gl]", "contents": "gl.ALIASED_LINE_WIDTH_RANGE" },{ "trigger": "glm_ALIASED_POINT_SIZE_RANGE [gl]", "contents": "gl.ALIASED_POINT_SIZE_RANGE" },{ "trigger": "glm_ALL_COMPLETED_NV [gl]", "contents": "gl.ALL_COMPLETED_NV" },{ "trigger": "glm_ALL_SHADER_BITS_EXT [gl]", "contents": "gl.ALL_SHADER_BITS_EXT" },{ "trigger": "glm_ALPHA [gl]", "contents": "gl.ALPHA" },{ "trigger": "glm_ALPHA16F_EXT [gl]", "contents": "gl.ALPHA16F_EXT" },{ "trigger": "glm_ALPHA32F_EXT [gl]", "contents": "gl.ALPHA32F_EXT" },{ "trigger": "glm_ALPHA8_EXT [gl]", "contents": "gl.ALPHA8_EXT" },{ "trigger": "glm_ALPHA8_OES [gl]", "contents": "gl.ALPHA8_OES" },{ "trigger": "glm_ALPHA_BITS [gl]", "contents": "gl.ALPHA_BITS" },{ "trigger": "glm_ALPHA_TEST_FUNC_QCOM [gl]", "contents": "gl.ALPHA_TEST_FUNC_QCOM" },{ "trigger": "glm_ALPHA_TEST_QCOM [gl]", "contents": "gl.ALPHA_TEST_QCOM" },{ "trigger": "glm_ALPHA_TEST_REF_QCOM [gl]", "contents": "gl.ALPHA_TEST_REF_QCOM" },{ "trigger": "glm_ALREADY_SIGNALED_APPLE [gl]", "contents": "gl.ALREADY_SIGNALED_APPLE" },{ "trigger": "glm_ALWAYS [gl]", "contents": "gl.ALWAYS" },{ "trigger": "glm_AMD_compressed_3DC_texture [gl]", "contents": "gl.AMD_compressed_3DC_texture" },{ "trigger": "glm_AMD_compressed_ATC_texture [gl]", "contents": "gl.AMD_compressed_ATC_texture" },{ "trigger": "glm_AMD_performance_monitor [gl]", "contents": "gl.AMD_performance_monitor" },{ "trigger": "glm_AMD_program_binary_Z400 [gl]", "contents": "gl.AMD_program_binary_Z400" },{ "trigger": "glm_ANGLE_depth_texture [gl]", "contents": "gl.ANGLE_depth_texture" },{ "trigger": "glm_ANGLE_framebuffer_blit [gl]", "contents": "gl.ANGLE_framebuffer_blit" },{ "trigger": "glm_ANGLE_framebuffer_multisample [gl]", "contents": "gl.ANGLE_framebuffer_multisample" },{ "trigger": "glm_ANGLE_instanced_arrays [gl]", "contents": "gl.ANGLE_instanced_arrays" },{ "trigger": "glm_ANGLE_pack_reverse_row_order [gl]", "contents": "gl.ANGLE_pack_reverse_row_order" },{ "trigger": "glm_ANGLE_program_binary [gl]", "contents": "gl.ANGLE_program_binary" },{ "trigger": "glm_ANGLE_texture_compression_dxt3 [gl]", "contents": "gl.ANGLE_texture_compression_dxt3" },{ "trigger": "glm_ANGLE_texture_compression_dxt5 [gl]", "contents": "gl.ANGLE_texture_compression_dxt5" },{ "trigger": "glm_ANGLE_texture_usage [gl]", "contents": "gl.ANGLE_texture_usage" },{ "trigger": "glm_ANGLE_translated_shader_source [gl]", "contents": "gl.ANGLE_translated_shader_source" },{ "trigger": "glm_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT [gl]", "contents": "gl.ANY_SAMPLES_PASSED_CONSERVATIVE_EXT" },{ "trigger": "glm_ANY_SAMPLES_PASSED_EXT [gl]", "contents": "gl.ANY_SAMPLES_PASSED_EXT" },{ "trigger": "glm_APPLE_copy_texture_levels [gl]", "contents": "gl.APPLE_copy_texture_levels" },{ "trigger": "glm_APPLE_framebuffer_multisample [gl]", "contents": "gl.APPLE_framebuffer_multisample" },{ "trigger": "glm_APPLE_rgb_422 [gl]", "contents": "gl.APPLE_rgb_422" },{ "trigger": "glm_APPLE_sync [gl]", "contents": "gl.APPLE_sync" },{ "trigger": "glm_APPLE_texture_format_BGRA8888 [gl]", "contents": "gl.APPLE_texture_format_BGRA8888" },{ "trigger": "glm_APPLE_texture_max_level [gl]", "contents": "gl.APPLE_texture_max_level" },{ "trigger": "glm_ARM_mali_program_binary [gl]", "contents": "gl.ARM_mali_program_binary" },{ "trigger": "glm_ARM_mali_shader_binary [gl]", "contents": "gl.ARM_mali_shader_binary" },{ "trigger": "glm_ARM_rgba8 [gl]", "contents": "gl.ARM_rgba8" },{ "trigger": "glm_ARRAY_BUFFER [gl]", "contents": "gl.ARRAY_BUFFER" },{ "trigger": "glm_ARRAY_BUFFER_BINDING [gl]", "contents": "gl.ARRAY_BUFFER_BINDING" },{ "trigger": "glm_ATC_RGBA_EXPLICIT_ALPHA_AMD [gl]", "contents": "gl.ATC_RGBA_EXPLICIT_ALPHA_AMD" },{ "trigger": "glm_ATC_RGBA_INTERPOLATED_ALPHA_AMD [gl]", "contents": "gl.ATC_RGBA_INTERPOLATED_ALPHA_AMD" },{ "trigger": "glm_ATC_RGB_AMD [gl]", "contents": "gl.ATC_RGB_AMD" },{ "trigger": "glm_ATTACHED_SHADERS [gl]", "contents": "gl.ATTACHED_SHADERS" },{ "trigger": "glm_BACK [gl]", "contents": "gl.BACK" },{ "trigger": "glm_BGRA8_EXT [gl]", "contents": "gl.BGRA8_EXT" },{ "trigger": "glm_BGRA_EXT [gl]", "contents": "gl.BGRA_EXT" },{ "trigger": "glm_BGRA_IMG [gl]", "contents": "gl.BGRA_IMG" },{ "trigger": "glm_BINNING_CONTROL_HINT_QCOM [gl]", "contents": "gl.BINNING_CONTROL_HINT_QCOM" },{ "trigger": "glm_BLEND [gl]", "contents": "gl.BLEND" },{ "trigger": "glm_BLEND_COLOR [gl]", "contents": "gl.BLEND_COLOR" },{ "trigger": "glm_BLEND_DST_ALPHA [gl]", "contents": "gl.BLEND_DST_ALPHA" },{ "trigger": "glm_BLEND_DST_RGB [gl]", "contents": "gl.BLEND_DST_RGB" },{ "trigger": "glm_BLEND_EQUATION [gl]", "contents": "gl.BLEND_EQUATION" },{ "trigger": "glm_BLEND_EQUATION_ALPHA [gl]", "contents": "gl.BLEND_EQUATION_ALPHA" },{ "trigger": "glm_BLEND_EQUATION_RGB [gl]", "contents": "gl.BLEND_EQUATION_RGB" },{ "trigger": "glm_BLEND_SRC_ALPHA [gl]", "contents": "gl.BLEND_SRC_ALPHA" },{ "trigger": "glm_BLEND_SRC_RGB [gl]", "contents": "gl.BLEND_SRC_RGB" },{ "trigger": "glm_BLUE_BITS [gl]", "contents": "gl.BLUE_BITS" },{ "trigger": "glm_BOOL [gl]", "contents": "gl.BOOL" },{ "trigger": "glm_BOOL_VEC2 [gl]", "contents": "gl.BOOL_VEC2" },{ "trigger": "glm_BOOL_VEC3 [gl]", "contents": "gl.BOOL_VEC3" },{ "trigger": "glm_BOOL_VEC4 [gl]", "contents": "gl.BOOL_VEC4" },{ "trigger": "glm_BUFFER [gl]", "contents": "gl.BUFFER" },{ "trigger": "glm_BUFFER_ACCESS_OES [gl]", "contents": "gl.BUFFER_ACCESS_OES" },{ "trigger": "glm_BUFFER_MAPPED_OES [gl]", "contents": "gl.BUFFER_MAPPED_OES" },{ "trigger": "glm_BUFFER_MAP_POINTER_OES [gl]", "contents": "gl.BUFFER_MAP_POINTER_OES" },{ "trigger": "glm_BUFFER_OBJECT_EXT [gl]", "contents": "gl.BUFFER_OBJECT_EXT" },{ "trigger": "glm_BUFFER_SIZE [gl]", "contents": "gl.BUFFER_SIZE" },{ "trigger": "glm_BUFFER_USAGE [gl]", "contents": "gl.BUFFER_USAGE" },{ "trigger": "glm_BYTE [gl]", "contents": "gl.BYTE" },{ "trigger": "glm_CCW [gl]", "contents": "gl.CCW" },{ "trigger": "glm_CLAMP_TO_BORDER_NV [gl]", "contents": "gl.CLAMP_TO_BORDER_NV" },{ "trigger": "glm_CLAMP_TO_EDGE [gl]", "contents": "gl.CLAMP_TO_EDGE" },{ "trigger": "glm_COLOR_ATTACHMENT0 [gl]", "contents": "gl.COLOR_ATTACHMENT0" },{ "trigger": "glm_COLOR_ATTACHMENT0_NV [gl]", "contents": "gl.COLOR_ATTACHMENT0_NV" },{ "trigger": "glm_COLOR_ATTACHMENT10_NV [gl]", "contents": "gl.COLOR_ATTACHMENT10_NV" },{ "trigger": "glm_COLOR_ATTACHMENT11_NV [gl]", "contents": "gl.COLOR_ATTACHMENT11_NV" },{ "trigger": "glm_COLOR_ATTACHMENT12_NV [gl]", "contents": "gl.COLOR_ATTACHMENT12_NV" },{ "trigger": "glm_COLOR_ATTACHMENT13_NV [gl]", "contents": "gl.COLOR_ATTACHMENT13_NV" },{ "trigger": "glm_COLOR_ATTACHMENT14_NV [gl]", "contents": "gl.COLOR_ATTACHMENT14_NV" },{ "trigger": "glm_COLOR_ATTACHMENT15_NV [gl]", "contents": "gl.COLOR_ATTACHMENT15_NV" },{ "trigger": "glm_COLOR_ATTACHMENT1_NV [gl]", "contents": "gl.COLOR_ATTACHMENT1_NV" },{ "trigger": "glm_COLOR_ATTACHMENT2_NV [gl]", "contents": "gl.COLOR_ATTACHMENT2_NV" },{ "trigger": "glm_COLOR_ATTACHMENT3_NV [gl]", "contents": "gl.COLOR_ATTACHMENT3_NV" },{ "trigger": "glm_COLOR_ATTACHMENT4_NV [gl]", "contents": "gl.COLOR_ATTACHMENT4_NV" },{ "trigger": "glm_COLOR_ATTACHMENT5_NV [gl]", "contents": "gl.COLOR_ATTACHMENT5_NV" },{ "trigger": "glm_COLOR_ATTACHMENT6_NV [gl]", "contents": "gl.COLOR_ATTACHMENT6_NV" },{ "trigger": "glm_COLOR_ATTACHMENT7_NV [gl]", "contents": "gl.COLOR_ATTACHMENT7_NV" },{ "trigger": "glm_BLEND [gl]", "contents": "gl.BLEND" },{ "trigger": "glm_COLOR_ATTACHMENT8_NV [gl]", "contents": "gl.COLOR_ATTACHMENT8_NV" },{ "trigger": "glm_COLOR_ATTACHMENT9_NV [gl]", "contents": "gl.COLOR_ATTACHMENT9_NV" },{ "trigger": "glm_COLOR_ATTACHMENT_EXT [gl]", "contents": "gl.COLOR_ATTACHMENT_EXT" },{ "trigger": "glm_COLOR_BUFFER_BIT [gl]", "contents": "gl.COLOR_BUFFER_BIT" },{ "trigger": "glm_BLEND [gl]", "contents": "gl.BLEND" },{ "trigger": "glm_COLOR_BUFFER_BIT1_QCOM [gl]", "contents": "gl.COLOR_BUFFER_BIT1_QCOM" },{ "trigger": "glm_COLOR_BUFFER_BIT2_QCOM [gl]", "contents": "gl.COLOR_BUFFER_BIT2_QCOM" },{ "trigger": "glm_COLOR_BUFFER_BIT3_QCOM [gl]", "contents": "gl.COLOR_BUFFER_BIT3_QCOM" },{ "trigger": "glm_COLOR_BUFFER_BIT4_QCOM [gl]", "contents": "gl.COLOR_BUFFER_BIT4_QCOM" },{ "trigger": "glm_COLOR_BUFFER_BIT5_QCOM [gl]", "contents": "gl.COLOR_BUFFER_BIT5_QCOM" },{ "trigger": "glm_COLOR_BUFFER_BIT6_QCOM [gl]", "contents": "gl.COLOR_BUFFER_BIT6_QCOM" },{ "trigger": "glm_COLOR_BUFFER_BIT7_QCOM [gl]", "contents": "gl.COLOR_BUFFER_BIT7_QCOM" },{ "trigger": "glm_COLOR_CLEAR_VALUE [gl]", "contents": "gl.COLOR_CLEAR_VALUE" },{ "trigger": "glm_COLOR_EXT [gl]", "contents": "gl.COLOR_EXT" },{ "trigger": "glm_COLOR_WRITEMASK [gl]", "contents": "gl.COLOR_WRITEMASK" },{ "trigger": "glm_COMPARE_REF_TO_TEXTURE_EXT [gl]", "contents": "gl.COMPARE_REF_TO_TEXTURE_EXT" },{ "trigger": "glm_COMPILE_STATUS [gl]", "contents": "gl.COMPILE_STATUS" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_10x10_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_10x10_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_10x5_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_10x5_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_10x6_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_10x6_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_10x8_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_10x8_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_12x10_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_12x10_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_12x12_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_12x12_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_4x4_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_4x4_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_5x4_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_5x4_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_5x5_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_5x5_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_6x5_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_6x5_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_6x6_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_6x6_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_8x5_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_8x5_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_8x6_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_8x6_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_ASTC_8x8_KHR [gl]", "contents": "gl.COMPRESSED_RGBA_ASTC_8x8_KHR" },{ "trigger": "glm_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG [gl]", "contents": "gl.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG" },{ "trigger": "glm_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG [gl]", "contents": "gl.COMPRESSED_RGBA_PVRTC_2BPPV2_IMG" },{ "trigger": "glm_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG [gl]", "contents": "gl.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG" },{ "trigger": "glm_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG [gl]", "contents": "gl.COMPRESSED_RGBA_PVRTC_4BPPV2_IMG" },{ "trigger": "glm_COMPRESSED_RGBA_S3TC_DXT1_EXT [gl]", "contents": "gl.COMPRESSED_RGBA_S3TC_DXT1_EXT" },{ "trigger": "glm_COMPRESSED_RGBA_S3TC_DXT3_ANGLE [gl]", "contents": "gl.COMPRESSED_RGBA_S3TC_DXT3_ANGLE" },{ "trigger": "glm_COMPRESSED_RGBA_S3TC_DXT5_ANGLE [gl]", "contents": "gl.COMPRESSED_RGBA_S3TC_DXT5_ANGLE" },{ "trigger": "glm_BLEND [gl]", "contents": "gl.BLEND" },{ "trigger": "glm_COMPRESSED_RGB_PVRTC_2BPPV1_IMG [gl]", "contents": "gl.COMPRESSED_RGB_PVRTC_2BPPV1_IMG" },{ "trigger": "glm_COMPRESSED_RGB_PVRTC_4BPPV1_IMG [gl]", "contents": "gl.COMPRESSED_RGB_PVRTC_4BPPV1_IMG" },{ "trigger": "glm_COMPRESSED_RGB_S3TC_DXT1_EXT [gl]", "contents": "gl.COMPRESSED_RGB_S3TC_DXT1_EXT" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR" },{ "trigger": "glm_BLEND [gl]", "contents": "gl.BLEND" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR" },{ "trigger": "glm_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR [gl]", "contents": "gl.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR" },{ "trigger": "glm_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV [gl]", "contents": "gl.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV" },{ "trigger": "glm_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV [gl]", "contents": "gl.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV" },{ "trigger": "glm_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV [gl]", "contents": "gl.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV" },{ "trigger": "glm_COMPRESSED_SRGB_S3TC_DXT1_NV [gl]", "contents": "gl.COMPRESSED_SRGB_S3TC_DXT1_NV" },{ "trigger": "glm_COMPRESSED_TEXTURE_FORMATS [gl]", "contents": "gl.COMPRESSED_TEXTURE_FORMATS" },{ "trigger": "glm_CONDITION_SATISFIED_APPLE [gl]", "contents": "gl.CONDITION_SATISFIED_APPLE" },{ "trigger": "glm_CONSTANT_ALPHA [gl]", "contents": "gl.CONSTANT_ALPHA" },{ "trigger": "glm_CONSTANT_COLOR [gl]", "contents": "gl.CONSTANT_COLOR" },{ "trigger": "glm_CONTEXT_FLAG_DEBUG_BIT [gl]", "contents": "gl.CONTEXT_FLAG_DEBUG_BIT" },{ "trigger": "glm_CONTEXT_ROBUST_ACCESS_EXT [gl]", "contents": "gl.CONTEXT_ROBUST_ACCESS_EXT" },{ "trigger": "glm_COUNTER_RANGE_AMD [gl]", "contents": "gl.COUNTER_RANGE_AMD" },{ "trigger": "glm_COUNTER_TYPE_AMD [gl]", "contents": "gl.COUNTER_TYPE_AMD" },{ "trigger": "glm_COVERAGE_ALL_FRAGMENTS_NV [gl]", "contents": "gl.COVERAGE_ALL_FRAGMENTS_NV" },{ "trigger": "glm_COVERAGE_ATTACHMENT_NV [gl]", "contents": "gl.COVERAGE_ATTACHMENT_NV" },{ "trigger": "glm_COVERAGE_AUTOMATIC_NV [gl]", "contents": "gl.COVERAGE_AUTOMATIC_NV" },{ "trigger": "glm_COVERAGE_BUFFERS_NV [gl]", "contents": "gl.COVERAGE_BUFFERS_NV" },{ "trigger": "glm_COVERAGE_BUFFER_BIT_NV [gl]", "contents": "gl.COVERAGE_BUFFER_BIT_NV" },{ "trigger": "glm_COVERAGE_COMPONENT4_NV [gl]", "contents": "gl.COVERAGE_COMPONENT4_NV" },{ "trigger": "glm_COVERAGE_COMPONENT_NV [gl]", "contents": "gl.COVERAGE_COMPONENT_NV" },{ "trigger": "glm_COVERAGE_EDGE_FRAGMENTS_NV [gl]", "contents": "gl.COVERAGE_EDGE_FRAGMENTS_NV" },{ "trigger": "glm_COVERAGE_SAMPLES_NV [gl]", "contents": "gl.COVERAGE_SAMPLES_NV" },{ "trigger": "glm_CPU_OPTIMIZED_QCOM [gl]", "contents": "gl.CPU_OPTIMIZED_QCOM" },{ "trigger": "glm_CULL_FACE [gl]", "contents": "gl.CULL_FACE" },{ "trigger": "glm_CULL_FACE_MODE [gl]", "contents": "gl.CULL_FACE_MODE" },{ "trigger": "glm_CURRENT_PROGRAM [gl]", "contents": "gl.CURRENT_PROGRAM" },{ "trigger": "glm_CURRENT_QUERY_EXT [gl]", "contents": "gl.CURRENT_QUERY_EXT" },{ "trigger": "glm_CURRENT_VERTEX_ATTRIB [gl]", "contents": "gl.CURRENT_VERTEX_ATTRIB" },{ "trigger": "glm_CW [gl]", "contents": "gl.CW" },{ "trigger": "glm_DEBUG_CALLBACK_FUNCTION [gl]", "contents": "gl.DEBUG_CALLBACK_FUNCTION" },{ "trigger": "glm_DEBUG_CALLBACK_USER_PARAM [gl]", "contents": "gl.DEBUG_CALLBACK_USER_PARAM" },{ "trigger": "glm_DEBUG_GROUP_STACK_DEPTH [gl]", "contents": "gl.DEBUG_GROUP_STACK_DEPTH" },{ "trigger": "glm_DEBUG_LOGGED_MESSAGES [gl]", "contents": "gl.DEBUG_LOGGED_MESSAGES" },{ "trigger": "glm_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH [gl]", "contents": "gl.DEBUG_NEXT_LOGGED_MESSAGE_LENGTH" },{ "trigger": "glm_DEBUG_OUTPUT [gl]", "contents": "gl.DEBUG_OUTPUT" },{ "trigger": "glm_DEBUG_OUTPUT_SYNCHRONOUS [gl]", "contents": "gl.DEBUG_OUTPUT_SYNCHRONOUS" },{ "trigger": "glm_DEBUG_SEVERITY_HIGH [gl]", "contents": "gl.DEBUG_SEVERITY_HIGH" },{ "trigger": "glm_DEBUG_SEVERITY_LOW [gl]", "contents": "gl.DEBUG_SEVERITY_LOW" },{ "trigger": "glm_DEBUG_SEVERITY_MEDIUM [gl]", "contents": "gl.DEBUG_SEVERITY_MEDIUM" },{ "trigger": "glm_DEBUG_SEVERITY_NOTIFICATION [gl]", "contents": "gl.DEBUG_SEVERITY_NOTIFICATION" },{ "trigger": "glm_DEBUG_SOURCE_API [gl]", "contents": "gl.DEBUG_SOURCE_API" },{ "trigger": "glm_DEBUG_SOURCE_APPLICATION [gl]", "contents": "gl.DEBUG_SOURCE_APPLICATION" },{ "trigger": "glm_DEBUG_SOURCE_OTHER [gl]", "contents": "gl.DEBUG_SOURCE_OTHER" },{ "trigger": "glm_DEBUG_SOURCE_SHADER_COMPILER [gl]", "contents": "gl.DEBUG_SOURCE_SHADER_COMPILER" },{ "trigger": "glm_DEBUG_SOURCE_THIRD_PARTY [gl]", "contents": "gl.DEBUG_SOURCE_THIRD_PARTY" },{ "trigger": "glm_DEBUG_SOURCE_WINDOW_SYSTEM [gl]", "contents": "gl.DEBUG_SOURCE_WINDOW_SYSTEM" },{ "trigger": "glm_DEBUG_TYPE_DEPRECATED_BEHAVIOR [gl]", "contents": "gl.DEBUG_TYPE_DEPRECATED_BEHAVIOR" },{ "trigger": "glm_DEBUG_TYPE_ERROR [gl]", "contents": "gl.DEBUG_TYPE_ERROR" },{ "trigger": "glm_DEBUG_TYPE_MARKER [gl]", "contents": "gl.DEBUG_TYPE_MARKER" },{ "trigger": "glm_DEBUG_TYPE_OTHER [gl]", "contents": "gl.DEBUG_TYPE_OTHER" },{ "trigger": "glm_DEBUG_TYPE_PERFORMANCE [gl]", "contents": "gl.DEBUG_TYPE_PERFORMANCE" },{ "trigger": "glm_DEBUG_TYPE_POP_GROUP [gl]", "contents": "gl.DEBUG_TYPE_POP_GROUP" },{ "trigger": "glm_DEBUG_TYPE_PORTABILITY [gl]", "contents": "gl.DEBUG_TYPE_PORTABILITY" },{ "trigger": "glm_DEBUG_TYPE_PUSH_GROUP [gl]", "contents": "gl.DEBUG_TYPE_PUSH_GROUP" },{ "trigger": "glm_DEBUG_TYPE_UNDEFINED_BEHAVIOR [gl]", "contents": "gl.DEBUG_TYPE_UNDEFINED_BEHAVIOR" },{ "trigger": "glm_DECR [gl]", "contents": "gl.DECR" },{ "trigger": "glm_DECR_WRAP [gl]", "contents": "gl.DECR_WRAP" },{ "trigger": "glm_DELETE_STATUS [gl]", "contents": "gl.DELETE_STATUS" },{ "trigger": "glm_DEPTH24_STENCIL8_OES [gl]", "contents": "gl.DEPTH24_STENCIL8_OES" },{ "trigger": "glm_DEPTH_ATTACHMENT [gl]", "contents": "gl.DEPTH_ATTACHMENT" },{ "trigger": "glm_DEPTH_BITS [gl]", "contents": "gl.DEPTH_BITS" },{ "trigger": "glm_DEPTH_BUFFER_BIT [gl]", "contents": "gl.DEPTH_BUFFER_BIT" },{ "trigger": "glm_DEPTH_BUFFER_BIT0_QCOM [gl]", "contents": "gl.DEPTH_BUFFER_BIT0_QCOM" },{ "trigger": "glm_DEPTH_BUFFER_BIT1_QCOM [gl]", "contents": "gl.DEPTH_BUFFER_BIT1_QCOM" },{ "trigger": "glm_DEPTH_BUFFER_BIT2_QCOM [gl]", "contents": "gl.DEPTH_BUFFER_BIT2_QCOM" },{ "trigger": "glm_DEPTH_BUFFER_BIT3_QCOM [gl]", "contents": "gl.DEPTH_BUFFER_BIT3_QCOM" },{ "trigger": "glm_DEPTH_BUFFER_BIT4_QCOM [gl]", "contents": "gl.DEPTH_BUFFER_BIT4_QCOM" },{ "trigger": "glm_DEPTH_BUFFER_BIT5_QCOM [gl]", "contents": "gl.DEPTH_BUFFER_BIT5_QCOM" },{ "trigger": "glm_DEPTH_BUFFER_BIT6_QCOM [gl]", "contents": "gl.DEPTH_BUFFER_BIT6_QCOM" },{ "trigger": "glm_DEPTH_BUFFER_BIT7_QCOM [gl]", "contents": "gl.DEPTH_BUFFER_BIT7_QCOM" },{ "trigger": "glm_DEPTH_CLEAR_VALUE [gl]", "contents": "gl.DEPTH_CLEAR_VALUE" },{ "trigger": "glm_DEPTH_COMPONENT [gl]", "contents": "gl.DEPTH_COMPONENT" },{ "trigger": "glm_DEPTH_COMPONENT16 [gl]", "contents": "gl.DEPTH_COMPONENT16" },{ "trigger": "glm_DEPTH_COMPONENT16_NONLINEAR_NV [gl]", "contents": "gl.DEPTH_COMPONENT16_NONLINEAR_NV" },{ "trigger": "glm_DEPTH_COMPONENT16_OES [gl]", "contents": "gl.DEPTH_COMPONENT16_OES" },{ "trigger": "glm_DEPTH_COMPONENT24_OES [gl]", "contents": "gl.DEPTH_COMPONENT24_OES" },{ "trigger": "glm_DEPTH_COMPONENT32_OES [gl]", "contents": "gl.DEPTH_COMPONENT32_OES" },{ "trigger": "glm_DEPTH_EXT [gl]", "contents": "gl.DEPTH_EXT" },{ "trigger": "glm_DEPTH_FUNC [gl]", "contents": "gl.DEPTH_FUNC" },{ "trigger": "glm_DEPTH_RANGE [gl]", "contents": "gl.DEPTH_RANGE" },{ "trigger": "glm_DEPTH_STENCIL_OES [gl]", "contents": "gl.DEPTH_STENCIL_OES" },{ "trigger": "glm_DEPTH_TEST [gl]", "contents": "gl.DEPTH_TEST" },{ "trigger": "glm_DEPTH_WRITEMASK [gl]", "contents": "gl.DEPTH_WRITEMASK" },{ "trigger": "glm_DMP_shader_binary [gl]", "contents": "gl.DMP_shader_binary" },{ "trigger": "glm_DONT_CARE [gl]", "contents": "gl.DONT_CARE" },{ "trigger": "glm_DRAW_BUFFER0_NV [gl]", "contents": "gl.DRAW_BUFFER0_NV" },{ "trigger": "glm_DRAW_BUFFER10_NV [gl]", "contents": "gl.DRAW_BUFFER10_NV" },{ "trigger": "glm_DRAW_BUFFER11_NV [gl]", "contents": "gl.DRAW_BUFFER11_NV" },{ "trigger": "glm_DRAW_BUFFER12_NV [gl]", "contents": "gl.DRAW_BUFFER12_NV" },{ "trigger": "glm_DRAW_BUFFER13_NV [gl]", "contents": "gl.DRAW_BUFFER13_NV" },{ "trigger": "glm_DRAW_BUFFER14_NV [gl]", "contents": "gl.DRAW_BUFFER14_NV" },{ "trigger": "glm_DRAW_BUFFER15_NV [gl]", "contents": "gl.DRAW_BUFFER15_NV" },{ "trigger": "glm_DRAW_BUFFER1_NV [gl]", "contents": "gl.DRAW_BUFFER1_NV" },{ "trigger": "glm_DRAW_BUFFER2_NV [gl]", "contents": "gl.DRAW_BUFFER2_NV" },{ "trigger": "glm_DRAW_BUFFER3_NV [gl]", "contents": "gl.DRAW_BUFFER3_NV" },{ "trigger": "glm_DRAW_BUFFER4_NV [gl]", "contents": "gl.DRAW_BUFFER4_NV" },{ "trigger": "glm_DRAW_BUFFER5_NV [gl]", "contents": "gl.DRAW_BUFFER5_NV" },{ "trigger": "glm_DRAW_BUFFER6_NV [gl]", "contents": "gl.DRAW_BUFFER6_NV" },{ "trigger": "glm_DRAW_BUFFER7_NV [gl]", "contents": "gl.DRAW_BUFFER7_NV" },{ "trigger": "glm_DRAW_BUFFER8_NV [gl]", "contents": "gl.DRAW_BUFFER8_NV" },{ "trigger": "glm_DRAW_BUFFER9_NV [gl]", "contents": "gl.DRAW_BUFFER9_NV" },{ "trigger": "glm_DRAW_BUFFER_EXT [gl]", "contents": "gl.DRAW_BUFFER_EXT" },{ "trigger": "glm_DRAW_FRAMEBUFFER_ANGLE [gl]", "contents": "gl.DRAW_FRAMEBUFFER_ANGLE" },{ "trigger": "glm_DRAW_FRAMEBUFFER_APPLE [gl]", "contents": "gl.DRAW_FRAMEBUFFER_APPLE" },{ "trigger": "glm_DRAW_FRAMEBUFFER_BINDING_ANGLE [gl]", "contents": "gl.DRAW_FRAMEBUFFER_BINDING_ANGLE" },{ "trigger": "glm_DRAW_FRAMEBUFFER_BINDING_APPLE [gl]", "contents": "gl.DRAW_FRAMEBUFFER_BINDING_APPLE" },{ "trigger": "glm_DRAW_FRAMEBUFFER_BINDING_NV [gl]", "contents": "gl.DRAW_FRAMEBUFFER_BINDING_NV" },{ "trigger": "glm_DRAW_FRAMEBUFFER_NV [gl]", "contents": "gl.DRAW_FRAMEBUFFER_NV" },{ "trigger": "glm_DST_ALPHA [gl]", "contents": "gl.DST_ALPHA" },{ "trigger": "glm_DST_COLOR [gl]", "contents": "gl.DST_COLOR" },{ "trigger": "glm_DYNAMIC_DRAW [gl]", "contents": "gl.DYNAMIC_DRAW" },{ "trigger": "glm_ELEMENT_ARRAY_BUFFER [gl]", "contents": "gl.ELEMENT_ARRAY_BUFFER" },{ "trigger": "glm_ELEMENT_ARRAY_BUFFER_BINDING [gl]", "contents": "gl.ELEMENT_ARRAY_BUFFER_BINDING" },{ "trigger": "glm_EQUAL [gl]", "contents": "gl.EQUAL" },{ "trigger": "glm_ES_VERSION_2_0 [gl]", "contents": "gl.ES_VERSION_2_0" },{ "trigger": "glm_ETC1_RGB8_OES [gl]", "contents": "gl.ETC1_RGB8_OES" },{ "trigger": "glm_ETC1_SRGB8_NV [gl]", "contents": "gl.ETC1_SRGB8_NV" },{ "trigger": "glm_EXTENSIONS [gl]", "contents": "gl.EXTENSIONS" },{ "trigger": "glm_EXT_blend_minmax [gl]", "contents": "gl.EXT_blend_minmax" },{ "trigger": "glm_EXT_color_buffer_half_float [gl]", "contents": "gl.EXT_color_buffer_half_float" },{ "trigger": "glm_EXT_debug_label [gl]", "contents": "gl.EXT_debug_label" },{ "trigger": "glm_EXT_debug_marker [gl]", "contents": "gl.EXT_debug_marker" },{ "trigger": "glm_EXT_discard_framebuffer [gl]", "contents": "gl.EXT_discard_framebuffer" },{ "trigger": "glm_EXT_map_buffer_range [gl]", "contents": "gl.EXT_map_buffer_range" },{ "trigger": "glm_EXT_multi_draw_arrays [gl]", "contents": "gl.EXT_multi_draw_arrays" },{ "trigger": "glm_EXT_multisampled_render_to_texture [gl]", "contents": "gl.EXT_multisampled_render_to_texture" },{ "trigger": "glm_EXT_multiview_draw_buffers [gl]", "contents": "gl.EXT_multiview_draw_buffers" },{ "trigger": "glm_EXT_occlusion_query_boolean [gl]", "contents": "gl.EXT_occlusion_query_boolean" },{ "trigger": "glm_EXT_read_format_bgra [gl]", "contents": "gl.EXT_read_format_bgra" },{ "trigger": "glm_EXT_robustness [gl]", "contents": "gl.EXT_robustness" },{ "trigger": "glm_EXT_sRGB [gl]", "contents": "gl.EXT_sRGB" },{ "trigger": "glm_EXT_separate_shader_objects [gl]", "contents": "gl.EXT_separate_shader_objects" },{ "trigger": "glm_EXT_shader_framebuffer_fetch [gl]", "contents": "gl.EXT_shader_framebuffer_fetch" },{ "trigger": "glm_EXT_shader_texture_lod [gl]", "contents": "gl.EXT_shader_texture_lod" },{ "trigger": "glm_EXT_shadow_samplers [gl]", "contents": "gl.EXT_shadow_samplers" },{ "trigger": "glm_EXT_texture_compression_dxt1 [gl]", "contents": "gl.EXT_texture_compression_dxt1" },{ "trigger": "glm_EXT_texture_filter_anisotropic [gl]", "contents": "gl.EXT_texture_filter_anisotropic" },{ "trigger": "glm_EXT_texture_format_BGRA8888 [gl]", "contents": "gl.EXT_texture_format_BGRA8888" },{ "trigger": "glm_EXT_texture_rg [gl]", "contents": "gl.EXT_texture_rg" },{ "trigger": "glm_EXT_texture_storage [gl]", "contents": "gl.EXT_texture_storage" },{ "trigger": "glm_EXT_texture_type_2_10_10_10_REV [gl]", "contents": "gl.EXT_texture_type_2_10_10_10_REV" },{ "trigger": "glm_EXT_unpack_subimage [gl]", "contents": "gl.EXT_unpack_subimage" },{ "trigger": "glm_FALSE [gl]", "contents": "gl.FALSE" },{ "trigger": "glm_FASTEST [gl]", "contents": "gl.FASTEST" },{ "trigger": "glm_FENCE_CONDITION_NV [gl]", "contents": "gl.FENCE_CONDITION_NV" },{ "trigger": "glm_FENCE_STATUS_NV [gl]", "contents": "gl.FENCE_STATUS_NV" },{ "trigger": "glm_FIXED [gl]", "contents": "gl.FIXED" },{ "trigger": "glm_FJ_shader_binary_GCCSO [gl]", "contents": "gl.FJ_shader_binary_GCCSO" },{ "trigger": "glm_FLOAT [gl]", "contents": "gl.FLOAT" },{ "trigger": "glm_FLOAT_MAT2 [gl]", "contents": "gl.FLOAT_MAT2" },{ "trigger": "glm_FLOAT_MAT3 [gl]", "contents": "gl.FLOAT_MAT3" },{ "trigger": "glm_FLOAT_MAT4 [gl]", "contents": "gl.FLOAT_MAT4" },{ "trigger": "glm_FLOAT_VEC2 [gl]", "contents": "gl.FLOAT_VEC2" },{ "trigger": "glm_FLOAT_VEC3 [gl]", "contents": "gl.FLOAT_VEC3" },{ "trigger": "glm_FLOAT_VEC4 [gl]", "contents": "gl.FLOAT_VEC4" },{ "trigger": "glm_FRAGMENT_SHADER [gl]", "contents": "gl.FRAGMENT_SHADER" },{ "trigger": "glm_FRAGMENT_SHADER_BIT_EXT [gl]", "contents": "gl.FRAGMENT_SHADER_BIT_EXT" },{ "trigger": "glm_FRAGMENT_SHADER_DERIVATIVE_HINT_OES [gl]", "contents": "gl.FRAGMENT_SHADER_DERIVATIVE_HINT_OES" },{ "trigger": "glm_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT [gl]", "contents": "gl.FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT" },{ "trigger": "glm_FRAMEBUFFER [gl]", "contents": "gl.FRAMEBUFFER" },{ "trigger": "glm_FRAMEBUFFER_ATTACHMENT_ANGLE [gl]", "contents": "gl.FRAMEBUFFER_ATTACHMENT_ANGLE" },{ "trigger": "glm_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT [gl]", "contents": "gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT" },{ "trigger": "glm_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT [gl]", "contents": "gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT" },{ "trigger": "glm_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME [gl]", "contents": "gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME" },{ "trigger": "glm_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE [gl]", "contents": "gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE" },{ "trigger": "glm_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES [gl]", "contents": "gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES" },{ "trigger": "glm_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE [gl]", "contents": "gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE" },{ "trigger": "glm_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL [gl]", "contents": "gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL" },{ "trigger": "glm_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT [gl]", "contents": "gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT" },{ "trigger": "glm_FRAMEBUFFER_BINDING [gl]", "contents": "gl.FRAMEBUFFER_BINDING" },{ "trigger": "glm_FRAMEBUFFER_COMPLETE [gl]", "contents": "gl.FRAMEBUFFER_COMPLETE" },{ "trigger": "glm_FRAMEBUFFER_INCOMPLETE_ATTACHMENT [gl]", "contents": "gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT" },{ "trigger": "glm_FRAMEBUFFER_INCOMPLETE_DIMENSIONS [gl]", "contents": "gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS" },{ "trigger": "glm_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT [gl]", "contents": "gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT" },{ "trigger": "glm_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE [gl]", "contents": "gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE" },{ "trigger": "glm_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE [gl]", "contents": "gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE" },{ "trigger": "glm_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT [gl]", "contents": "gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT" },{ "trigger": "glm_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG [gl]", "contents": "gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG" },{ "trigger": "glm_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV [gl]", "contents": "gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV" },{ "trigger": "glm_FRAMEBUFFER_UNDEFINED_OES [gl]", "contents": "gl.FRAMEBUFFER_UNDEFINED_OES" },{ "trigger": "glm_FRAMEBUFFER_UNSUPPORTED [gl]", "contents": "gl.FRAMEBUFFER_UNSUPPORTED" },{ "trigger": "glm_FRONT [gl]", "contents": "gl.FRONT" },{ "trigger": "glm_FRONT_AND_BACK [gl]", "contents": "gl.FRONT_AND_BACK" },{ "trigger": "glm_FRONT_FACE [gl]", "contents": "gl.FRONT_FACE" },{ "trigger": "glm_FUNC_ADD [gl]", "contents": "gl.FUNC_ADD" },{ "trigger": "glm_FUNC_REVERSE_SUBTRACT [gl]", "contents": "gl.FUNC_REVERSE_SUBTRACT" },{ "trigger": "glm_FUNC_SUBTRACT [gl]", "contents": "gl.FUNC_SUBTRACT" },{ "trigger": "glm_GENERATE_MIPMAP_HINT [gl]", "contents": "gl.GENERATE_MIPMAP_HINT" },{ "trigger": "glm_GEQUAL [gl]", "contents": "gl.GEQUAL" },{ "trigger": "glm_GPU_OPTIMIZED_QCOM [gl]", "contents": "gl.GPU_OPTIMIZED_QCOM" },{ "trigger": "glm_GREATER [gl]", "contents": "gl.GREATER" },{ "trigger": "glm_GREEN_BITS [gl]", "contents": "gl.GREEN_BITS" },{ "trigger": "glm_GUILTY_CONTEXT_RESET_EXT [gl]", "contents": "gl.GUILTY_CONTEXT_RESET_EXT" },{ "trigger": "glm_HALF_FLOAT_OES [gl]", "contents": "gl.HALF_FLOAT_OES" },{ "trigger": "glm_HIGH_FLOAT [gl]", "contents": "gl.HIGH_FLOAT" },{ "trigger": "glm_HIGH_INT [gl]", "contents": "gl.HIGH_INT" },{ "trigger": "glm_IMG_multisampled_render_to_texture [gl]", "contents": "gl.IMG_multisampled_render_to_texture" },{ "trigger": "glm_IMG_program_binary [gl]", "contents": "gl.IMG_program_binary" },{ "trigger": "glm_IMG_read_format [gl]", "contents": "gl.IMG_read_format" },{ "trigger": "glm_IMG_shader_binary [gl]", "contents": "gl.IMG_shader_binary" },{ "trigger": "glm_IMG_texture_compression_pvrtc [gl]", "contents": "gl.IMG_texture_compression_pvrtc" },{ "trigger": "glm_IMG_texture_compression_pvrtc2 [gl]", "contents": "gl.IMG_texture_compression_pvrtc2" },{ "trigger": "glm_IMPLEMENTATION_COLOR_READ_FORMAT [gl]", "contents": "gl.IMPLEMENTATION_COLOR_READ_FORMAT" },{ "trigger": "glm_IMPLEMENTATION_COLOR_READ_TYPE [gl]", "contents": "gl.IMPLEMENTATION_COLOR_READ_TYPE" },{ "trigger": "glm_INCR [gl]", "contents": "gl.INCR" },{ "trigger": "glm_INCR_WRAP [gl]", "contents": "gl.INCR_WRAP" },{ "trigger": "glm_INFO_LOG_LENGTH [gl]", "contents": "gl.INFO_LOG_LENGTH" },{ "trigger": "glm_INNOCENT_CONTEXT_RESET_EXT [gl]", "contents": "gl.INNOCENT_CONTEXT_RESET_EXT" },{ "trigger": "glm_INT [gl]", "contents": "gl.INT" },{ "trigger": "glm_INT_10_10_10_2_OES [gl]", "contents": "gl.INT_10_10_10_2_OES" },{ "trigger": "glm_INT_VEC2 [gl]", "contents": "gl.INT_VEC2" },{ "trigger": "glm_INT_VEC3 [gl]", "contents": "gl.INT_VEC3" },{ "trigger": "glm_INT_VEC4 [gl]", "contents": "gl.INT_VEC4" },{ "trigger": "glm_INVALID_ENUM [gl]", "contents": "gl.INVALID_ENUM" },{ "trigger": "glm_INVALID_FRAMEBUFFER_OPERATION [gl]", "contents": "gl.INVALID_FRAMEBUFFER_OPERATION" },{ "trigger": "glm_INVALID_OPERATION [gl]", "contents": "gl.INVALID_OPERATION" },{ "trigger": "glm_INVALID_VALUE [gl]", "contents": "gl.INVALID_VALUE" },{ "trigger": "glm_INVERT [gl]", "contents": "gl.INVERT" },{ "trigger": "glm_KEEP [gl]", "contents": "gl.KEEP" },{ "trigger": "glm_KHR_debug [gl]", "contents": "gl.KHR_debug" },{ "trigger": "glm_KHR_texture_compression_astc_ldr [gl]", "contents": "gl.KHR_texture_compression_astc_ldr" },{ "trigger": "glm_LEQUAL [gl]", "contents": "gl.LEQUAL" },{ "trigger": "glm_LESS [gl]", "contents": "gl.LESS" },{ "trigger": "glm_LINEAR [gl]", "contents": "gl.LINEAR" },{ "trigger": "glm_LINEAR_MIPMAP_LINEAR [gl]", "contents": "gl.LINEAR_MIPMAP_LINEAR" },{ "trigger": "glm_LINEAR_MIPMAP_NEAREST [gl]", "contents": "gl.LINEAR_MIPMAP_NEAREST" },{ "trigger": "glm_LINES [gl]", "contents": "gl.LINES" },{ "trigger": "glm_LINE_LOOP [gl]", "contents": "gl.LINE_LOOP" },{ "trigger": "glm_LINE_STRIP [gl]", "contents": "gl.LINE_STRIP" },{ "trigger": "glm_LINE_WIDTH [gl]", "contents": "gl.LINE_WIDTH" },{ "trigger": "glm_LINK_STATUS [gl]", "contents": "gl.LINK_STATUS" },{ "trigger": "glm_LOSE_CONTEXT_ON_RESET_EXT [gl]", "contents": "gl.LOSE_CONTEXT_ON_RESET_EXT" },{ "trigger": "glm_LOW_FLOAT [gl]", "contents": "gl.LOW_FLOAT" },{ "trigger": "glm_LOW_INT [gl]", "contents": "gl.LOW_INT" },{ "trigger": "glm_LUMINANCE [gl]", "contents": "gl.LUMINANCE" },{ "trigger": "glm_LUMINANCE16F_EXT [gl]", "contents": "gl.LUMINANCE16F_EXT" },{ "trigger": "glm_LUMINANCE32F_EXT [gl]", "contents": "gl.LUMINANCE32F_EXT" },{ "trigger": "glm_LUMINANCE4_ALPHA4_OES [gl]", "contents": "gl.LUMINANCE4_ALPHA4_OES" },{ "trigger": "glm_LUMINANCE8_ALPHA8_EXT [gl]", "contents": "gl.LUMINANCE8_ALPHA8_EXT" },{ "trigger": "glm_LUMINANCE8_ALPHA8_OES [gl]", "contents": "gl.LUMINANCE8_ALPHA8_OES" },{ "trigger": "glm_LUMINANCE8_EXT [gl]", "contents": "gl.LUMINANCE8_EXT" },{ "trigger": "glm_LUMINANCE8_OES [gl]", "contents": "gl.LUMINANCE8_OES" },{ "trigger": "glm_LUMINANCE_ALPHA [gl]", "contents": "gl.LUMINANCE_ALPHA" },{ "trigger": "glm_LUMINANCE_ALPHA16F_EXT [gl]", "contents": "gl.LUMINANCE_ALPHA16F_EXT" },{ "trigger": "glm_LUMINANCE_ALPHA32F_EXT [gl]", "contents": "gl.LUMINANCE_ALPHA32F_EXT" },{ "trigger": "glm_MALI_PROGRAM_BINARY_ARM [gl]", "contents": "gl.MALI_PROGRAM_BINARY_ARM" },{ "trigger": "glm_MALI_SHADER_BINARY_ARM [gl]", "contents": "gl.MALI_SHADER_BINARY_ARM" },{ "trigger": "glm_MAP_FLUSH_EXPLICIT_BIT_EXT [gl]", "contents": "gl.MAP_FLUSH_EXPLICIT_BIT_EXT" },{ "trigger": "glm_MAP_INVALIDATE_BUFFER_BIT_EXT [gl]", "contents": "gl.MAP_INVALIDATE_BUFFER_BIT_EXT" },{ "trigger": "glm_MAP_INVALIDATE_RANGE_BIT_EXT [gl]", "contents": "gl.MAP_INVALIDATE_RANGE_BIT_EXT" },{ "trigger": "glm_MAP_READ_BIT_EXTs [gl]", "contents": "gl.MAP_READ_BIT_EXTs" },{ "trigger": "glm_MAP_UNSYNCHRONIZED_BIT_EXT [gl]", "contents": "gl.MAP_UNSYNCHRONIZED_BIT_EXT" },{ "trigger": "glm_MAP_WRITE_BIT_EXT [gl]", "contents": "gl.MAP_WRITE_BIT_EXT" },{ "trigger": "glm_MAX_3D_TEXTURE_SIZE_OES [gl]", "contents": "gl.MAX_3D_TEXTURE_SIZE_OES" },{ "trigger": "glm_MAX_COLOR_ATTACHMENTS_NV [gl]", "contents": "gl.MAX_COLOR_ATTACHMENTS_NV" },{ "trigger": "glm_MAX_COMBINED_TEXTURE_IMAGE_UNITS [gl]", "contents": "gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS" },{ "trigger": "glm_MAX_CUBE_MAP_TEXTURE_SIZE [gl]", "contents": "gl.MAX_CUBE_MAP_TEXTURE_SIZE" },{ "trigger": "glm_MAX_DEBUG_GROUP_STACK_DEPTH [gl]", "contents": "gl.MAX_DEBUG_GROUP_STACK_DEPTH" },{ "trigger": "glm_MAX_DEBUG_LOGGED_MESSAGES [gl]", "contents": "gl.MAX_DEBUG_LOGGED_MESSAGES" },{ "trigger": "glm_MAX_DEBUG_MESSAGE_LENGTH [gl]", "contents": "gl.MAX_DEBUG_MESSAGE_LENGTH" },{ "trigger": "glm_MAX_DRAW_BUFFERS_NV [gl]", "contents": "gl.MAX_DRAW_BUFFERS_NV" },{ "trigger": "glm_MAX_EXT [gl]", "contents": "gl.MAX_EXT" },{ "trigger": "glm_MAX_FRAGMENT_UNIFORM_VECTORS [gl]", "contents": "gl.MAX_FRAGMENT_UNIFORM_VECTORS" },{ "trigger": "glm_MAX_LABEL_LENGTH [gl]", "contents": "gl.MAX_LABEL_LENGTH" },{ "trigger": "glm_MAX_MULTIVIEW_BUFFERS_EXT [gl]", "contents": "gl.MAX_MULTIVIEW_BUFFERS_EXT" },{ "trigger": "glm_MAX_RENDERBUFFER_SIZE [gl]", "contents": "gl.MAX_RENDERBUFFER_SIZE" },{ "trigger": "glm_MAX_SAMPLES_ANGLE [gl]", "contents": "gl.MAX_SAMPLES_ANGLE" },{ "trigger": "glm_MAX_SAMPLES_APPLE [gl]", "contents": "gl.MAX_SAMPLES_APPLE" },{ "trigger": "glm_MAX_SAMPLES_EXT [gl]", "contents": "gl.MAX_SAMPLES_EXT" },{ "trigger": "glm_MAX_SAMPLES_IMG [gl]", "contents": "gl.MAX_SAMPLES_IMG" },{ "trigger": "glm_MAX_SAMPLES_NV [gl]", "contents": "gl.MAX_SAMPLES_NV" },{ "trigger": "glm_MAX_SERVER_WAIT_TIMEOUT_APPLE [gl]", "contents": "gl.MAX_SERVER_WAIT_TIMEOUT_APPLE" },{ "trigger": "glm_MAX_TEXTURE_IMAGE_UNITS [gl]", "contents": "gl.MAX_TEXTURE_IMAGE_UNITS" },{ "trigger": "glm_MAX_TEXTURE_MAX_ANISOTROPY_EXT [gl]", "contents": "gl.MAX_TEXTURE_MAX_ANISOTROPY_EXT" },{ "trigger": "glm_MAX_TEXTURE_SIZE [gl]", "contents": "gl.MAX_TEXTURE_SIZE" },{ "trigger": "glm_MAX_VARYING_VECTORS [gl]", "contents": "gl.MAX_VARYING_VECTORS" },{ "trigger": "glm_MAX_VERTEX_ATTRIBS [gl]", "contents": "gl.MAX_VERTEX_ATTRIBS" },{ "trigger": "glm_MAX_VERTEX_TEXTURE_IMAGE_UNITS [gl]", "contents": "gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS" },{ "trigger": "glm_MAX_VERTEX_UNIFORM_VECTORS [gl]", "contents": "gl.MAX_VERTEX_UNIFORM_VECTORS" },{ "trigger": "glm_MAX_VIEWPORT_DIMS [gl]", "contents": "gl.MAX_VIEWPORT_DIMS" },{ "trigger": "glm_MEDIUM_FLOAT [gl]", "contents": "gl.MEDIUM_FLOAT" },{ "trigger": "glm_MEDIUM_INT [gl]", "contents": "gl.MEDIUM_INT" },{ "trigger": "glm_MIN_EXT [gl]", "contents": "gl.MIN_EXT" },{ "trigger": "glm_MIRRORED_REPEAT [gl]", "contents": "gl.MIRRORED_REPEAT" },{ "trigger": "glm_MULTISAMPLE_BUFFER_BIT0_QCOM [gl]", "contents": "gl.MULTISAMPLE_BUFFER_BIT0_QCOM" },{ "trigger": "glm_MULTISAMPLE_BUFFER_BIT1_QCOM [gl]", "contents": "gl.MULTISAMPLE_BUFFER_BIT1_QCOM" },{ "trigger": "glm_MULTISAMPLE_BUFFER_BIT2_QCOM [gl]", "contents": "gl.MULTISAMPLE_BUFFER_BIT2_QCOM" },{ "trigger": "glm_MULTISAMPLE_BUFFER_BIT3_QCOM [gl]", "contents": "gl.MULTISAMPLE_BUFFER_BIT3_QCOM" },{ "trigger": "glm_MULTISAMPLE_BUFFER_BIT4_QCOM [gl]", "contents": "gl.MULTISAMPLE_BUFFER_BIT4_QCOM" },{ "trigger": "glm_MULTISAMPLE_BUFFER_BIT5_QCOM [gl]", "contents": "gl.MULTISAMPLE_BUFFER_BIT5_QCOM" },{ "trigger": "glm_MULTISAMPLE_BUFFER_BIT6_QCOM [gl]", "contents": "gl.MULTISAMPLE_BUFFER_BIT6_QCOM" },{ "trigger": "glm_MULTISAMPLE_BUFFER_BIT7_QCOM [gl]", "contents": "gl.MULTISAMPLE_BUFFER_BIT7_QCOM" },{ "trigger": "glm_MULTIVIEW_EXT [gl]", "contents": "gl.MULTIVIEW_EXT" },{ "trigger": "glm_NEAREST [gl]", "contents": "gl.NEAREST" },{ "trigger": "glm_NEAREST_MIPMAP_LINEAR [gl]", "contents": "gl.NEAREST_MIPMAP_LINEAR" },{ "trigger": "glm_NEAREST_MIPMAP_NEAREST [gl]", "contents": "gl.NEAREST_MIPMAP_NEAREST" },{ "trigger": "glm_NEVER [gl]", "contents": "gl.NEVER" },{ "trigger": "glm_NICEST [gl]", "contents": "gl.NICEST" },{ "trigger": "glm_NONE [gl]", "contents": "gl.NONE" },{ "trigger": "glm_NOTEQUAL [gl]", "contents": "gl.NOTEQUAL" },{ "trigger": "glm_NO_ERROR [gl]", "contents": "gl.NO_ERROR" },{ "trigger": "glm_NO_RESET_NOTIFICATION_EXT [gl]", "contents": "gl.NO_RESET_NOTIFICATION_EXT" },{ "trigger": "glm_NUM_COMPRESSED_TEXTURE_FORMATS [gl]", "contents": "gl.NUM_COMPRESSED_TEXTURE_FORMATS" },{ "trigger": "glm_NUM_PROGRAM_BINARY_FORMATS_OES [gl]", "contents": "gl.NUM_PROGRAM_BINARY_FORMATS_OES" },{ "trigger": "glm_NUM_SHADER_BINARY_FORMATS [gl]", "contents": "gl.NUM_SHADER_BINARY_FORMATS" },{ "trigger": "glm_NV_coverage_sample [gl]", "contents": "gl.NV_coverage_sample" },{ "trigger": "glm_NV_depth_nonlinear [gl]", "contents": "gl.NV_depth_nonlinear" },{ "trigger": "glm_NV_draw_buffers [gl]", "contents": "gl.NV_draw_buffers" },{ "trigger": "glm_NV_draw_instanced [gl]", "contents": "gl.NV_draw_instanced" },{ "trigger": "glm_NV_fbo_color_attachments [gl]", "contents": "gl.NV_fbo_color_attachments" },{ "trigger": "glm_NV_fence [gl]", "contents": "gl.NV_fence" },{ "trigger": "glm_NV_framebuffer_blit [gl]", "contents": "gl.NV_framebuffer_blit" },{ "trigger": "glm_NV_framebuffer_multisample [gl]", "contents": "gl.NV_framebuffer_multisample" },{ "trigger": "glm_NV_generate_mipmap_sRGB [gl]", "contents": "gl.NV_generate_mipmap_sRGB" },{ "trigger": "glm_NV_instanced_arrays [gl]", "contents": "gl.NV_instanced_arrays" },{ "trigger": "glm_NV_read_buffer [gl]", "contents": "gl.NV_read_buffer" },{ "trigger": "glm_NV_read_buffer_front [gl]", "contents": "gl.NV_read_buffer_front" },{ "trigger": "glm_NV_read_depth [gl]", "contents": "gl.NV_read_depth" },{ "trigger": "glm_NV_read_depth_stencil [gl]", "contents": "gl.NV_read_depth_stencil" },{ "trigger": "glm_NV_read_stencil [gl]", "contents": "gl.NV_read_stencil" },{ "trigger": "glm_NV_sRGB_formats [gl]", "contents": "gl.NV_sRGB_formats" },{ "trigger": "glm_NV_shadow_samplers_array [gl]", "contents": "gl.NV_shadow_samplers_array" },{ "trigger": "glm_NV_shadow_samplers_cube [gl]", "contents": "gl.NV_shadow_samplers_cube" },{ "trigger": "glm_NV_texture_border_clamp [gl]", "contents": "gl.NV_texture_border_clamp" },{ "trigger": "glm_NV_texture_compression_s3tc_update [gl]", "contents": "gl.NV_texture_compression_s3tc_update" },{ "trigger": "glm_NV_texture_npot_2D_mipmaps [gl]", "contents": "gl.NV_texture_npot_2D_mipmaps" },{ "trigger": "glm_OBJECT_TYPE_APPLE [gl]", "contents": "gl.OBJECT_TYPE_APPLE" },{ "trigger": "glm_OES_EGL_image [gl]", "contents": "gl.OES_EGL_image" },{ "trigger": "glm_OES_EGL_image_externals [gl]", "contents": "gl.OES_EGL_image_externals" },{ "trigger": "glm_OES_compressed_ETC1_RGB8_texture [gl]", "contents": "gl.OES_compressed_ETC1_RGB8_texture" },{ "trigger": "glm_OES_compressed_paletted_texture [gl]", "contents": "gl.OES_compressed_paletted_texture" },{ "trigger": "glm_OES_depth24 [gl]", "contents": "gl.OES_depth24" },{ "trigger": "glm_OES_depth32 [gl]", "contents": "gl.OES_depth32" },{ "trigger": "glm_OES_depth_texture [gl]", "contents": "gl.OES_depth_texture" },{ "trigger": "glm_OES_element_index_uint [gl]", "contents": "gl.OES_element_index_uint" },{ "trigger": "glm_OES_fbo_render_mipmap [gl]", "contents": "gl.OES_fbo_render_mipmap" },{ "trigger": "glm_OES_fragment_precision_high [gl]", "contents": "gl.OES_fragment_precision_high" },{ "trigger": "glm_OES_get_program_binary [gl]", "contents": "gl.OES_get_program_binary" },{ "trigger": "glm_OES_mapbuffer [gl]", "contents": "gl.OES_mapbuffer" },{ "trigger": "glm_OES_packed_depth_stencil [gl]", "contents": "gl.OES_packed_depth_stencil" },{ "trigger": "glm_OES_required_internalformat [gl]", "contents": "gl.OES_required_internalformat" },{ "trigger": "glm_OES_rgb8_rgba8 [gl]", "contents": "gl.OES_rgb8_rgba8" },{ "trigger": "glm_OES_standard_derivatives [gl]", "contents": "gl.OES_standard_derivatives" },{ "trigger": "glm_OES_stencil1 [gl]", "contents": "gl.OES_stencil1" },{ "trigger": "glm_OES_stencil4 [gl]", "contents": "gl.OES_stencil4" },{ "trigger": "glm_OES_surfaceless_context [gl]", "contents": "gl.OES_surfaceless_context" },{ "trigger": "glm_OES_texture_3D [gl]", "contents": "gl.OES_texture_3D" },{ "trigger": "glm_OES_texture_float [gl]", "contents": "gl.OES_texture_float" },{ "trigger": "glm_OES_texture_float_linear [gl]", "contents": "gl.OES_texture_float_linear" },{ "trigger": "glm_OES_texture_half_float [gl]", "contents": "gl.OES_texture_half_float" },{ "trigger": "glm_OES_texture_half_float_linear [gl]", "contents": "gl.OES_texture_half_float_linear" },{ "trigger": "glm_OES_texture_npot [gl]", "contents": "gl.OES_texture_npot" },{ "trigger": "glm_OES_vertex_array_object [gl]", "contents": "gl.OES_vertex_array_object" },{ "trigger": "glm_OES_vertex_half_float [gl]", "contents": "gl.OES_vertex_half_float" },{ "trigger": "glm_OES_vertex_type_10_10_10_2 [gl]", "contents": "gl.OES_vertex_type_10_10_10_2" },{ "trigger": "glm_ONE [gl]", "contents": "gl.ONE" },{ "trigger": "glm_ONE_MINUS_CONSTANT_ALPHA [gl]", "contents": "gl.ONE_MINUS_CONSTANT_ALPHA" },{ "trigger": "glm_ONE_MINUS_CONSTANT_COLOR [gl]", "contents": "gl.ONE_MINUS_CONSTANT_COLOR" },{ "trigger": "glm_ONE_MINUS_DST_ALPHA [gl]", "contents": "gl.ONE_MINUS_DST_ALPHA" },{ "trigger": "glm_ONE_MINUS_DST_COLOR [gl]", "contents": "gl.ONE_MINUS_DST_COLOR" },{ "trigger": "glm_ONE_MINUS_SRC_ALPHA [gl]", "contents": "gl.ONE_MINUS_SRC_ALPHA" },{ "trigger": "glm_ONE_MINUS_SRC_COLOR [gl]", "contents": "gl.ONE_MINUS_SRC_COLOR" },{ "trigger": "glm_OUT_OF_MEMORY [gl]", "contents": "gl.OUT_OF_MEMORY" },{ "trigger": "glm_PACK_ALIGNMENT [gl]", "contents": "gl.PACK_ALIGNMENT" },{ "trigger": "glm_PACK_REVERSE_ROW_ORDER_ANGLE [gl]", "contents": "gl.PACK_REVERSE_ROW_ORDER_ANGLE" },{ "trigger": "glm_PALETTE4_R5_G6_B5_OES [gl]", "contents": "gl.PALETTE4_R5_G6_B5_OES" },{ "trigger": "glm_PALETTE4_RGB5_A1_OES [gl]", "contents": "gl.PALETTE4_RGB5_A1_OES" },{ "trigger": "glm_PALETTE4_RGB8_OES [gl]", "contents": "gl.PALETTE4_RGB8_OES" },{ "trigger": "glm_PALETTE4_RGBA4_OES [gl]", "contents": "gl.PALETTE4_RGBA4_OES" },{ "trigger": "glm_PALETTE4_RGBA8_OES [gl]", "contents": "gl.PALETTE4_RGBA8_OES" },{ "trigger": "glm_PALETTE8_R5_G6_B5_OES [gl]", "contents": "gl.PALETTE8_R5_G6_B5_OES" },{ "trigger": "glm_PALETTE8_RGB5_A1_OES [gl]", "contents": "gl.PALETTE8_RGB5_A1_OES" },{ "trigger": "glm_PALETTE8_RGB8_OES [gl]", "contents": "gl.PALETTE8_RGB8_OES" },{ "trigger": "glm_PALETTE8_RGBA4_OES [gl]", "contents": "gl.PALETTE8_RGBA4_OES" },{ "trigger": "glm_PALETTE8_RGBA4_OES [gl]", "contents": "gl.PALETTE8_RGBA4_OES" },{ "trigger": "glm_PERCENTAGE_AMD [gl]", "contents": "gl.PERCENTAGE_AMD" },{ "trigger": "glm_PERFMON_GLOBAL_MODE_QCOM [gl]", "contents": "gl.PERFMON_GLOBAL_MODE_QCOM" },{ "trigger": "glm_PERFMON_RESULT_AMD [gl]", "contents": "gl.PERFMON_RESULT_AMD" },{ "trigger": "glm_PERFMON_RESULT_AVAILABLE_AMD [gl]", "contents": "gl.PERFMON_RESULT_AVAILABLE_AMD" },{ "trigger": "glm_PERFMON_RESULT_SIZE_AMD [gl]", "contents": "gl.PERFMON_RESULT_SIZE_AMD" },{ "trigger": "glm_POINTS [gl]", "contents": "gl.POINTS" },{ "trigger": "glm_POLYGON_OFFSET_FACTOR [gl]", "contents": "gl.POLYGON_OFFSET_FACTOR" },{ "trigger": "glm_POLYGON_OFFSET_FILL [gl]", "contents": "gl.POLYGON_OFFSET_FILL" },{ "trigger": "glm_POLYGON_OFFSET_UNITS [gl]", "contents": "gl.POLYGON_OFFSET_UNITS" },{ "trigger": "glm_PROGRAM [gl]", "contents": "gl.PROGRAM" },{ "trigger": "glm_PROGRAM_BINARY_ANGLE [gl]", "contents": "gl.PROGRAM_BINARY_ANGLE" },{ "trigger": "glm_PROGRAM_BINARY_FORMATS_OES [gl]", "contents": "gl.PROGRAM_BINARY_FORMATS_OES" },{ "trigger": "glm_PROGRAM_BINARY_LENGTH_OES [gl]", "contents": "gl.PROGRAM_BINARY_LENGTH_OES" },{ "trigger": "glm_PROGRAM_OBJECT_EXT [gl]", "contents": "gl.PROGRAM_OBJECT_EXT" },{ "trigger": "glm_PROGRAM_PIPELINE_BINDING_EXT [gl]", "contents": "gl.PROGRAM_PIPELINE_BINDING_EXT" },{ "trigger": "glm_PROGRAM_PIPELINE_OBJECT_EXT [gl]", "contents": "gl.PROGRAM_PIPELINE_OBJECT_EXT" },{ "trigger": "glm_PROGRAM_SEPARABLE_EXT [gl]", "contents": "gl.PROGRAM_SEPARABLE_EXT" },{ "trigger": "glm_QCOM_alpha_test [gl]", "contents": "gl.QCOM_alpha_test" },{ "trigger": "glm_QCOM_binning_control [gl]", "contents": "gl.QCOM_binning_control" },{ "trigger": "glm_QCOM_driver_control [gl]", "contents": "gl.QCOM_driver_control" },{ "trigger": "glm_QCOM_extended_get [gl]", "contents": "gl.QCOM_extended_get" },{ "trigger": "glm_QCOM_extended_get2 [gl]", "contents": "gl.QCOM_extended_get2" },{ "trigger": "glm_QCOM_perfmon_global_mode [gl]", "contents": "gl.QCOM_perfmon_global_mode" },{ "trigger": "glm_QCOM_tiled_rendering [gl]", "contents": "gl.QCOM_tiled_rendering" },{ "trigger": "glm_QCOM_writeonly_rendering [gl]", "contents": "gl.QCOM_writeonly_rendering" },{ "trigger": "glm_QUERY [gl]", "contents": "gl.QUERY" },{ "trigger": "glm_QUERY_OBJECT_EXT [gl]", "contents": "gl.QUERY_OBJECT_EXT" },{ "trigger": "glm_QUERY_RESULT_AVAILABLE_EXT [gl]", "contents": "gl.QUERY_RESULT_AVAILABLE_EXT" },{ "trigger": "glm_QUERY_RESULT_EXT [gl]", "contents": "gl.QUERY_RESULT_EXT" },{ "trigger": "glm_R16F_EXT [gl]", "contents": "gl.R16F_EXT" },{ "trigger": "glm_R32F_EXT [gl]", "contents": "gl.R32F_EXT" },{ "trigger": "glm_R8_EXT [gl]", "contents": "gl.R8_EXT" },{ "trigger": "glm_READ_BUFFER_EXT [gl]", "contents": "gl.READ_BUFFER_EXT" },{ "trigger": "glm_READ_BUFFER_NV [gl]", "contents": "gl.READ_BUFFER_NV" },{ "trigger": "glm_BLEND [gl]", "contents": "gl.BLEND" },{ "trigger": "glm_READ_FRAMEBUFFER_ANGLE [gl]", "contents": "gl.READ_FRAMEBUFFER_ANGLE" },{ "trigger": "glm_READ_FRAMEBUFFER_APPLE [gl]", "contents": "gl.READ_FRAMEBUFFER_APPLE" },{ "trigger": "glm_READ_FRAMEBUFFER_BINDING_ANGLE [gl]", "contents": "gl.READ_FRAMEBUFFER_BINDING_ANGLE" },{ "trigger": "glm_READ_FRAMEBUFFER_BINDING_APPLE [gl]", "contents": "gl.READ_FRAMEBUFFER_BINDING_APPLE" },{ "trigger": "glm_READ_FRAMEBUFFER_BINDING_NV [gl]", "contents": "gl.READ_FRAMEBUFFER_BINDING_NV" },{ "trigger": "glm_READ_FRAMEBUFFER_NV [gl]", "contents": "gl.READ_FRAMEBUFFER_NV" },{ "trigger": "glm_RED_BITS [gl]", "contents": "gl.RED_BITS" },{ "trigger": "glm_RED_EXT [gl]", "contents": "gl.RED_EXT" },{ "trigger": "glm_RENDERBUFFER [gl]", "contents": "gl.RENDERBUFFER" },{ "trigger": "glm_RENDERBUFFER_ALPHA_SIZE [gl]", "contents": "gl.RENDERBUFFER_ALPHA_SIZE" },{ "trigger": "glm_RENDERBUFFER_BINDING [gl]", "contents": "gl.RENDERBUFFER_BINDING" },{ "trigger": "glm_RENDERBUFFER_BLUE_SIZE [gl]", "contents": "gl.RENDERBUFFER_BLUE_SIZE" },{ "trigger": "glm_RENDERBUFFER_DEPTH_SIZE [gl]", "contents": "gl.RENDERBUFFER_DEPTH_SIZE" },{ "trigger": "glm_RENDERBUFFER_GREEN_SIZE [gl]", "contents": "gl.RENDERBUFFER_GREEN_SIZE" },{ "trigger": "glm_RENDERBUFFER_HEIGHT [gl]", "contents": "gl.RENDERBUFFER_HEIGHT" },{ "trigger": "glm_RENDERBUFFER_INTERNAL_FORMAT [gl]", "contents": "gl.RENDERBUFFER_INTERNAL_FORMAT" },{ "trigger": "glm_RENDERBUFFER_RED_SIZE [gl]", "contents": "gl.RENDERBUFFER_RED_SIZE" },{ "trigger": "glm_RENDERBUFFER_SAMPLES_ANGLE [gl]", "contents": "gl.RENDERBUFFER_SAMPLES_ANGLE" },{ "trigger": "glm_RENDERBUFFER_SAMPLES_APPLE [gl]", "contents": "gl.RENDERBUFFER_SAMPLES_APPLE" },{ "trigger": "glm_RENDERBUFFER_SAMPLES_EXT [gl]", "contents": "gl.RENDERBUFFER_SAMPLES_EXT" },{ "trigger": "glm_RENDERBUFFER_SAMPLES_IMG [gl]", "contents": "gl.RENDERBUFFER_SAMPLES_IMG" },{ "trigger": "glm_RENDERBUFFER_SAMPLES_NV [gl]", "contents": "gl.RENDERBUFFER_SAMPLES_NV" },{ "trigger": "glm_RENDERBUFFER_STENCIL_SIZE [gl]", "contents": "gl.RENDERBUFFER_STENCIL_SIZE" },{ "trigger": "glm_RENDERBUFFER_WIDTH [gl]", "contents": "gl.RENDERBUFFER_WIDTH" },{ "trigger": "glm_RENDERER [gl]", "contents": "gl.RENDERER" },{ "trigger": "glm_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM [gl]", "contents": "gl.RENDER_DIRECT_TO_FRAMEBUFFER_QCOM" },{ "trigger": "glm_REPEAT [gl]", "contents": "gl.REPEAT" },{ "trigger": "glm_REPLACE [gl]", "contents": "gl.REPLACE" },{ "trigger": "glm_REQUIRED_TEXTURE_IMAGE_UNITS_OES [gl]", "contents": "gl.REQUIRED_TEXTURE_IMAGE_UNITS_OES" },{ "trigger": "glm_RESET_NOTIFICATION_STRATEGY_EXT [gl]", "contents": "gl.RESET_NOTIFICATION_STRATEGY_EXT" },{ "trigger": "glm_RG16F_EXT [gl]", "contents": "gl.RG16F_EXT" },{ "trigger": "glm_RG32F_EXT [gl]", "contents": "gl.RG32F_EXT" },{ "trigger": "glm_RG8_EXT [gl]", "contents": "gl.RG8_EXT" },{ "trigger": "glm_RGB [gl]", "contents": "gl.RGB" },{ "trigger": "glm_RGB10_A2_EXT [gl]", "contents": "gl.RGB10_A2_EXT" },{ "trigger": "glm_RGB10_EXT [gl]", "contents": "gl.RGB10_EXT" },{ "trigger": "glm_RGB16F_EXT [gl]", "contents": "gl.RGB16F_EXT" },{ "trigger": "glm_RGB32F_EXT [gl]", "contents": "gl.RGB32F_EXT" },{ "trigger": "glm_RGB565 [gl]", "contents": "gl.RGB565" },{ "trigger": "glm_RGB565_OES [gl]", "contents": "gl.RGB565_OES" },{ "trigger": "glm_RGB5_A1 [gl]", "contents": "gl.RGB5_A1" },{ "trigger": "glm_RGB5_A1_OES [gl]", "contents": "gl.RGB5_A1_OES" },{ "trigger": "glm_RGB8_OES [gl]", "contents": "gl.RGB8_OES" },{ "trigger": "glm_RGBA [gl]", "contents": "gl.RGBA" },{ "trigger": "glm_RGBA16F_EXT [gl]", "contents": "gl.RGBA16F_EXT" },{ "trigger": "glm_RGBA32F_EXT [gl]", "contents": "gl.RGBA32F_EXT" },{ "trigger": "glm_RGBA4 [gl]", "contents": "gl.RGBA4" },{ "trigger": "glm_RGBA4_OES [gl]", "contents": "gl.RGBA4_OES" },{ "trigger": "glm_RGBA8_OES [gl]", "contents": "gl.RGBA8_OES" },{ "trigger": "glm_RGB_422_APPLE [gl]", "contents": "gl.RGB_422_APPLE" },{ "trigger": "glm_RG_EXT [gl]", "contents": "gl.RG_EXT" },{ "trigger": "glm_SAMPLER [gl]", "contents": "gl.SAMPLER" },{ "trigger": "glm_SAMPLER_2D [gl]", "contents": "gl.SAMPLER_2D" },{ "trigger": "glm_SAMPLER_2D_ARRAY_SHADOW_NV [gl]", "contents": "gl.SAMPLER_2D_ARRAY_SHADOW_NV" },{ "trigger": "glm_SAMPLER_2D_SHADOW_EXT [gl]", "contents": "gl.SAMPLER_2D_SHADOW_EXT" },{ "trigger": "glm_SAMPLER_3D_OES [gl]", "contents": "gl.SAMPLER_3D_OES" },{ "trigger": "glm_SAMPLER_CUBE [gl]", "contents": "gl.SAMPLER_CUBE" },{ "trigger": "glm_SAMPLER_CUBE_SHADOW_NV [gl]", "contents": "gl.SAMPLER_CUBE_SHADOW_NV" },{ "trigger": "glm_SAMPLER_EXTERNAL_OES [gl]", "contents": "gl.SAMPLER_EXTERNAL_OES" },{ "trigger": "glm_SAMPLES [gl]", "contents": "gl.SAMPLES" },{ "trigger": "glm_SAMPLE_ALPHA_TO_COVERAGE [gl]", "contents": "gl.SAMPLE_ALPHA_TO_COVERAGE" },{ "trigger": "glm_SAMPLE_BUFFERS [gl]", "contents": "gl.SAMPLE_BUFFERS" },{ "trigger": "glm_SAMPLE_COVERAGE [gl]", "contents": "gl.SAMPLE_COVERAGE" },{ "trigger": "glm_SAMPLE_COVERAGE_INVERT [gl]", "contents": "gl.SAMPLE_COVERAGE_INVERT" },{ "trigger": "glm_SAMPLE_COVERAGE_VALUE [gl]", "contents": "gl.SAMPLE_COVERAGE_VALUE" },{ "trigger": "glm_SCISSOR_BOX [gl]", "contents": "gl.SCISSOR_BOX" },{ "trigger": "glm_SCISSOR_TEST [gl]", "contents": "gl.SCISSOR_TEST" },{ "trigger": "glm_SGX_BINARY_IMG [gl]", "contents": "gl.SGX_BINARY_IMG" },{ "trigger": "glm_SGX_PROGRAM_BINARY_IMG [gl]", "contents": "gl.SGX_PROGRAM_BINARY_IMG" },{ "trigger": "glm_SHADER [gl]", "contents": "gl.SHADER" },{ "trigger": "glm_SHADER_BINARY_DMP [gl]", "contents": "gl.SHADER_BINARY_DMP" },{ "trigger": "glm_SHADER_BINARY_FORMATS [gl]", "contents": "gl.SHADER_BINARY_FORMATS" },{ "trigger": "glm_SHADER_BINARY_VIV [gl]", "contents": "gl.SHADER_BINARY_VIV" },{ "trigger": "glm_SHADER_COMPILER [gl]", "contents": "gl.SHADER_COMPILER" },{ "trigger": "glm_SHADER_OBJECT_EXT [gl]", "contents": "gl.SHADER_OBJECT_EXT" },{ "trigger": "glm_SHADER_SOURCE_LENGTH [gl]", "contents": "gl.SHADER_SOURCE_LENGTH" },{ "trigger": "glm_SHADER_TYPE [gl]", "contents": "gl.SHADER_TYPE" },{ "trigger": "glm_SHADING_LANGUAGE_VERSION [gl]", "contents": "gl.SHADING_LANGUAGE_VERSION" },{ "trigger": "glm_SHORT [gl]", "contents": "gl.SHORT" },{ "trigger": "glm_SIGNALED_APPLE [gl]", "contents": "gl.SIGNALED_APPLE" },{ "trigger": "glm_SLUMINANCE8_ALPHA8_NV [gl]", "contents": "gl.SLUMINANCE8_ALPHA8_NV" },{ "trigger": "glm_SLUMINANCE8_NV [gl]", "contents": "gl.SLUMINANCE8_NV" },{ "trigger": "glm_SLUMINANCE_ALPHA_NV [gl]", "contents": "gl.SLUMINANCE_ALPHA_NV" },{ "trigger": "glm_SLUMINANCE_NV [gl]", "contents": "gl.SLUMINANCE_NV" },{ "trigger": "glm_SRC_ALPHA [gl]", "contents": "gl.SRC_ALPHA" },{ "trigger": "glm_SRC_ALPHA_SATURATE [gl]", "contents": "gl.SRC_ALPHA_SATURATE" },{ "trigger": "glm_SRC_COLOR [gl]", "contents": "gl.SRC_COLOR" },{ "trigger": "glm_SRGB8_ALPHA8_EXT [gl]", "contents": "gl.SRGB8_ALPHA8_EXT" },{ "trigger": "glm_SRGB8_NV [gl]", "contents": "gl.SRGB8_NV" },{ "trigger": "glm_SRGB_ALPHA_EXT [gl]", "contents": "gl.SRGB_ALPHA_EXT" },{ "trigger": "glm_SRGB_EXT [gl]", "contents": "gl.SRGB_EXT" },{ "trigger": "glm_STACK_OVERFLOW [gl]", "contents": "gl.STACK_OVERFLOW" },{ "trigger": "glm_STACK_UNDERFLOW [gl]", "contents": "gl.STACK_UNDERFLOW" },{ "trigger": "glm_STATE_RESTORE [gl]", "contents": "gl.STATE_RESTORE" },{ "trigger": "glm_STATIC_DRAW [gl]", "contents": "gl.STATIC_DRAW" },{ "trigger": "glm_STENCIL_ATTACHMENT [gl]", "contents": "gl.STENCIL_ATTACHMENT" },{ "trigger": "glm_STENCIL_BACK_FAIL [gl]", "contents": "gl.STENCIL_BACK_FAIL" },{ "trigger": "glm_STENCIL_BACK_FUNC [gl]", "contents": "gl.STENCIL_BACK_FUNC" },{ "trigger": "glm_STENCIL_BACK_PASS_DEPTH_FAIL [gl]", "contents": "gl.STENCIL_BACK_PASS_DEPTH_FAIL" },{ "trigger": "glm_STENCIL_BACK_PASS_DEPTH_PASS [gl]", "contents": "gl.STENCIL_BACK_PASS_DEPTH_PASS" },{ "trigger": "glm_STENCIL_BACK_REF [gl]", "contents": "gl.STENCIL_BACK_REF" },{ "trigger": "glm_STENCIL_BACK_VALUE_MASK [gl]", "contents": "gl.STENCIL_BACK_VALUE_MASK" },{ "trigger": "glm_STENCIL_BACK_WRITEMASK [gl]", "contents": "gl.STENCIL_BACK_WRITEMASK" },{ "trigger": "glm_STENCIL_BITS [gl]", "contents": "gl.STENCIL_BITS" },{ "trigger": "glm_STENCIL_BUFFER_BIT [gl]", "contents": "gl.STENCIL_BUFFER_BIT" },{ "trigger": "glm_STENCIL_BUFFER_BIT0_QCOM [gl]", "contents": "gl.STENCIL_BUFFER_BIT0_QCOM" },{ "trigger": "glm_STENCIL_BUFFER_BIT1_QCOM [gl]", "contents": "gl.STENCIL_BUFFER_BIT1_QCOM" },{ "trigger": "glm_STENCIL_BUFFER_BIT2_QCOM [gl]", "contents": "gl.STENCIL_BUFFER_BIT2_QCOM" },{ "trigger": "glm_STENCIL_BUFFER_BIT3_QCOM [gl]", "contents": "gl.STENCIL_BUFFER_BIT3_QCOM" },{ "trigger": "glm_STENCIL_BUFFER_BIT4_QCOM [gl]", "contents": "gl.STENCIL_BUFFER_BIT4_QCOM" },{ "trigger": "glm_STENCIL_BUFFER_BIT5_QCOM [gl]", "contents": "gl.STENCIL_BUFFER_BIT5_QCOM" },{ "trigger": "glm_STENCIL_BUFFER_BIT6_QCOM [gl]", "contents": "gl.STENCIL_BUFFER_BIT6_QCOM" },{ "trigger": "glm_STENCIL_BUFFER_BIT7_QCOM [gl]", "contents": "gl.STENCIL_BUFFER_BIT7_QCOM" },{ "trigger": "glm_STENCIL_CLEAR_VALUE [gl]", "contents": "gl.STENCIL_CLEAR_VALUE" },{ "trigger": "glm_STENCIL_EXT [gl]", "contents": "gl.STENCIL_EXT" },{ "trigger": "glm_STENCIL_FAIL [gl]", "contents": "gl.STENCIL_FAIL" },{ "trigger": "glm_STENCIL_FUNC [gl]", "contents": "gl.STENCIL_FUNC" },{ "trigger": "glm_STENCIL_INDEX1_OES [gl]", "contents": "gl.STENCIL_INDEX1_OES" },{ "trigger": "glm_STENCIL_INDEX4_OES [gl]", "contents": "gl.STENCIL_INDEX4_OES" },{ "trigger": "glm_STENCIL_INDEX8 [gl]", "contents": "gl.STENCIL_INDEX8" },{ "trigger": "glm_STENCIL_PASS_DEPTH_FAIL [gl]", "contents": "gl.STENCIL_PASS_DEPTH_FAIL" },{ "trigger": "glm_STENCIL_PASS_DEPTH_PASS [gl]", "contents": "gl.STENCIL_PASS_DEPTH_PASS" },{ "trigger": "glm_STENCIL_REF [gl]", "contents": "gl.STENCIL_REF" },{ "trigger": "glm_STENCIL_TEST [gl]", "contents": "gl.STENCIL_TEST" },{ "trigger": "glm_STENCIL_VALUE_MASK [gl]", "contents": "gl.STENCIL_VALUE_MASK" },{ "trigger": "glm_STENCIL_WRITEMASK [gl]", "contents": "gl.STENCIL_WRITEMASK" },{ "trigger": "glm_STREAM_DRAW [gl]", "contents": "gl.STREAM_DRAW" },{ "trigger": "glm_SUBPIXEL_BITS [gl]", "contents": "gl.SUBPIXEL_BITS" },{ "trigger": "glm_SYNC_CONDITION_APPLE [gl]", "contents": "gl.SYNC_CONDITION_APPLE" },{ "trigger": "glm_SYNC_FENCE_APPLE [gl]", "contents": "gl.SYNC_FENCE_APPLE" },{ "trigger": "glm_SYNC_FLAGS_APPLE [gl]", "contents": "gl.SYNC_FLAGS_APPLE" },{ "trigger": "glm_SYNC_FLUSH_COMMANDS_BIT_APPLE [gl]", "contents": "gl.SYNC_FLUSH_COMMANDS_BIT_APPLE" },{ "trigger": "glm_SYNC_GPU_COMMANDS_COMPLETE_APPLE [gl]", "contents": "gl.SYNC_GPU_COMMANDS_COMPLETE_APPLE" },{ "trigger": "glm_SYNC_OBJECT_APPLE [gl]", "contents": "gl.SYNC_OBJECT_APPLE" },{ "trigger": "glm_SYNC_STATUS_APPLE [gl]", "contents": "gl.SYNC_STATUS_APPLE" },{ "trigger": "glm_TEXTURE [gl]", "contents": "gl.TEXTURE" },{ "trigger": "glm_TEXTURE0 [gl]", "contents": "gl.TEXTURE0" },{ "trigger": "glm_TEXTURE1 [gl]", "contents": "gl.TEXTURE1" },{ "trigger": "glm_TEXTURE10 [gl]", "contents": "gl.TEXTURE10" },{ "trigger": "glm_TEXTURE11 [gl]", "contents": "gl.TEXTURE11" },{ "trigger": "glm_TEXTURE12 [gl]", "contents": "gl.TEXTURE12" },{ "trigger": "glm_TEXTURE13 [gl]", "contents": "gl.TEXTURE13" },{ "trigger": "glm_TEXTURE14 [gl]", "contents": "gl.TEXTURE14" },{ "trigger": "glm_TEXTURE15 [gl]", "contents": "gl.TEXTURE15" },{ "trigger": "glm_TEXTURE16 [gl]", "contents": "gl.TEXTURE16" },{ "trigger": "glm_TEXTURE17 [gl]", "contents": "gl.TEXTURE17" },{ "trigger": "glm_TEXTURE18 [gl]", "contents": "gl.TEXTURE18" },{ "trigger": "glm_TEXTURE19 [gl]", "contents": "gl.TEXTURE19" },{ "trigger": "glm_TEXTURE2 [gl]", "contents": "gl.TEXTURE2" },{ "trigger": "glm_TEXTURE20 [gl]", "contents": "gl.TEXTURE20" },{ "trigger": "glm_TEXTURE21 [gl]", "contents": "gl.TEXTURE21" },{ "trigger": "glm_TEXTURE22 [gl]", "contents": "gl.TEXTURE22" },{ "trigger": "glm_TEXTURE23 [gl]", "contents": "gl.TEXTURE23" },{ "trigger": "glm_TEXTURE24 [gl]", "contents": "gl.TEXTURE24" },{ "trigger": "glm_TEXTURE25 [gl]", "contents": "gl.TEXTURE25" },{ "trigger": "glm_TEXTURE26 [gl]", "contents": "gl.TEXTURE26" },{ "trigger": "glm_TEXTURE27 [gl]", "contents": "gl.TEXTURE27" },{ "trigger": "glm_TEXTURE28 [gl]", "contents": "gl.TEXTURE28" },{ "trigger": "glm_TEXTURE29 [gl]", "contents": "gl.TEXTURE29" },{ "trigger": "glm_TEXTURE3 [gl]", "contents": "gl.TEXTURE3" },{ "trigger": "glm_TEXTURE30 [gl]", "contents": "gl.TEXTURE30" },{ "trigger": "glm_TEXTURE31 [gl]", "contents": "gl.TEXTURE31" },{ "trigger": "glm_TEXTURE4 [gl]", "contents": "gl.TEXTURE4" },{ "trigger": "glm_TEXTURE5 [gl]", "contents": "gl.TEXTURE5" },{ "trigger": "glm_TEXTURE6 [gl]", "contents": "gl.TEXTURE6" },{ "trigger": "glm_TEXTURE7 [gl]", "contents": "gl.TEXTURE7" },{ "trigger": "glm_TEXTURE8 [gl]", "contents": "gl.TEXTURE8" },{ "trigger": "glm_TEXTURE9 [gl]", "contents": "gl.TEXTURE9" },{ "trigger": "glm_TEXTURE_2D [gl]", "contents": "gl.TEXTURE_2D" },{ "trigger": "glm_TEXTURE_3D_OES [gl]", "contents": "gl.TEXTURE_3D_OES" },{ "trigger": "glm_TEXTURE_BINDING_2D [gl]", "contents": "gl.TEXTURE_BINDING_2D" },{ "trigger": "glm_TEXTURE_BINDING_3D_OES [gl]", "contents": "gl.TEXTURE_BINDING_3D_OES" },{ "trigger": "glm_TEXTURE_BINDING_CUBE_MAP [gl]", "contents": "gl.TEXTURE_BINDING_CUBE_MAP" },{ "trigger": "glm_TEXTURE_BINDING_EXTERNAL_OES [gl]", "contents": "gl.TEXTURE_BINDING_EXTERNAL_OES" },{ "trigger": "glm_TEXTURE_BORDER_COLOR_NV [gl]", "contents": "gl.TEXTURE_BORDER_COLOR_NV" },{ "trigger": "glm_TEXTURE_COMPARE_FUNC_EXT [gl]", "contents": "gl.TEXTURE_COMPARE_FUNC_EXT" },{ "trigger": "glm_TEXTURE_COMPARE_MODE_EXT [gl]", "contents": "gl.TEXTURE_COMPARE_MODE_EXT" },{ "trigger": "glm_TEXTURE_CUBE_MAP [gl]", "contents": "gl.TEXTURE_CUBE_MAP" },{ "trigger": "glm_TEXTURE_CUBE_MAP_NEGATIVE_X [gl]", "contents": "gl.TEXTURE_CUBE_MAP_NEGATIVE_X" },{ "trigger": "glm_TEXTURE_CUBE_MAP_NEGATIVE_Y [gl]", "contents": "gl.TEXTURE_CUBE_MAP_NEGATIVE_Y" },{ "trigger": "glm_TEXTURE_CUBE_MAP_NEGATIVE_Z [gl]", "contents": "gl.TEXTURE_CUBE_MAP_NEGATIVE_Z" },{ "trigger": "glm_TEXTURE_CUBE_MAP_POSITIVE_X [gl]", "contents": "gl.TEXTURE_CUBE_MAP_POSITIVE_X" },{ "trigger": "glm_TEXTURE_CUBE_MAP_POSITIVE_Y [gl]", "contents": "gl.TEXTURE_CUBE_MAP_POSITIVE_Y" },{ "trigger": "glm_TEXTURE_CUBE_MAP_POSITIVE_Z [gl]", "contents": "gl.TEXTURE_CUBE_MAP_POSITIVE_Z" },{ "trigger": "glm_TEXTURE_DEPTH_QCOM [gl]", "contents": "gl.TEXTURE_DEPTH_QCOM" },{ "trigger": "glm_TEXTURE_EXTERNAL_OES [gl]", "contents": "gl.TEXTURE_EXTERNAL_OES" },{ "trigger": "glm_TEXTURE_FORMAT_QCOM [gl]", "contents": "gl.TEXTURE_FORMAT_QCOM" },{ "trigger": "glm_TEXTURE_HEIGHT_QCOM [gl]", "contents": "gl.TEXTURE_HEIGHT_QCOM" },{ "trigger": "glm_TEXTURE_IMAGE_VALID_QCOM [gl]", "contents": "gl.TEXTURE_IMAGE_VALID_QCOM" },{ "trigger": "glm_TEXTURE_IMMUTABLE_FORMAT_EXT [gl]", "contents": "gl.TEXTURE_IMMUTABLE_FORMAT_EXT" },{ "trigger": "glm_TEXTURE_INTERNAL_FORMAT_QCOM [gl]", "contents": "gl.TEXTURE_INTERNAL_FORMAT_QCOM" },{ "trigger": "glm_TEXTURE_MAG_FILTER [gl]", "contents": "gl.TEXTURE_MAG_FILTER" },{ "trigger": "glm_TEXTURE_MAX_ANISOTROPY_EXT [gl]", "contents": "gl.TEXTURE_MAX_ANISOTROPY_EXT" },{ "trigger": "glm_TEXTURE_MAX_LEVEL_APPLE [gl]", "contents": "gl.TEXTURE_MAX_LEVEL_APPLE" },{ "trigger": "glm_TEXTURE_MIN_FILTER [gl]", "contents": "gl.TEXTURE_MIN_FILTER" },{ "trigger": "glm_TEXTURE_NUM_LEVELS_QCOM [gl]", "contents": "gl.TEXTURE_NUM_LEVELS_QCOM" },{ "trigger": "glm_TEXTURE_OBJECT_VALID_QCOM [gl]", "contents": "gl.TEXTURE_OBJECT_VALID_QCOM" },{ "trigger": "glm_TEXTURE_SAMPLES_IMG [gl]", "contents": "gl.TEXTURE_SAMPLES_IMG" },{ "trigger": "glm_TEXTURE_TARGET_QCOM [gl]", "contents": "gl.TEXTURE_TARGET_QCOM" },{ "trigger": "glm_TEXTURE_TYPE_QCOM [gl]", "contents": "gl.TEXTURE_TYPE_QCOM" },{ "trigger": "glm_TEXTURE_USAGE_ANGLE [gl]", "contents": "gl.TEXTURE_USAGE_ANGLE" },{ "trigger": "glm_TEXTURE_WIDTH_QCOM [gl]", "contents": "gl.TEXTURE_WIDTH_QCOM" },{ "trigger": "glm_TEXTURE_WRAP_R_OES [gl]", "contents": "gl.TEXTURE_WRAP_R_OES" },{ "trigger": "glm_TEXTURE_WRAP_S [gl]", "contents": "gl.TEXTURE_WRAP_S" },{ "trigger": "glm_TEXTURE_WRAP_T [gl]", "contents": "gl.TEXTURE_WRAP_T" },{ "trigger": "glm_TIMEOUT_EXPIRED_APPLE [gl]", "contents": "gl.TIMEOUT_EXPIRED_APPLE" },{ "trigger": "glm_TIMEOUT_IGNORED_APPLE [gl]", "contents": "gl.TIMEOUT_IGNORED_APPLE" },{ "trigger": "glm_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE [gl]", "contents": "gl.TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE" },{ "trigger": "glm_TRIANGLES [gl]", "contents": "gl.TRIANGLES" },{ "trigger": "glm_TRIANGLE_FAN [gl]", "contents": "gl.TRIANGLE_FAN" },{ "trigger": "glm_TRIANGLE_STRIP [gl]", "contents": "gl.TRIANGLE_STRIP" },{ "trigger": "glm_TRUE [gl]", "contents": "gl.TRUE" },{ "trigger": "glm_UNKNOWN_CONTEXT_RESET_EXT [gl]", "contents": "gl.UNKNOWN_CONTEXT_RESET_EXT" },{ "trigger": "glm_UNPACK_ALIGNMENT [gl]", "contents": "gl.UNPACK_ALIGNMENT" },{ "trigger": "glm_UNPACK_ROW_LENGTH [gl]", "contents": "gl.UNPACK_ROW_LENGTH" },{ "trigger": "glm_UNPACK_SKIP_PIXELS [gl]", "contents": "gl.UNPACK_SKIP_PIXELS" },{ "trigger": "glm_UNPACK_SKIP_ROWS [gl]", "contents": "gl.UNPACK_SKIP_ROWS" },{ "trigger": "glm_UNSIGNALED_APPLE [gl]", "contents": "gl.UNSIGNALED_APPLE" },{ "trigger": "glm_UNSIGNED_BYTE [gl]", "contents": "gl.UNSIGNED_BYTE" },{ "trigger": "glm_UNSIGNED_INT [gl]", "contents": "gl.UNSIGNED_INT" },{ "trigger": "glm_UNSIGNED_INT64_AMD [gl]", "contents": "gl.UNSIGNED_INT64_AMD" },{ "trigger": "glm_UNSIGNED_INT_10_10_10_2_OES [gl]", "contents": "gl.UNSIGNED_INT_10_10_10_2_OES" },{ "trigger": "glm_UNSIGNED_INT_24_8_OES [gl]", "contents": "gl.UNSIGNED_INT_24_8_OES" },{ "trigger": "glm_UNSIGNED_INT_2_10_10_10_REV_EXT [gl]", "contents": "gl.UNSIGNED_INT_2_10_10_10_REV_EXT" },{ "trigger": "glm_UNSIGNED_NORMALIZED_EXT [gl]", "contents": "gl.UNSIGNED_NORMALIZED_EXT" },{ "trigger": "glm_UNSIGNED_SHORT [gl]", "contents": "gl.UNSIGNED_SHORT" },{ "trigger": "glm_UNSIGNED_SHORT_1_5_5_5_REV_EXT [gl]", "contents": "gl.UNSIGNED_SHORT_1_5_5_5_REV_EXT" },{ "trigger": "glm_UNSIGNED_SHORT_4_4_4_4 [gl]", "contents": "gl.UNSIGNED_SHORT_4_4_4_4" },{ "trigger": "glm_UNSIGNED_SHORT_4_4_4_4_REV_EXT [gl]", "contents": "gl.UNSIGNED_SHORT_4_4_4_4_REV_EXT" },{ "trigger": "glm_UNSIGNED_SHORT_4_4_4_4_REV_IMG [gl]", "contents": "gl.UNSIGNED_SHORT_4_4_4_4_REV_IMG" },{ "trigger": "glm_UNSIGNED_SHORT_5_5_5_1 [gl]", "contents": "gl.UNSIGNED_SHORT_5_5_5_1" },{ "trigger": "glm_UNSIGNED_SHORT_5_6_5 [gl]", "contents": "gl.UNSIGNED_SHORT_5_6_5" },{ "trigger": "glm_UNSIGNED_SHORT_8_8_APPLE [gl]", "contents": "gl.UNSIGNED_SHORT_8_8_APPLE" },{ "trigger": "glm_UNSIGNED_SHORT_8_8_REV_APPLE [gl]", "contents": "gl.UNSIGNED_SHORT_8_8_REV_APPLE" },{ "trigger": "glm_VALIDATE_STATUS [gl]", "contents": "gl.VALIDATE_STATUS" },{ "trigger": "glm_VENDOR [gl]", "contents": "gl.VENDOR" },{ "trigger": "glm_VERSION [gl]", "contents": "gl.VERSION" },{ "trigger": "glm_VERTEX_ARRAY_BINDING_OES [gl]", "contents": "gl.VERTEX_ARRAY_BINDING_OES" },{ "trigger": "glm_VERTEX_ARRAY_OBJECT_EXT [gl]", "contents": "gl.VERTEX_ARRAY_OBJECT_EXT" },{ "trigger": "glm_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING [gl]", "contents": "gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING" },{ "trigger": "glm_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE [gl]", "contents": "gl.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE" },{ "trigger": "glm_VERTEX_ATTRIB_ARRAY_DIVISOR_NV [gl]", "contents": "gl.VERTEX_ATTRIB_ARRAY_DIVISOR_NV" },{ "trigger": "glm_VERTEX_ATTRIB_ARRAY_ENABLED [gl]", "contents": "gl.VERTEX_ATTRIB_ARRAY_ENABLED" },{ "trigger": "glm_VERTEX_ATTRIB_ARRAY_NORMALIZED [gl]", "contents": "gl.VERTEX_ATTRIB_ARRAY_NORMALIZED" },{ "trigger": "glm_VERTEX_ATTRIB_ARRAY_POINTER [gl]", "contents": "gl.VERTEX_ATTRIB_ARRAY_POINTER" },{ "trigger": "glm_VERTEX_ATTRIB_ARRAY_SIZE [gl]", "contents": "gl.VERTEX_ATTRIB_ARRAY_SIZE" },{ "trigger": "glm_VERTEX_ATTRIB_ARRAY_STRIDE [gl]", "contents": "gl.VERTEX_ATTRIB_ARRAY_STRIDE" },{ "trigger": "glm_VERTEX_ATTRIB_ARRAY_TYPE [gl]", "contents": "gl.VERTEX_ATTRIB_ARRAY_TYPE" },{ "trigger": "glm_VERTEX_SHADER [gl]", "contents": "gl.VERTEX_SHADER" },{ "trigger": "glm_VERTEX_SHADER_BIT_EXT [gl]", "contents": "gl.VERTEX_SHADER_BIT_EXT" },{ "trigger": "glm_VIEWPORT [gl]", "contents": "gl.VIEWPORT" },{ "trigger": "glm_VIV_shader_binary [gl]", "contents": "gl.VIV_shader_binary" },{ "trigger": "glm_WAIT_FAILED_APPLE [gl]", "contents": "gl.WAIT_FAILED_APPLE" },{ "trigger": "glm_WRITEONLY_RENDERING_QCOM [gl]", "contents": "gl.WRITEONLY_RENDERING_QCOM" },{ "trigger": "glm_WRITE_ONLY_OES [gl]", "contents": "gl.WRITE_ONLY_OES" },{ "trigger": "glm_Z400_BINARY_AMD [gl]", "contents": "gl.Z400_BINARY_AMD" },{ "trigger": "glm_ZERO [gl]", "contents": "gl.ZERO" },{ "trigger": "s_create():ret (return value: cc.ParticleSpiral):#ParticleSpiral [ParticleSpiral]", "contents": "create()" },{ "trigger": "s_createWithTotalParticles(int:#int):ret (return value: cc.ParticleSpiral):#ParticleSpiral [ParticleSpiral]", "contents": "createWithTotalParticles(${1:int:#int})" },{ "trigger": "s_getMouseButton():ret (return value: int):#int [EventMouse]", "contents": "getMouseButton()" },{ "trigger": "s_setScrollData(float:#float,float:#float):void [EventMouse]", "contents": "setScrollData(${1:float:#float},${2:float:#float})" },{ "trigger": "s_setMouseButton(int:#int):void [EventMouse]", "contents": "setMouseButton(${1:int:#int})" },{ "trigger": "s_getScrollY():ret (return value: float):#float [EventMouse]", "contents": "getScrollY()" },{ "trigger": "s_getScrollX():ret (return value: float):#float [EventMouse]", "contents": "getScrollX()" },{ "trigger": "s_getCursorX():ret (return value: float):#float [EventMouse]", "contents": "getCursorX()" },{ "trigger": "s_getCursorY():ret (return value: float):#float [EventMouse]", "contents": "getCursorY()" },{ "trigger": "s_setCursorPosition(float:#float,float:#float):void [EventMouse]", "contents": "setCursorPosition(${1:float:#float},${2:float:#float})" },{ "trigger": "s_EventMouse(mouseeventtype:#cc.EventMouse::MouseEventType):void [EventMouse]", "contents": "EventMouse(${1:mouseeventtype:#cc.EventMouse::MouseEventType})" },{ "trigger": "s_getTargetPlatform():ret (return value: cc.ApplicationProtocol::Platform):#ApplicationProtocol::Platform [Application]", "contents": "getTargetPlatform()" },{ "trigger": "s_getCurrentLanguageCode():ret (return value: char):#char [Application]", "contents": "getCurrentLanguageCode()" },{ "trigger": "s_getCurrentLanguage():ret (return value: cc.LanguageType):#LanguageType [Application]", "contents": "getCurrentLanguage()" },{ "trigger": "s_setAnimationInterval(double:#double):void [Application]", "contents": "setAnimationInterval(${1:double:#double})" },{ "trigger": "s_getInstance():ret (return value: cc.Application):#Application [Application]", "contents": "getInstance()" },{ "trigger": "f_new():ret (return value: table):#table [TriggerMng]", "contents": "new()" },{ "trigger": "f_getInstance():ret (return value: table):#table [TriggerMng]", "contents": "getInstance()" },{ "trigger": "f_destroyInstance():void [TriggerMng]", "contents": "destroyInstance()" },{ "trigger": "f_triggerMngVersion():table (return value: string):#string [TriggerMng]", "contents": "triggerMngVersion()" },{ "trigger": "f_parse(jsonStr:#string):void [TriggerMng]", "contents": "parse(${1:jsonStr:#string})" },{ "trigger": "f_get(event:#uint):ret (return value: table):#table [TriggerMng]", "contents": "get(${1:event:#uint})" },{ "trigger": "f_getTriggerObj(id:#uint):ret (return value: ccs.TriggerObj):#TriggerObj [TriggerMng]", "contents": "getTriggerObj(${1:id:#uint})" },{ "trigger": "f_add(event:#uint,triggerObj:#ccs.TriggerObj):void [TriggerMng]", "contents": "add(${1:event:#uint},${2:triggerObj:#ccs.TriggerObj})" },{ "trigger": "f_removeAll():void [TriggerMng]", "contents": "removeAll()" },{ "trigger": "f_remove(event:#uint,triggerObj:#ccs.TriggerObj):ret (return value: bool):#bool [TriggerMng]", "contents": "remove(${1:event:#uint},${2:triggerObj:#ccs.TriggerObj})" },{ "trigger": "f_removeObjByEvent(event:#uint,triggerObj:#ccs.TriggerObj):ret (return value: bool):#bool [TriggerMng]", "contents": "removeObjByEvent(${1:event:#uint},${2:triggerObj:#ccs.TriggerObj})" },{ "trigger": "f_removeTriggerObj(id:#uint):ret (return value: bool):#bool [TriggerMng]", "contents": "removeTriggerObj(${1:id:#uint})" },{ "trigger": "f_isEmpty():ret (return value: bool):#bool [TriggerMng]", "contents": "isEmpty()" },{ "trigger": "TriggerMngm__eventTriggers [TriggerMng]", "contents": "TriggerMng._eventTriggers" },{ "trigger": "TriggerMngm__triggerObjs [TriggerMng]", "contents": "TriggerMng._triggerObjs" },{ "trigger": "TriggerMngm__movementDispatches [TriggerMng]", "contents": "TriggerMng._movementDispatches" },{ "trigger": "TriggerMngm__instance [TriggerMng]", "contents": "TriggerMng._instance" },{ "trigger": "s_widgetFromJsonFile(char:#char):ret (return value: ccui.Widget):#Widget [GUIReader]", "contents": "widgetFromJsonFile(${1:char:#char})" },{ "trigger": "s_getFilePath():ret (return value: string):#string [GUIReader]", "contents": "getFilePath()" },{ "trigger": "s_getVersionInteger(char:#char):ret (return value: int):#int [GUIReader]", "contents": "getVersionInteger(${1:char:#char})" },{ "trigger": "s_destroyInstance():void [GUIReader]", "contents": "destroyInstance()" },{ "trigger": "s_getInstance():ret (return value: ccs.GUIReader):#GUIReader [GUIReader]", "contents": "getInstance()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseExponentialOut):#EaseExponentialOut [EaseExponentialOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseExponentialOut):#EaseExponentialOut [EaseExponentialOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseExponentialOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.ActionEase):#ActionEase [EaseExponentialOut]", "contents": "reverse()" },{ "trigger": "spm_Skeleton [sp]", "contents": "sp.Skeleton" },{ "trigger": "spm_SkeletonAnimation [sp]", "contents": "sp.SkeletonAnimation" },{ "trigger": "s_create(float:#float,size:#size_table):ret (return value: cc.PageTurn3D):#PageTurn3D [PageTurn3D]", "contents": "create(${1:float:#float},${2:size:#size_table})" },{ "trigger": "s_clone():ret (return value: cc.PageTurn3D):#PageTurn3D [PageTurn3D]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [PageTurn3D]", "contents": "update(${1:float:#float})" },{ "trigger": "s_isInverted():ret (return value: bool):#bool [ClippingNode]", "contents": "isInverted()" },{ "trigger": "s_setInverted(bool:#bool):void [ClippingNode]", "contents": "setInverted(${1:bool:#bool})" },{ "trigger": "s_setStencil(node:#cc.Node):void [ClippingNode]", "contents": "setStencil(${1:node:#cc.Node})" },{ "trigger": "s_getAlphaThreshold():ret (return value: float):#float [ClippingNode]", "contents": "getAlphaThreshold()" },{ "trigger": "s_getStencil():ret (return value: cc.Node):#Node [ClippingNode]", "contents": "getStencil()" },{ "trigger": "s_setAlphaThreshold(float:#float):void [ClippingNode]", "contents": "setAlphaThreshold(${1:float:#float})" },{ "trigger": "f_create(cc.Node):ret (retunr value: cc.ClippingNode):#ClippingNode [ClippingNode]", "contents": "create(${1:cc.Node})" },{ "trigger": "f_create():ret (retunr value: cc.ClippingNode):#ClippingNode [ClippingNode]", "contents": "create(${1:})" },{ "trigger": "s_create(node:#cc.Node):ret (retunr value: cc.ClippingNode):#ClippingNode [ClippingNode]", "contents": "create(${1:node:#cc.Node})" },{ "trigger": "s_easeActionWithAction(actioninterval:#cc.ActionInterval):ret (return value: cc.ActionInterval):#ActionInterval [TransitionShrinkGrow]", "contents": "easeActionWithAction(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionShrinkGrow):#TransitionShrinkGrow [TransitionShrinkGrow]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "ccm_KEY_NONE [KeyCode]", "contents": "cc.KEY_NONE" },{ "trigger": "ccm_KEY_PAUSE [KeyCode]", "contents": "cc.KEY_PAUSE" },{ "trigger": "ccm_KEY_SCROLL_LOCK [KeyCode]", "contents": "cc.KEY_SCROLL_LOCK" },{ "trigger": "ccm_KEY_PRINT [KeyCode]", "contents": "cc.KEY_PRINT" },{ "trigger": "ccm_KEY_SYSREQ [KeyCode]", "contents": "cc.KEY_SYSREQ" },{ "trigger": "ccm_KEY_BREAK [KeyCode]", "contents": "cc.KEY_BREAK" },{ "trigger": "ccm_KEY_ESCAPE [KeyCode]", "contents": "cc.KEY_ESCAPE" },{ "trigger": "ccm_KEY_BACKSPACE [KeyCode]", "contents": "cc.KEY_BACKSPACE" },{ "trigger": "ccm_KEY_TAB [KeyCode]", "contents": "cc.KEY_TAB" },{ "trigger": "ccm_KEY_BACK_TAB [KeyCode]", "contents": "cc.KEY_BACK_TAB" },{ "trigger": "ccm_KEY_RETURN [KeyCode]", "contents": "cc.KEY_RETURN" },{ "trigger": "ccm_KEY_CAPS_LOCK [KeyCode]", "contents": "cc.KEY_CAPS_LOCK" },{ "trigger": "ccm_KEY_SHIFT [KeyCode]", "contents": "cc.KEY_SHIFT" },{ "trigger": "ccm_KEY_CTRL [KeyCode]", "contents": "cc.KEY_CTRL" },{ "trigger": "ccm_KEY_ALT [KeyCode]", "contents": "cc.KEY_ALT" },{ "trigger": "ccm_KEY_MENU [KeyCode]", "contents": "cc.KEY_MENU" },{ "trigger": "ccm_KEY_HYPER [KeyCode]", "contents": "cc.KEY_HYPER" },{ "trigger": "ccm_KEY_INSERT [KeyCode]", "contents": "cc.KEY_INSERT" },{ "trigger": "ccm_KEY_HOME [KeyCode]", "contents": "cc.KEY_HOME" },{ "trigger": "ccm_KEY_PG_UP [KeyCode]", "contents": "cc.KEY_PG_UP" },{ "trigger": "ccm_KEY_DELETE [KeyCode]", "contents": "cc.KEY_DELETE" },{ "trigger": "ccm_KEY_END [KeyCode]", "contents": "cc.KEY_END" },{ "trigger": "ccm_KEY_PG_DOWN [KeyCode]", "contents": "cc.KEY_PG_DOWN" },{ "trigger": "ccm_KEY_KP_MINUS [KeyCode]", "contents": "cc.KEY_KP_MINUS" },{ "trigger": "ccm_KEY_KP_ENTER [KeyCode]", "contents": "cc.KEY_KP_ENTER" },{ "trigger": "ccm_KEY_KP_UP [KeyCode]", "contents": "cc.KEY_KP_UP" },{ "trigger": "ccm_KEY_DOWN_ARROW [KeyCode]", "contents": "cc.KEY_DOWN_ARROW" },{ "trigger": "ccm_KEY_NUM_LOCK [KeyCode]", "contents": "cc.KEY_NUM_LOCK" },{ "trigger": "ccm_KEY_KP_PLUS [KeyCode]", "contents": "cc.KEY_KP_PLUS" },{ "trigger": "ccm_KEY_KP_MULTIPLY [KeyCode]", "contents": "cc.KEY_KP_MULTIPLY" },{ "trigger": "ccm_KEY_KP_DIVIDE [KeyCode]", "contents": "cc.KEY_KP_DIVIDE" },{ "trigger": "ccm_KEY_KP_HOME [KeyCode]", "contents": "cc.KEY_KP_HOME" },{ "trigger": "ccm_KEY_KP_PG_UP [KeyCode]", "contents": "cc.KEY_KP_PG_UP" },{ "trigger": "ccm_KEY_KP_LEFT [KeyCode]", "contents": "cc.KEY_KP_LEFT" },{ "trigger": "ccm_KEY_KP_FIVE [KeyCode]", "contents": "cc.KEY_KP_FIVE" },{ "trigger": "ccm_KEY_KP_RIGHT [KeyCode]", "contents": "cc.KEY_KP_RIGHT" },{ "trigger": "ccm_KEY_KP_END [KeyCode]", "contents": "cc.KEY_KP_END" },{ "trigger": "ccm_KEY_KP_DOWN [KeyCode]", "contents": "cc.KEY_KP_DOWN" },{ "trigger": "ccm_KEY_KP_PG_DOWN [KeyCode]", "contents": "cc.KEY_KP_PG_DOWN" },{ "trigger": "ccm_KEY_KP_INSERT [KeyCode]", "contents": "cc.KEY_KP_INSERT" },{ "trigger": "ccm_KEY_KP_DELETE [KeyCode]", "contents": "cc.KEY_KP_DELETE" },{ "trigger": "ccm_KEY_F1 [KeyCode]", "contents": "cc.KEY_F1" },{ "trigger": "ccm_KEY_F2 [KeyCode]", "contents": "cc.KEY_F2" },{ "trigger": "ccm_KEY_F3 [KeyCode]", "contents": "cc.KEY_F3" },{ "trigger": "ccm_KEY_F4 [KeyCode]", "contents": "cc.KEY_F4" },{ "trigger": "ccm_KEY_F5 [KeyCode]", "contents": "cc.KEY_F5" },{ "trigger": "ccm_KEY_F6 [KeyCode]", "contents": "cc.KEY_F6" },{ "trigger": "ccm_KEY_F7 [KeyCode]", "contents": "cc.KEY_F7" },{ "trigger": "ccm_KEY_F8 [KeyCode]", "contents": "cc.KEY_F8" },{ "trigger": "ccm_KEY_F9 [KeyCode]", "contents": "cc.KEY_F9" },{ "trigger": "ccm_KEY_F10 [KeyCode]", "contents": "cc.KEY_F10" },{ "trigger": "ccm_KEY_F11 [KeyCode]", "contents": "cc.KEY_F11" },{ "trigger": "ccm_KEY_F12 [KeyCode]", "contents": "cc.KEY_F12" },{ "trigger": "ccm_KEY_SPACE [KeyCode]", "contents": "cc.KEY_SPACE" },{ "trigger": "ccm_KEY_EXCLAM [KeyCode]", "contents": "cc.KEY_EXCLAM" },{ "trigger": "ccm_KEY_QUOTE [KeyCode]", "contents": "cc.KEY_QUOTE" },{ "trigger": "ccm_KEY_NUMBER [KeyCode]", "contents": "cc.KEY_NUMBER" },{ "trigger": "ccm_KEY_DOLLAR [KeyCode]", "contents": "cc.KEY_DOLLAR" },{ "trigger": "ccm_KEY_PERCENT [KeyCode]", "contents": "cc.KEY_PERCENT" },{ "trigger": "ccm_KEY_CIRCUMFLEX [KeyCode]", "contents": "cc.KEY_CIRCUMFLEX" },{ "trigger": "ccm_KEY_AMPERSAND [KeyCode]", "contents": "cc.KEY_AMPERSAND" },{ "trigger": "ccm_KEY_APOSTROPHE [KeyCode]", "contents": "cc.KEY_APOSTROPHE" },{ "trigger": "ccm_KEY_LEFT_PARENTHESIS [KeyCode]", "contents": "cc.KEY_LEFT_PARENTHESIS" },{ "trigger": "ccm_KEY_RIGHT_PARENTHESIS [KeyCode]", "contents": "cc.KEY_RIGHT_PARENTHESIS" },{ "trigger": "ccm_KEY_ASTERISK [KeyCode]", "contents": "cc.KEY_ASTERISK" },{ "trigger": "ccm_KEY_PLUS [KeyCode]", "contents": "cc.KEY_PLUS" },{ "trigger": "ccm_KEY_COMMA [KeyCode]", "contents": "cc.KEY_COMMA" },{ "trigger": "ccm_KEY_MINUS [KeyCode]", "contents": "cc.KEY_MINUS" },{ "trigger": "ccm_KEY_PERIOD [KeyCode]", "contents": "cc.KEY_PERIOD" },{ "trigger": "ccm_KEY_SLASH [KeyCode]", "contents": "cc.KEY_SLASH" },{ "trigger": "ccm_KEY_0 [KeyCode]", "contents": "cc.KEY_0" },{ "trigger": "ccm_KEY_1 [KeyCode]", "contents": "cc.KEY_1" },{ "trigger": "ccm_KEY_2 [KeyCode]", "contents": "cc.KEY_2" },{ "trigger": "ccm_KEY_3 [KeyCode]", "contents": "cc.KEY_3" },{ "trigger": "ccm_KEY_4 [KeyCode]", "contents": "cc.KEY_4" },{ "trigger": "ccm_KEY_5 [KeyCode]", "contents": "cc.KEY_5" },{ "trigger": "ccm_KEY_6 [KeyCode]", "contents": "cc.KEY_6" },{ "trigger": "ccm_KEY_7 [KeyCode]", "contents": "cc.KEY_7" },{ "trigger": "ccm_KEY_8 [KeyCode]", "contents": "cc.KEY_8" },{ "trigger": "ccm_KEY_9 [KeyCode]", "contents": "cc.KEY_9" },{ "trigger": "ccm_KEY_COLON [KeyCode]", "contents": "cc.KEY_COLON" },{ "trigger": "ccm_KEY_SEMICOLON [KeyCode]", "contents": "cc.KEY_SEMICOLON" },{ "trigger": "ccm_KEY_LESS_THAN [KeyCode]", "contents": "cc.KEY_LESS_THAN" },{ "trigger": "ccm_KEY_EQUAL [KeyCode]", "contents": "cc.KEY_EQUAL" },{ "trigger": "ccm_KEY_GREATER_THAN [KeyCode]", "contents": "cc.KEY_GREATER_THAN" },{ "trigger": "ccm_KEY_QUESTION [KeyCode]", "contents": "cc.KEY_QUESTION" },{ "trigger": "ccm_KEY_AT [KeyCode]", "contents": "cc.KEY_AT" },{ "trigger": "ccm_KEY_CAPITAL_A [KeyCode]", "contents": "cc.KEY_CAPITAL_A" },{ "trigger": "ccm_KEY_CAPITAL_B [KeyCode]", "contents": "cc.KEY_CAPITAL_B" },{ "trigger": "ccm_KEY_CAPITAL_C [KeyCode]", "contents": "cc.KEY_CAPITAL_C" },{ "trigger": "ccm_KEY_CAPITAL_D [KeyCode]", "contents": "cc.KEY_CAPITAL_D" },{ "trigger": "ccm_KEY_CAPITAL_E [KeyCode]", "contents": "cc.KEY_CAPITAL_E" },{ "trigger": "ccm_KEY_CAPITAL_B [KeyCode]", "contents": "cc.KEY_CAPITAL_B" },{ "trigger": "ccm_KEY_CAPITAL_F [KeyCode]", "contents": "cc.KEY_CAPITAL_F" },{ "trigger": "ccm_KEY_CAPITAL_G [KeyCode]", "contents": "cc.KEY_CAPITAL_G" },{ "trigger": "ccm_KEY_CAPITAL_H [KeyCode]", "contents": "cc.KEY_CAPITAL_H" },{ "trigger": "ccm_KEY_CAPITAL_I [KeyCode]", "contents": "cc.KEY_CAPITAL_I" },{ "trigger": "ccm_KEY_CAPITAL_J [KeyCode]", "contents": "cc.KEY_CAPITAL_J" },{ "trigger": "ccm_KEY_CAPITAL_K [KeyCode]", "contents": "cc.KEY_CAPITAL_K" },{ "trigger": "ccm_KEY_CAPITAL_L [KeyCode]", "contents": "cc.KEY_CAPITAL_L" },{ "trigger": "ccm_KEY_CAPITAL_M [KeyCode]", "contents": "cc.KEY_CAPITAL_M" },{ "trigger": "ccm_KEY_CAPITAL_N [KeyCode]", "contents": "cc.KEY_CAPITAL_N" },{ "trigger": "ccm_KEY_CAPITAL_O [KeyCode]", "contents": "cc.KEY_CAPITAL_O" },{ "trigger": "ccm_KEY_CAPITAL_P [KeyCode]", "contents": "cc.KEY_CAPITAL_P" },{ "trigger": "ccm_KEY_CAPITAL_Q [KeyCode]", "contents": "cc.KEY_CAPITAL_Q" },{ "trigger": "ccm_KEY_CAPITAL_R [KeyCode]", "contents": "cc.KEY_CAPITAL_R" },{ "trigger": "ccm_KEY_CAPITAL_S [KeyCode]", "contents": "cc.KEY_CAPITAL_S" },{ "trigger": "ccm_KEY_CAPITAL_T [KeyCode]", "contents": "cc.KEY_CAPITAL_T" },{ "trigger": "ccm_KEY_CAPITAL_U [KeyCode]", "contents": "cc.KEY_CAPITAL_U" },{ "trigger": "ccm_KEY_CAPITAL_V [KeyCode]", "contents": "cc.KEY_CAPITAL_V" },{ "trigger": "ccm_KEY_CAPITAL_W [KeyCode]", "contents": "cc.KEY_CAPITAL_W" },{ "trigger": "ccm_KEY_CAPITAL_X [KeyCode]", "contents": "cc.KEY_CAPITAL_X" },{ "trigger": "ccm_KEY_CAPITAL_Y [KeyCode]", "contents": "cc.KEY_CAPITAL_Y" },{ "trigger": "ccm_KEY_CAPITAL_Z [KeyCode]", "contents": "cc.KEY_CAPITAL_Z" },{ "trigger": "ccm_KEY_LEFT_BRACKET [KeyCode]", "contents": "cc.KEY_LEFT_BRACKET" },{ "trigger": "ccm_KEY_BACK_SLASH [KeyCode]", "contents": "cc.KEY_BACK_SLASH" },{ "trigger": "ccm_KEY_RIGHT_BRACKET [KeyCode]", "contents": "cc.KEY_RIGHT_BRACKET" },{ "trigger": "ccm_KEY_UNDERSCORE [KeyCode]", "contents": "cc.KEY_UNDERSCORE" },{ "trigger": "ccm_KEY_GRAVE [KeyCode]", "contents": "cc.KEY_GRAVE" },{ "trigger": "ccm_KEY_A [KeyCode]", "contents": "cc.KEY_A" },{ "trigger": "ccm_KEY_B [KeyCode]", "contents": "cc.KEY_B" },{ "trigger": "ccm_KEY_C [KeyCode]", "contents": "cc.KEY_C" },{ "trigger": "ccm_KEY_D [KeyCode]", "contents": "cc.KEY_D" },{ "trigger": "ccm_KEY_E [KeyCode]", "contents": "cc.KEY_E" },{ "trigger": "ccm_KEY_F [KeyCode]", "contents": "cc.KEY_F" },{ "trigger": "ccm_KEY_G [KeyCode]", "contents": "cc.KEY_G" },{ "trigger": "ccm_KEY_H [KeyCode]", "contents": "cc.KEY_H" },{ "trigger": "ccm_KEY_I [KeyCode]", "contents": "cc.KEY_I" },{ "trigger": "ccm_KEY_J [KeyCode]", "contents": "cc.KEY_J" },{ "trigger": "ccm_KEY_K [KeyCode]", "contents": "cc.KEY_K" },{ "trigger": "ccm_KEY_L [KeyCode]", "contents": "cc.KEY_L" },{ "trigger": "ccm_KEY_M [KeyCode]", "contents": "cc.KEY_M" },{ "trigger": "ccm_KEY_N [KeyCode]", "contents": "cc.KEY_N" },{ "trigger": "ccm_KEY_K [KeyCode]", "contents": "cc.KEY_K" },{ "trigger": "ccm_KEY_O [KeyCode]", "contents": "cc.KEY_O" },{ "trigger": "ccm_KEY_P [KeyCode]", "contents": "cc.KEY_P" },{ "trigger": "ccm_KEY_Q [KeyCode]", "contents": "cc.KEY_Q" },{ "trigger": "ccm_KEY_R [KeyCode]", "contents": "cc.KEY_R" },{ "trigger": "ccm_KEY_S [KeyCode]", "contents": "cc.KEY_S" },{ "trigger": "ccm_KEY_T [KeyCode]", "contents": "cc.KEY_T" },{ "trigger": "ccm_KEY_U [KeyCode]", "contents": "cc.KEY_U" },{ "trigger": "ccm_KEY_V [KeyCode]", "contents": "cc.KEY_V" },{ "trigger": "ccm_KEY_W [KeyCode]", "contents": "cc.KEY_W" },{ "trigger": "ccm_KEY_X [KeyCode]", "contents": "cc.KEY_X" },{ "trigger": "ccm_KEY_Y [KeyCode]", "contents": "cc.KEY_Y" },{ "trigger": "ccm_KEY_Z [KeyCode]", "contents": "cc.KEY_Z" },{ "trigger": "ccm_KEY_LEFT_BRACE [KeyCode]", "contents": "cc.KEY_LEFT_BRACE" },{ "trigger": "ccm_KEY_BAR [KeyCode]", "contents": "cc.KEY_BAR" },{ "trigger": "ccm_KEY_RIGHT_BRACE [KeyCode]", "contents": "cc.KEY_RIGHT_BRACE" },{ "trigger": "ccm_KEY_TILDE [KeyCode]", "contents": "cc.KEY_TILDE" },{ "trigger": "ccm_KEY_EURO [KeyCode]", "contents": "cc.KEY_EURO" },{ "trigger": "ccm_KEY_POUND [KeyCode]", "contents": "cc.KEY_POUND" },{ "trigger": "ccm_KEY_YEN [KeyCode]", "contents": "cc.KEY_YEN" },{ "trigger": "ccm_KEY_MIDDLE_DOT [KeyCode]", "contents": "cc.KEY_MIDDLE_DOT" },{ "trigger": "ccm_KEY_SEARCH [KeyCode]", "contents": "cc.KEY_SEARCH" },{ "trigger": "LinearGravitym_none [LinearGravity]", "contents": "LinearGravity.none" },{ "trigger": "LinearGravitym_left [LinearGravity]", "contents": "LinearGravity.left" },{ "trigger": "LinearGravitym_top [LinearGravity]", "contents": "LinearGravity.top" },{ "trigger": "LinearGravitym_right [LinearGravity]", "contents": "LinearGravity.right" },{ "trigger": "LinearGravitym_bottom [LinearGravity]", "contents": "LinearGravity.bottom" },{ "trigger": "LinearGravitym_centerVertical [LinearGravity]", "contents": "LinearGravity.centerVertical" },{ "trigger": "LinearGravitym_centerHorizontal [LinearGravity]", "contents": "LinearGravity.centerHorizontal" },{ "trigger": "TouchEventTypem_began [TouchEventType]", "contents": "TouchEventType.began" },{ "trigger": "TouchEventTypem_moved [TouchEventType]", "contents": "TouchEventType.moved" },{ "trigger": "TouchEventTypem_ended [TouchEventType]", "contents": "TouchEventType.ended" },{ "trigger": "TouchEventTypem_canceled [TouchEventType]", "contents": "TouchEventType.canceled" },{ "trigger": "s_clone():ret (return value: ccui.LayoutParameter):#LayoutParameter [LayoutParameter]", "contents": "clone()" },{ "trigger": "s_getLayoutType():ret (return value: ccui.LayoutParameter::Type):#LayoutParameter::Type [LayoutParameter]", "contents": "getLayoutType()" },{ "trigger": "s_createCloneInstance():ret (return value: ccui.LayoutParameter):#LayoutParameter [LayoutParameter]", "contents": "createCloneInstance()" },{ "trigger": "s_copyProperties(layoutparameter:#ccui.LayoutParameter):void [LayoutParameter]", "contents": "copyProperties(${1:layoutparameter:#ccui.LayoutParameter})" },{ "trigger": "s_create():ret (return value: ccui.LayoutParameter):#LayoutParameter [LayoutParameter]", "contents": "create()" },{ "trigger": "s_LayoutParameter():void [LayoutParameter]", "contents": "LayoutParameter()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseBackInOut):#EaseBackInOut [EaseBackInOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseBackInOut):#EaseBackInOut [EaseBackInOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseBackInOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseBackInOut):#EaseBackInOut [EaseBackInOut]", "contents": "reverse()" },{ "trigger": "s_easeActionWithAction(actioninterval:#cc.ActionInterval):ret (return value: cc.ActionInterval):#ActionInterval [TransitionTurnOffTiles]", "contents": "easeActionWithAction(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionTurnOffTiles):#TransitionTurnOffTiles [TransitionTurnOffTiles]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [TransitionTurnOffTiles]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_setTarget(node:#cc.Node):void [NodeGrid]", "contents": "setTarget(${1:node:#cc.Node})" },{ "trigger": "f_getGrid():ret (retunr value: cc.GridBase):#GridBase [NodeGrid]", "contents": "getGrid(${1:})" },{ "trigger": "f_getGrid():ret (retunr value: cc.GridBase):#GridBase [NodeGrid]", "contents": "getGrid(${1:})" },{ "trigger": "s_getGrid():ret (retunr value: cc.GridBase):#GridBase [NodeGrid]", "contents": "getGrid()" },{ "trigger": "s_setGrid(gridbase:#cc.GridBase):void [NodeGrid]", "contents": "setGrid(${1:gridbase:#cc.GridBase})" },{ "trigger": "s_create():ret (return value: cc.NodeGrid):#NodeGrid [NodeGrid]", "contents": "create()" },{ "trigger": "s_stop():void [Console]", "contents": "stop()" },{ "trigger": "s_listenOnTCP(int:#int):ret (return value: bool):#bool [Console]", "contents": "listenOnTCP(${1:int:#int})" },{ "trigger": "s_listenOnFileDescriptor(int:#int):ret (return value: bool):#bool [Console]", "contents": "listenOnFileDescriptor(${1:int:#int})" },{ "trigger": "s_log(char:#char):void [Console]", "contents": "log(${1:char:#char})" },{ "trigger": "s_setSizePercent(vec2:#cc.Vec2):void [Widget]", "contents": "setSizePercent(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getCustomSize():ret (return value: size_table):#size_table [Widget]", "contents": "getCustomSize()" },{ "trigger": "s_setFlippedY(bool:#bool):void [Widget]", "contents": "setFlippedY(${1:bool:#bool})" },{ "trigger": "s_setFlippedX(bool:#bool):void [Widget]", "contents": "setFlippedX(${1:bool:#bool})" },{ "trigger": "s_getLeftInParent():ret (return value: float):#float [Widget]", "contents": "getLeftInParent()" },{ "trigger": "s_getTouchEndPos():ret (return value: cc.Vec2):#Vec2 [Widget]", "contents": "getTouchEndPos()" },{ "trigger": "s_setPositionPercent(vec2:#cc.Vec2):void [Widget]", "contents": "setPositionPercent(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getLayoutSize():ret (return value: size_table):#size_table [Widget]", "contents": "getLayoutSize()" },{ "trigger": "s_setHighlighted(bool:#bool):void [Widget]", "contents": "setHighlighted(${1:bool:#bool})" },{ "trigger": "s_setPositionType(positiontype:#ccui.Widget::PositionType):void [Widget]", "contents": "setPositionType(${1:positiontype:#ccui.Widget::PositionType})" },{ "trigger": "s_getName():ret (return value: string):#string [Widget]", "contents": "getName()" },{ "trigger": "s_isIgnoreContentAdaptWithSize():ret (return value: bool):#bool [Widget]", "contents": "isIgnoreContentAdaptWithSize()" },{ "trigger": "s_getBottomInParent():ret (return value: float):#float [Widget]", "contents": "getBottomInParent()" },{ "trigger": "s_isHighlighted():ret (return value: bool):#bool [Widget]", "contents": "isHighlighted()" },{ "trigger": "s_getLayoutParameter(type:#ccui.LayoutParameter::Type):ret (return value: ccui.LayoutParameter):#LayoutParameter [Widget]", "contents": "getLayoutParameter(${1:type:#ccui.LayoutParameter::Type})" },{ "trigger": "s_getPositionType():ret (return value: ccui.Widget::PositionType):#Widget::PositionType [Widget]", "contents": "getPositionType()" },{ "trigger": "s_getChildByName(str:#string):ret (return value: ccui.Widget):#Widget [Widget]", "contents": "getChildByName(${1:str:#string})" },{ "trigger": "s_isEnabled():ret (return value: bool):#bool [Widget]", "contents": "isEnabled()" },{ "trigger": "s_isFocused():ret (return value: bool):#bool [Widget]", "contents": "isFocused()" },{ "trigger": "s_getVirtualRendererSize():ret (return value: size_table):#size_table [Widget]", "contents": "getVirtualRendererSize()" },{ "trigger": "s_findNextFocusedWidget(focusdirection:#ccui.Widget::FocusDirection,widget:#ccui.Widget):ret (return value: ccui.Widget):#Widget [Widget]", "contents": "findNextFocusedWidget(${1:focusdirection:#ccui.Widget::FocusDirection},${2:widget:#ccui.Widget})" },{ "trigger": "s_isTouchEnabled():ret (return value: bool):#bool [Widget]", "contents": "isTouchEnabled()" },{ "trigger": "s_getActionTag():ret (return value: int):#int [Widget]", "contents": "getActionTag()" },{ "trigger": "s_getWorldPosition():ret (return value: cc.Vec2):#Vec2 [Widget]", "contents": "getWorldPosition()" },{ "trigger": "s_setFocused(bool:#bool):void [Widget]", "contents": "setFocused(${1:bool:#bool})" },{ "trigger": "s_setTouchEnabled(bool:#bool):void [Widget]", "contents": "setTouchEnabled(${1:bool:#bool})" },{ "trigger": "s_clone():ret (return value: ccui.Widget):#Widget [Widget]", "contents": "clone()" },{ "trigger": "s_getTouchMovePos():ret (return value: cc.Vec2):#Vec2 [Widget]", "contents": "getTouchMovePos()" },{ "trigger": "s_setEnabled(bool:#bool):void [Widget]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_getVirtualRenderer():ret (return value: cc.Node):#Node [Widget]", "contents": "getVirtualRenderer()" },{ "trigger": "s_setBrightStyle(brightstyle:#ccui.Widget::BrightStyle):void [Widget]", "contents": "setBrightStyle(${1:brightstyle:#ccui.Widget::BrightStyle})" },{ "trigger": "s_setName(str:#string):void [Widget]", "contents": "setName(${1:str:#string})" },{ "trigger": "s_setLayoutParameter(layoutparameter:#ccui.LayoutParameter):void [Widget]", "contents": "setLayoutParameter(${1:layoutparameter:#ccui.LayoutParameter})" },{ "trigger": "s_getSizePercent():ret (return value: cc.Vec2):#Vec2 [Widget]", "contents": "getSizePercent()" },{ "trigger": "s_getTouchStartPos():ret (return value: cc.Vec2):#Vec2 [Widget]", "contents": "getTouchStartPos()" },{ "trigger": "s_setFocusEnabled(bool:#bool):void [Widget]", "contents": "setFocusEnabled(${1:bool:#bool})" },{ "trigger": "s_setActionTag(int:#int):void [Widget]", "contents": "setActionTag(${1:int:#int})" },{ "trigger": "s_isBright():ret (return value: bool):#bool [Widget]", "contents": "isBright()" },{ "trigger": "s_clippingParentAreaContainPoint(vec2:#cc.Vec2):ret (return value: bool):#bool [Widget]", "contents": "clippingParentAreaContainPoint(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getCurrentFocusedWidget(bool:#bool):ret (return value: ccui.Widget):#Widget [Widget]", "contents": "getCurrentFocusedWidget(${1:bool:#bool})" },{ "trigger": "s_getTopInParent():ret (return value: float):#float [Widget]", "contents": "getTopInParent()" },{ "trigger": "s_requestFocus():void [Widget]", "contents": "requestFocus()" },{ "trigger": "f_updateSizeAndPosition(size_table):void [Widget]", "contents": "updateSizeAndPosition(${1:size_table})" },{ "trigger": "f_updateSizeAndPosition():void [Widget]", "contents": "updateSizeAndPosition(${1:})" },{ "trigger": "s_updateSizeAndPosition(size:#size_table):void [Widget]", "contents": "updateSizeAndPosition(${1:size:#size_table})" },{ "trigger": "s_getSize():ret (return value: size_table):#size_table [Widget]", "contents": "getSize()" },{ "trigger": "s_getRightInParent():ret (return value: float):#float [Widget]", "contents": "getRightInParent()" },{ "trigger": "s_getSizeType():ret (return value: ccui.Widget::SizeType):#Widget::SizeType [Widget]", "contents": "getSizeType()" },{ "trigger": "s_ignoreContentAdaptWithSize(bool:#bool):void [Widget]", "contents": "ignoreContentAdaptWithSize(${1:bool:#bool})" },{ "trigger": "s_addTouchEventListener(func:#function):void [Widget]", "contents": "addTouchEventListener(${1:func:#function})" },{ "trigger": "s_getPositionPercent():ret (return value: cc.Vec2):#Vec2 [Widget]", "contents": "getPositionPercent()" },{ "trigger": "s_hitTest(vec2:#cc.Vec2):ret (return value: bool):#bool [Widget]", "contents": "hitTest(${1:vec2:#cc.Vec2})" },{ "trigger": "s_isFlippedX():ret (return value: bool):#bool [Widget]", "contents": "isFlippedX()" },{ "trigger": "s_isFlippedY():ret (return value: bool):#bool [Widget]", "contents": "isFlippedY()" },{ "trigger": "s_setSizeType(sizetype:#ccui.Widget::SizeType):void [Widget]", "contents": "setSizeType(${1:sizetype:#ccui.Widget::SizeType})" },{ "trigger": "s_checkChildInfo(int:#int,widget:#ccui.Widget,vec2:#cc.Vec2):void [Widget]", "contents": "checkChildInfo(${1:int:#int},${2:widget:#ccui.Widget},${3:vec2:#cc.Vec2})" },{ "trigger": "s_setSize(size:#size_table):void [Widget]", "contents": "setSize(${1:size:#size_table})" },{ "trigger": "s_setBright(bool:#bool):void [Widget]", "contents": "setBright(${1:bool:#bool})" },{ "trigger": "s_isFocusEnabled():ret (return value: bool):#bool [Widget]", "contents": "isFocusEnabled()" },{ "trigger": "s_create():ret (return value: ccui.Widget):#Widget [Widget]", "contents": "create()" },{ "trigger": "s_setColor(color3b:#color3b_table):void [Widget]", "contents": "setColor(${1:color3b:#color3b_table})" },{ "trigger": "s_getColor():ret (return value: color3b_table):#color3b_table [Widget]", "contents": "getColor()" },{ "trigger": "s_setOpacity(char char:#unsigned):void [Widget]", "contents": "setOpacity(${1:char char:#unsigned})" },{ "trigger": "s_getOpacity():unsigned [Widget]", "contents": "getOpacity()" },{ "trigger": "s_setPosition(vec2:#cc.Vec2):void [Widget]", "contents": "setPosition(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getDescription():ret (return value: string):#string [Widget]", "contents": "getDescription()" },{ "trigger": "s_Widget():void [Widget]", "contents": "Widget()" },{ "trigger": "s_setDistance(float:#float):void [PhysicsJointDistance]", "contents": "setDistance(${1:float:#float})" },{ "trigger": "s_getDistance():ret (return value: float):#float [PhysicsJointDistance]", "contents": "getDistance()" },{ "trigger": "s_construct(physicsbody:#cc.PhysicsBody,physicsbody:#cc.PhysicsBody,vec2:#cc.Vec2,vec2:#cc.Vec2):ret (return value: cc.PhysicsJointDistance):#PhysicsJointDistance [PhysicsJointDistance]", "contents": "construct(${1:physicsbody:#cc.PhysicsBody},${2:physicsbody:#cc.PhysicsBody},${3:vec2:#cc.Vec2},${4:vec2:#cc.Vec2})" },{ "trigger": "LayoutBackGroundColorTypem_none [LayoutBackGroundColorType]", "contents": "LayoutBackGroundColorType.none" },{ "trigger": "LayoutBackGroundColorTypem_solid [LayoutBackGroundColorType]", "contents": "LayoutBackGroundColorType.solid" },{ "trigger": "LayoutBackGroundColorTypem_gradient [LayoutBackGroundColorType]", "contents": "LayoutBackGroundColorType.gradient" },{ "trigger": "s_getPreviousLocationInView():ret (return value: cc.Vec2):#Vec2 [Touch]", "contents": "getPreviousLocationInView()" },{ "trigger": "s_getLocation():ret (return value: cc.Vec2):#Vec2 [Touch]", "contents": "getLocation()" },{ "trigger": "s_getDelta():ret (return value: cc.Vec2):#Vec2 [Touch]", "contents": "getDelta()" },{ "trigger": "s_getStartLocationInView():ret (return value: cc.Vec2):#Vec2 [Touch]", "contents": "getStartLocationInView()" },{ "trigger": "s_getStartLocation():ret (return value: cc.Vec2):#Vec2 [Touch]", "contents": "getStartLocation()" },{ "trigger": "s_getID():ret (return value: int):#int [Touch]", "contents": "getID()" },{ "trigger": "s_setTouchInfo(int:#int,float:#float,float:#float):void [Touch]", "contents": "setTouchInfo(${1:int:#int},${2:float:#float},${3:float:#float})" },{ "trigger": "s_getLocationInView():ret (return value: cc.Vec2):#Vec2 [Touch]", "contents": "getLocationInView()" },{ "trigger": "s_getPreviousLocation():ret (return value: cc.Vec2):#Vec2 [Touch]", "contents": "getPreviousLocation()" },{ "trigger": "s_Touch():void [Touch]", "contents": "Touch()" },{ "trigger": "s_create(float:#float,vec2:#cc.Vec2,float:#float,int:#int):ret (return value: cc.JumpTo):#JumpTo [JumpTo]", "contents": "create(${1:float:#float},${2:vec2:#cc.Vec2},${3:float:#float},${4:int:#int})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [JumpTo]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.JumpTo):#JumpTo [JumpTo]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.JumpTo):#JumpTo [JumpTo]", "contents": "reverse()" },{ "trigger": "f_create(cc.ActionInterval):ret (retunr value: cc.EaseElasticInOut):#EaseElasticInOut [EaseElasticInOut]", "contents": "create(${1:cc.ActionInterval})" },{ "trigger": "f_create(cc.ActionInterval, float):ret (retunr value: cc.EaseElasticInOut):#EaseElasticInOut [EaseElasticInOut]", "contents": "create(${1:cc.ActionInterval},${2: float})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval,float:#float):ret (retunr value: cc.EaseElasticInOut):#EaseElasticInOut [EaseElasticInOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval},${2:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.EaseElasticInOut):#EaseElasticInOut [EaseElasticInOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseElasticInOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseElasticInOut):#EaseElasticInOut [EaseElasticInOut]", "contents": "reverse()" },{ "trigger": "s_getAmplitudeRate():ret (return value: float):#float [Waves]", "contents": "getAmplitudeRate()" },{ "trigger": "s_setAmplitude(float:#float):void [Waves]", "contents": "setAmplitude(${1:float:#float})" },{ "trigger": "s_setAmplitudeRate(float:#float):void [Waves]", "contents": "setAmplitudeRate(${1:float:#float})" },{ "trigger": "s_getAmplitude():ret (return value: float):#float [Waves]", "contents": "getAmplitude()" },{ "trigger": "s_create(float:#float,size:#size_table,int int:#unsigned,float:#float,bool:#bool,bool:#bool):ret (return value: cc.Waves):#Waves [Waves]", "contents": "create(${1:float:#float},${2:size:#size_table},${3:int int:#unsigned},${4:float:#float},${5:bool:#bool},${6:bool:#bool})" },{ "trigger": "s_clone():ret (return value: cc.Waves):#Waves [Waves]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [Waves]", "contents": "update(${1:float:#float})" },{ "trigger": "s_create():ret (return value: cc.ParticleSmoke):#ParticleSmoke [ParticleSmoke]", "contents": "create()" },{ "trigger": "s_createWithTotalParticles(int:#int):ret (return value: cc.ParticleSmoke):#ParticleSmoke [ParticleSmoke]", "contents": "createWithTotalParticles(${1:int:#int})" },{ "trigger": "s_addBoneData(bonedata:#ccs.BoneData):void [ArmatureData]", "contents": "addBoneData(${1:bonedata:#ccs.BoneData})" },{ "trigger": "s_init():ret (return value: bool):#bool [ArmatureData]", "contents": "init()" },{ "trigger": "s_getBoneData(str:#string):ret (return value: ccs.BoneData):#BoneData [ArmatureData]", "contents": "getBoneData(${1:str:#string})" },{ "trigger": "s_create():ret (return value: ccs.ArmatureData):#ArmatureData [ArmatureData]", "contents": "create()" },{ "trigger": "s_ArmatureData():void [ArmatureData]", "contents": "ArmatureData()" },{ "trigger": "s_getStringLength():ret (return value: long):#long [Text]", "contents": "getStringLength()" },{ "trigger": "s_setFontName(str:#string):void [Text]", "contents": "setFontName(${1:str:#string})" },{ "trigger": "s_setTouchScaleChangeEnabled(bool:#bool):void [Text]", "contents": "setTouchScaleChangeEnabled(${1:bool:#bool})" },{ "trigger": "s_getFontSize():ret (return value: int):#int [Text]", "contents": "getFontSize()" },{ "trigger": "s_getTextVerticalAlignment():ret (return value: cc.TextVAlignment):#TextVAlignment [Text]", "contents": "getTextVerticalAlignment()" },{ "trigger": "s_getString():ret (return value: string):#string [Text]", "contents": "getString()" },{ "trigger": "s_setString(str:#string):void [Text]", "contents": "setString(${1:str:#string})" },{ "trigger": "s_getTextHorizontalAlignment():ret (return value: cc.TextHAlignment):#TextHAlignment [Text]", "contents": "getTextHorizontalAlignment()" },{ "trigger": "s_setTextVerticalAlignment(textvalignment:#cc.TextVAlignment):void [Text]", "contents": "setTextVerticalAlignment(${1:textvalignment:#cc.TextVAlignment})" },{ "trigger": "s_getTextAreaSize():ret (return value: size_table):#size_table [Text]", "contents": "getTextAreaSize()" },{ "trigger": "s_setTextHorizontalAlignment(texthalignment:#cc.TextHAlignment):void [Text]", "contents": "setTextHorizontalAlignment(${1:texthalignment:#cc.TextHAlignment})" },{ "trigger": "s_setFontSize(int:#int):void [Text]", "contents": "setFontSize(${1:int:#int})" },{ "trigger": "s_isTouchScaleChangeEnabled():ret (return value: bool):#bool [Text]", "contents": "isTouchScaleChangeEnabled()" },{ "trigger": "s_getType():ret (return value: ccui.Text::Type):#Text::Type [Text]", "contents": "getType()" },{ "trigger": "s_getFontName():ret (return value: string):#string [Text]", "contents": "getFontName()" },{ "trigger": "s_setTextAreaSize(size:#size_table):void [Text]", "contents": "setTextAreaSize(${1:size:#size_table})" },{ "trigger": "f_create(string, string, int):ret (retunr value: ccui.Text):#Text [Text]", "contents": "create(${1:string},${2: string},${3: int})" },{ "trigger": "f_create():ret (retunr value: ccui.Text):#Text [Text]", "contents": "create(${1:})" },{ "trigger": "s_create(str:#string,str:#string,int:#int):ret (retunr value: ccui.Text):#Text [Text]", "contents": "create(${1:str:#string},${2:str:#string},${3:int:#int})" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [Text]", "contents": "createInstance()" },{ "trigger": "s_getVirtualRenderer():ret (return value: cc.Node):#Node [Text]", "contents": "getVirtualRenderer()" },{ "trigger": "s_getDescription():ret (return value: string):#string [Text]", "contents": "getDescription()" },{ "trigger": "s_getVirtualRendererSize():ret (return value: size_table):#size_table [Text]", "contents": "getVirtualRendererSize()" },{ "trigger": "s_Text():void [Text]", "contents": "Text()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseSineIn):#EaseSineIn [EaseSineIn]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseSineIn):#EaseSineIn [EaseSineIn]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseSineIn]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.ActionEase):#ActionEase [EaseSineIn]", "contents": "reverse()" },{ "trigger": "f_addProtectedChild(cc.Node, int):void [ProtectedNode]", "contents": "addProtectedChild(${1:cc.Node},${2: int})" },{ "trigger": "f_addProtectedChild(cc.Node):void [ProtectedNode]", "contents": "addProtectedChild(${1:cc.Node})" },{ "trigger": "f_addProtectedChild(cc.Node, int, int):void [ProtectedNode]", "contents": "addProtectedChild(${1:cc.Node},${2: int},${3: int})" },{ "trigger": "s_addProtectedChild(node:#cc.Node,int:#int,int:#int):void [ProtectedNode]", "contents": "addProtectedChild(${1:node:#cc.Node},${2:int:#int},${3:int:#int})" },{ "trigger": "s_disableCascadeColor():void [ProtectedNode]", "contents": "disableCascadeColor()" },{ "trigger": "s_removeProtectedChildByTag(int:#int,bool:#bool):void [ProtectedNode]", "contents": "removeProtectedChildByTag(${1:int:#int},${2:bool:#bool})" },{ "trigger": "s_reorderProtectedChild(node:#cc.Node,int:#int):void [ProtectedNode]", "contents": "reorderProtectedChild(${1:node:#cc.Node},${2:int:#int})" },{ "trigger": "s_removeAllProtectedChildrenWithCleanup(bool:#bool):void [ProtectedNode]", "contents": "removeAllProtectedChildrenWithCleanup(${1:bool:#bool})" },{ "trigger": "s_sortAllProtectedChildren():void [ProtectedNode]", "contents": "sortAllProtectedChildren()" },{ "trigger": "s_getProtectedChildByTag(int:#int):ret (return value: cc.Node):#Node [ProtectedNode]", "contents": "getProtectedChildByTag(${1:int:#int})" },{ "trigger": "s_removeProtectedChild(node:#cc.Node,bool:#bool):void [ProtectedNode]", "contents": "removeProtectedChild(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "s_removeAllProtectedChildren():void [ProtectedNode]", "contents": "removeAllProtectedChildren()" },{ "trigger": "s_create():ret (return value: cc.ProtectedNode):#ProtectedNode [ProtectedNode]", "contents": "create()" },{ "trigger": "s_updateDisplayedOpacity(char char:#unsigned):void [ProtectedNode]", "contents": "updateDisplayedOpacity(${1:char char:#unsigned})" },{ "trigger": "s_updateDisplayedColor(color3b:#color3b_table):void [ProtectedNode]", "contents": "updateDisplayedColor(${1:color3b:#color3b_table})" },{ "trigger": "s_cleanup():void [ProtectedNode]", "contents": "cleanup()" },{ "trigger": "s_setProperties(map:#map_table):void [TMXLayerInfo]", "contents": "setProperties(${1:map:#map_table})" },{ "trigger": "s_getProperties():ret (return value: map_table):#map_table [TMXLayerInfo]", "contents": "getProperties()" },{ "trigger": "s_TMXLayerInfo():void [TMXLayerInfo]", "contents": "TMXLayerInfo()" },{ "trigger": "s_create(int:#int):ret (return value: cc.ReuseGrid):#ReuseGrid [ReuseGrid]", "contents": "create(${1:int:#int})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [ReuseGrid]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.ReuseGrid):#ReuseGrid [ReuseGrid]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.ReuseGrid):#ReuseGrid [ReuseGrid]", "contents": "reverse()" },{ "trigger": "s_getFontSizeObj():ret (return value: int):#int [MenuItemFont]", "contents": "getFontSizeObj()" },{ "trigger": "s_getFontNameObj():ret (return value: string):#string [MenuItemFont]", "contents": "getFontNameObj()" },{ "trigger": "s_setFontSizeObj(int:#int):void [MenuItemFont]", "contents": "setFontSizeObj(${1:int:#int})" },{ "trigger": "s_setFontNameObj(str:#string):void [MenuItemFont]", "contents": "setFontNameObj(${1:str:#string})" },{ "trigger": "s_setFontName(str:#string):void [MenuItemFont]", "contents": "setFontName(${1:str:#string})" },{ "trigger": "s_getFontSize():ret (return value: int):#int [MenuItemFont]", "contents": "getFontSize()" },{ "trigger": "s_getFontName():ret (return value: string):#string [MenuItemFont]", "contents": "getFontName()" },{ "trigger": "s_setFontSize(int:#int):void [MenuItemFont]", "contents": "setFontSize(${1:int:#int})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionCrossFade):#TransitionCrossFade [TransitionCrossFade]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [TransitionCrossFade]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_getFloat(str:#string,float:#float):ret (return value: float):#float [ComAttribute]", "contents": "getFloat(${1:str:#string},${2:float:#float})" },{ "trigger": "s_getString(str:#string,str:#string):ret (return value: string):#string [ComAttribute]", "contents": "getString(${1:str:#string},${2:str:#string})" },{ "trigger": "s_setFloat(str:#string,float:#float):void [ComAttribute]", "contents": "setFloat(${1:str:#string},${2:float:#float})" },{ "trigger": "s_setString(str:#string,str:#string):void [ComAttribute]", "contents": "setString(${1:str:#string},${2:str:#string})" },{ "trigger": "s_getBool(str:#string,bool:#bool):ret (return value: bool):#bool [ComAttribute]", "contents": "getBool(${1:str:#string},${2:bool:#bool})" },{ "trigger": "s_setInt(str:#string,int:#int):void [ComAttribute]", "contents": "setInt(${1:str:#string},${2:int:#int})" },{ "trigger": "s_parse(str:#string):ret (return value: bool):#bool [ComAttribute]", "contents": "parse(${1:str:#string})" },{ "trigger": "s_getInt(str:#string,int:#int):ret (return value: int):#int [ComAttribute]", "contents": "getInt(${1:str:#string},${2:int:#int})" },{ "trigger": "s_setBool(str:#string,bool:#bool):void [ComAttribute]", "contents": "setBool(${1:str:#string},${2:bool:#bool})" },{ "trigger": "s_create():ret (return value: ccs.ComAttribute):#ComAttribute [ComAttribute]", "contents": "create()" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [ComAttribute]", "contents": "createInstance()" },{ "trigger": "s_init():ret (return value: bool):#bool [ComAttribute]", "contents": "init()" },{ "trigger": "s_serialize(void:#void):ret (return value: bool):#bool [ComAttribute]", "contents": "serialize(${1:void:#void})" },{ "trigger": "s_preloadBackgroundMusic(char:#char):void [SimpleAudioEngine]", "contents": "preloadBackgroundMusic(${1:char:#char})" },{ "trigger": "s_stopBackgroundMusic():void [SimpleAudioEngine]", "contents": "stopBackgroundMusic()" },{ "trigger": "s_stopAllEffects():void [SimpleAudioEngine]", "contents": "stopAllEffects()" },{ "trigger": "s_getBackgroundMusicVolume():ret (return value: float):#float [SimpleAudioEngine]", "contents": "getBackgroundMusicVolume()" },{ "trigger": "s_resumeBackgroundMusic():void [SimpleAudioEngine]", "contents": "resumeBackgroundMusic()" },{ "trigger": "s_setBackgroundMusicVolume(float:#float):void [SimpleAudioEngine]", "contents": "setBackgroundMusicVolume(${1:float:#float})" },{ "trigger": "s_preloadEffect(char:#char):void [SimpleAudioEngine]", "contents": "preloadEffect(${1:char:#char})" },{ "trigger": "s_isBackgroundMusicPlaying():ret (return value: bool):#bool [SimpleAudioEngine]", "contents": "isBackgroundMusicPlaying()" },{ "trigger": "s_getEffectsVolume():ret (return value: float):#float [SimpleAudioEngine]", "contents": "getEffectsVolume()" },{ "trigger": "s_willPlayBackgroundMusic():ret (return value: bool):#bool [SimpleAudioEngine]", "contents": "willPlayBackgroundMusic()" },{ "trigger": "s_pauseEffect(int int:#unsigned):void [SimpleAudioEngine]", "contents": "pauseEffect(${1:int int:#unsigned})" },{ "trigger": "s_playEffect(char:#char,bool:#bool,float:#float,float:#float,float:#float):unsigned [SimpleAudioEngine]", "contents": "playEffect(${1:char:#char},${2:bool:#bool},${3:float:#float},${4:float:#float},${5:float:#float})" },{ "trigger": "s_rewindBackgroundMusic():void [SimpleAudioEngine]", "contents": "rewindBackgroundMusic()" },{ "trigger": "s_playBackgroundMusic(char:#char,bool:#bool):void [SimpleAudioEngine]", "contents": "playBackgroundMusic(${1:char:#char},${2:bool:#bool})" },{ "trigger": "s_resumeAllEffects():void [SimpleAudioEngine]", "contents": "resumeAllEffects()" },{ "trigger": "s_setEffectsVolume(float:#float):void [SimpleAudioEngine]", "contents": "setEffectsVolume(${1:float:#float})" },{ "trigger": "s_stopEffect(int int:#unsigned):void [SimpleAudioEngine]", "contents": "stopEffect(${1:int int:#unsigned})" },{ "trigger": "s_pauseBackgroundMusic():void [SimpleAudioEngine]", "contents": "pauseBackgroundMusic()" },{ "trigger": "s_pauseAllEffects():void [SimpleAudioEngine]", "contents": "pauseAllEffects()" },{ "trigger": "s_unloadEffect(char:#char):void [SimpleAudioEngine]", "contents": "unloadEffect(${1:char:#char})" },{ "trigger": "s_resumeEffect(int int:#unsigned):void [SimpleAudioEngine]", "contents": "resumeEffect(${1:int int:#unsigned})" },{ "trigger": "s_end():void [SimpleAudioEngine]", "contents": "end()" },{ "trigger": "s_getInstance():ret (return value: cc.SimpleAudioEngine):#SimpleAudioEngine [SimpleAudioEngine]", "contents": "getInstance()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval,float:#float):ret (return value: cc.EaseInOut):#EaseInOut [EaseInOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval},${2:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.EaseInOut):#EaseInOut [EaseInOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseInOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseInOut):#EaseInOut [EaseInOut]", "contents": "reverse()" },{ "trigger": "s_setSpriteFrame(spriteframe:#cc.SpriteFrame):void [AnimationFrame]", "contents": "setSpriteFrame(${1:spriteframe:#cc.SpriteFrame})" },{ "trigger": "f_getUserInfo():ret (retunr value: map_table):#map_table [AnimationFrame]", "contents": "getUserInfo(${1:})" },{ "trigger": "f_getUserInfo():ret (retunr value: map_table):#map_table [AnimationFrame]", "contents": "getUserInfo(${1:})" },{ "trigger": "s_getUserInfo():ret (retunr value: map_table):#map_table [AnimationFrame]", "contents": "getUserInfo()" },{ "trigger": "s_setDelayUnits(float:#float):void [AnimationFrame]", "contents": "setDelayUnits(${1:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.AnimationFrame):#AnimationFrame [AnimationFrame]", "contents": "clone()" },{ "trigger": "s_getSpriteFrame():ret (return value: cc.SpriteFrame):#SpriteFrame [AnimationFrame]", "contents": "getSpriteFrame()" },{ "trigger": "s_getDelayUnits():ret (return value: float):#float [AnimationFrame]", "contents": "getDelayUnits()" },{ "trigger": "s_setUserInfo(map:#map_table):void [AnimationFrame]", "contents": "setUserInfo(${1:map:#map_table})" },{ "trigger": "s_create(spriteframe:#cc.SpriteFrame,float:#float,map:#map_table):ret (return value: cc.AnimationFrame):#AnimationFrame [AnimationFrame]", "contents": "create(${1:spriteframe:#cc.SpriteFrame},${2:float:#float},${3:map:#map_table})" },{ "trigger": "s_getAmplitudeRate():ret (return value: float):#float [WavesTiles3D]", "contents": "getAmplitudeRate()" },{ "trigger": "s_setAmplitude(float:#float):void [WavesTiles3D]", "contents": "setAmplitude(${1:float:#float})" },{ "trigger": "s_setAmplitudeRate(float:#float):void [WavesTiles3D]", "contents": "setAmplitudeRate(${1:float:#float})" },{ "trigger": "s_getAmplitude():ret (return value: float):#float [WavesTiles3D]", "contents": "getAmplitude()" },{ "trigger": "s_create(float:#float,size:#size_table,int int:#unsigned,float:#float):ret (return value: cc.WavesTiles3D):#WavesTiles3D [WavesTiles3D]", "contents": "create(${1:float:#float},${2:size:#size_table},${3:int int:#unsigned},${4:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.WavesTiles3D):#WavesTiles3D [WavesTiles3D]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [WavesTiles3D]", "contents": "update(${1:float:#float})" },{ "trigger": "s_restore():void [Mesh]", "contents": "restore()" },{ "trigger": "s_getMeshVertexAttribCount():ret (return value: long):#long [Mesh]", "contents": "getMeshVertexAttribCount()" },{ "trigger": "s_getIndexFormat():ret (return value: cc.Mesh::IndexFormat):#Mesh::IndexFormat [Mesh]", "contents": "getIndexFormat()" },{ "trigger": "s_getVertexSizeInBytes():ret (return value: int):#int [Mesh]", "contents": "getVertexSizeInBytes()" },{ "trigger": "s_getPrimitiveType():ret (return value: cc.Mesh::PrimitiveType):#Mesh::PrimitiveType [Mesh]", "contents": "getPrimitiveType()" },{ "trigger": "s_getIndexCount():ret (return value: long):#long [Mesh]", "contents": "getIndexCount()" },{ "trigger": "s_getVertexBuffer():unsigned [Mesh]", "contents": "getVertexBuffer()" },{ "trigger": "s_getMeshVertexAttribute(int:#int):ret (return value: cc.MeshVertexAttrib):#MeshVertexAttrib [Mesh]", "contents": "getMeshVertexAttribute(${1:int:#int})" },{ "trigger": "s_getIndexBuffer():unsigned [Mesh]", "contents": "getIndexBuffer()" },{ "trigger": "s_hasVertexAttrib(int:#int):ret (return value: bool):#bool [Mesh]", "contents": "hasVertexAttrib(${1:int:#int})" },{ "trigger": "s_create(array:#array_table,array:#array_table,array:#array_table,vector<short, std::allocator<short> >:#array_table):ret (return value: cc.Mesh):#Mesh [Mesh]", "contents": "create(${1:array:#array_table},${2:array:#array_table},${3:array:#array_table},${4:vector<short, std::allocator<short> >:#array_table})" },{ "trigger": "s_setLineBreakWithoutSpace(bool:#bool):void [LabelBMFont]", "contents": "setLineBreakWithoutSpace(${1:bool:#bool})" },{ "trigger": "s_getBlendFunc():ret (return value: cc.BlendFunc):#BlendFunc [LabelBMFont]", "contents": "getBlendFunc()" },{ "trigger": "s_isOpacityModifyRGB():ret (return value: bool):#bool [LabelBMFont]", "contents": "isOpacityModifyRGB()" },{ "trigger": "s_getLetter(int:#int):ret (return value: cc.Sprite):#Sprite [LabelBMFont]", "contents": "getLetter(${1:int:#int})" },{ "trigger": "s_getString():ret (return value: string):#string [LabelBMFont]", "contents": "getString()" },{ "trigger": "s_setBlendFunc(blendfunc:#cc.BlendFunc):void [LabelBMFont]", "contents": "setBlendFunc(${1:blendfunc:#cc.BlendFunc})" },{ "trigger": "s_setString(str:#string):void [LabelBMFont]", "contents": "setString(${1:str:#string})" },{ "trigger": "s_initWithString(str:#string,str:#string,float:#float,texthalignment:#cc.TextHAlignment,vec2:#cc.Vec2):ret (return value: bool):#bool [LabelBMFont]", "contents": "initWithString(${1:str:#string},${2:str:#string},${3:float:#float},${4:texthalignment:#cc.TextHAlignment},${5:vec2:#cc.Vec2})" },{ "trigger": "s_setOpacityModifyRGB(bool:#bool):void [LabelBMFont]", "contents": "setOpacityModifyRGB(${1:bool:#bool})" },{ "trigger": "s_getFntFile():ret (return value: string):#string [LabelBMFont]", "contents": "getFntFile()" },{ "trigger": "s_setFntFile(str:#string,vec2:#cc.Vec2):void [LabelBMFont]", "contents": "setFntFile(${1:str:#string},${2:vec2:#cc.Vec2})" },{ "trigger": "s_setAlignment(texthalignment:#cc.TextHAlignment):void [LabelBMFont]", "contents": "setAlignment(${1:texthalignment:#cc.TextHAlignment})" },{ "trigger": "s_setWidth(float:#float):void [LabelBMFont]", "contents": "setWidth(${1:float:#float})" },{ "trigger": "f_create():ret (retunr value: cc.LabelBMFont):#LabelBMFont [LabelBMFont]", "contents": "create(${1:})" },{ "trigger": "f_create(string, string, float, cc.TextHAlignment, cc.Vec2):ret (retunr value: cc.LabelBMFont):#LabelBMFont [LabelBMFont]", "contents": "create(${1:string},${2: string},${3: float},${4: cc.TextHAlignment},${5: cc.Vec2})" },{ "trigger": "s_create(str:#string,str:#string,float:#float,texthalignment:#cc.TextHAlignment,vec2:#cc.Vec2):ret (retunr value: cc.LabelBMFont):#LabelBMFont [LabelBMFont]", "contents": "create(${1:str:#string},${2:str:#string},${3:float:#float},${4:texthalignment:#cc.TextHAlignment},${5:vec2:#cc.Vec2})" },{ "trigger": "s_getBoundingBox():ret (return value: rect_table):#rect_table [LabelBMFont]", "contents": "getBoundingBox()" },{ "trigger": "s_getDescription():ret (return value: string):#string [LabelBMFont]", "contents": "getDescription()" },{ "trigger": "s_setColor(color3b:#color3b_table):void [LabelBMFont]", "contents": "setColor(${1:color3b:#color3b_table})" },{ "trigger": "s_getChildByTag(int:#int):ret (return value: cc.Node):#Node [LabelBMFont]", "contents": "getChildByTag(${1:int:#int})" },{ "trigger": "s_getContentSize():ret (return value: size_table):#size_table [LabelBMFont]", "contents": "getContentSize()" },{ "trigger": "s_LabelBMFont():void [LabelBMFont]", "contents": "LabelBMFont()" },{ "trigger": "s_actionWithSize(size:#size_table):ret (return value: cc.ActionInterval):#ActionInterval [TransitionPageTurn]", "contents": "actionWithSize(${1:size:#size_table})" },{ "trigger": "s_initWithDuration(float:#float,scene:#cc.Scene,bool:#bool):ret (return value: bool):#bool [TransitionPageTurn]", "contents": "initWithDuration(${1:float:#float},${2:scene:#cc.Scene},${3:bool:#bool})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene,bool:#bool):ret (return value: cc.TransitionPageTurn):#TransitionPageTurn [TransitionPageTurn]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene},${3:bool:#bool})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [TransitionPageTurn]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_TransitionPageTurn():void [TransitionPageTurn]", "contents": "TransitionPageTurn()" },{ "trigger": "s_getPointB():ret (return value: cc.Vec2):#Vec2 [PhysicsShapeEdgeSegment]", "contents": "getPointB()" },{ "trigger": "s_getPointA():ret (return value: cc.Vec2):#Vec2 [PhysicsShapeEdgeSegment]", "contents": "getPointA()" },{ "trigger": "s_create(vec2:#cc.Vec2,vec2:#cc.Vec2,physicsmaterial:#cc.PhysicsMaterial,float:#float):ret (return value: cc.PhysicsShapeEdgeSegment):#PhysicsShapeEdgeSegment [PhysicsShapeEdgeSegment]", "contents": "create(${1:vec2:#cc.Vec2},${2:vec2:#cc.Vec2},${3:physicsmaterial:#cc.PhysicsMaterial},${4:float:#float})" },{ "trigger": "s_getCenter():ret (return value: cc.Vec2):#Vec2 [PhysicsShapeEdgeSegment]", "contents": "getCenter()" },{ "trigger": "s_setIntegerForKey(char:#char,int:#int):void [UserDefault]", "contents": "setIntegerForKey(${1:char:#char},${2:int:#int})" },{ "trigger": "f_getFloatForKey(char, float):ret (retunr value: float):#float [UserDefault]", "contents": "getFloatForKey(${1:char},${2: float})" },{ "trigger": "f_getFloatForKey(char):ret (retunr value: float):#float [UserDefault]", "contents": "getFloatForKey(${1:char})" },{ "trigger": "s_getFloatForKey(char:#char,float:#float):ret (retunr value: float):#float [UserDefault]", "contents": "getFloatForKey(${1:char:#char},${2:float:#float})" },{ "trigger": "f_getBoolForKey(char, bool):ret (retunr value: bool):#bool [UserDefault]", "contents": "getBoolForKey(${1:char},${2: bool})" },{ "trigger": "f_getBoolForKey(char):ret (retunr value: bool):#bool [UserDefault]", "contents": "getBoolForKey(${1:char})" },{ "trigger": "s_getBoolForKey(char:#char,bool:#bool):ret (retunr value: bool):#bool [UserDefault]", "contents": "getBoolForKey(${1:char:#char},${2:bool:#bool})" },{ "trigger": "s_setDoubleForKey(char:#char,double:#double):void [UserDefault]", "contents": "setDoubleForKey(${1:char:#char},${2:double:#double})" },{ "trigger": "s_setFloatForKey(char:#char,float:#float):void [UserDefault]", "contents": "setFloatForKey(${1:char:#char},${2:float:#float})" },{ "trigger": "f_getStringForKey(char, string):ret (retunr value: string):#string [UserDefault]", "contents": "getStringForKey(${1:char},${2: string})" },{ "trigger": "f_getStringForKey(char):ret (retunr value: string):#string [UserDefault]", "contents": "getStringForKey(${1:char})" },{ "trigger": "s_getStringForKey(char:#char,str:#string):ret (retunr value: string):#string [UserDefault]", "contents": "getStringForKey(${1:char:#char},${2:str:#string})" },{ "trigger": "s_setStringForKey(char:#char,str:#string):void [UserDefault]", "contents": "setStringForKey(${1:char:#char},${2:str:#string})" },{ "trigger": "s_flush():void [UserDefault]", "contents": "flush()" },{ "trigger": "f_getIntegerForKey(char, int):ret (retunr value: int):#int [UserDefault]", "contents": "getIntegerForKey(${1:char},${2: int})" },{ "trigger": "f_getIntegerForKey(char):ret (retunr value: int):#int [UserDefault]", "contents": "getIntegerForKey(${1:char})" },{ "trigger": "s_getIntegerForKey(char:#char,int:#int):ret (retunr value: int):#int [UserDefault]", "contents": "getIntegerForKey(${1:char:#char},${2:int:#int})" },{ "trigger": "f_getDoubleForKey(char, double):ret (retunr value: double):#double [UserDefault]", "contents": "getDoubleForKey(${1:char},${2: double})" },{ "trigger": "f_getDoubleForKey(char):ret (retunr value: double):#double [UserDefault]", "contents": "getDoubleForKey(${1:char})" },{ "trigger": "s_getDoubleForKey(char:#char,double:#double):ret (retunr value: double):#double [UserDefault]", "contents": "getDoubleForKey(${1:char:#char},${2:double:#double})" },{ "trigger": "s_setBoolForKey(char:#char,bool:#bool):void [UserDefault]", "contents": "setBoolForKey(${1:char:#char},${2:bool:#bool})" },{ "trigger": "s_destroyInstance():void [UserDefault]", "contents": "destroyInstance()" },{ "trigger": "s_getXMLFilePath():ret (return value: string):#string [UserDefault]", "contents": "getXMLFilePath()" },{ "trigger": "s_isXMLFileExist():ret (return value: bool):#bool [UserDefault]", "contents": "isXMLFileExist()" },{ "trigger": "f_addChild(cc.Node, int):void [Node]", "contents": "addChild(${1:cc.Node},${2: int})" },{ "trigger": "f_addChild(cc.Node):void [Node]", "contents": "addChild(${1:cc.Node})" },{ "trigger": "f_addChild(cc.Node, int, int):void [Node]", "contents": "addChild(${1:cc.Node},${2: int},${3: int})" },{ "trigger": "s_addChild(node:#cc.Node,int:#int,int:#int):void [Node]", "contents": "addChild(${1:node:#cc.Node},${2:int:#int},${3:int:#int})" },{ "trigger": "s_removeComponent(str:#string):ret (return value: bool):#bool [Node]", "contents": "removeComponent(${1:str:#string})" },{ "trigger": "s_setPhysicsBody(physicsbody:#cc.PhysicsBody):void [Node]", "contents": "setPhysicsBody(${1:physicsbody:#cc.PhysicsBody})" },{ "trigger": "s_getDescription():ret (return value: string):#string [Node]", "contents": "getDescription()" },{ "trigger": "s_setRotationSkewY(float:#float):void [Node]", "contents": "setRotationSkewY(${1:float:#float})" },{ "trigger": "s_setOpacityModifyRGB(bool:#bool):void [Node]", "contents": "setOpacityModifyRGB(${1:bool:#bool})" },{ "trigger": "s_setCascadeOpacityEnabled(bool:#bool):void [Node]", "contents": "setCascadeOpacityEnabled(${1:bool:#bool})" },{ "trigger": "f_getChildren():ret (retunr value: array_table):#array_table [Node]", "contents": "getChildren(${1:})" },{ "trigger": "f_getChildren():ret (retunr value: array_table):#array_table [Node]", "contents": "getChildren(${1:})" },{ "trigger": "s_getChildren():ret (retunr value: array_table):#array_table [Node]", "contents": "getChildren()" },{ "trigger": "s_pause():void [Node]", "contents": "pause()" },{ "trigger": "s_convertToWorldSpaceAR(vec2:#cc.Vec2):ret (return value: cc.Vec2):#Vec2 [Node]", "contents": "convertToWorldSpaceAR(${1:vec2:#cc.Vec2})" },{ "trigger": "s_isIgnoreAnchorPointForPosition():ret (return value: bool):#bool [Node]", "contents": "isIgnoreAnchorPointForPosition()" },{ "trigger": "s_updateDisplayedOpacity(char char:#unsigned):void [Node]", "contents": "updateDisplayedOpacity(${1:char char:#unsigned})" },{ "trigger": "s_setRotation(float:#float):void [Node]", "contents": "setRotation(${1:float:#float})" },{ "trigger": "s_setScaleZ(float:#float):void [Node]", "contents": "setScaleZ(${1:float:#float})" },{ "trigger": "s_setScaleY(float:#float):void [Node]", "contents": "setScaleY(${1:float:#float})" },{ "trigger": "s_setScaleX(float:#float):void [Node]", "contents": "setScaleX(${1:float:#float})" },{ "trigger": "s_setRotationSkewX(float:#float):void [Node]", "contents": "setRotationSkewX(${1:float:#float})" },{ "trigger": "s_removeAllComponents():void [Node]", "contents": "removeAllComponents()" },{ "trigger": "s__setLocalZOrder(int:#int):void [Node]", "contents": "_setLocalZOrder(${1:int:#int})" },{ "trigger": "s_getTag():ret (return value: int):#int [Node]", "contents": "getTag()" },{ "trigger": "s_getGLProgram():ret (return value: cc.GLProgram):#GLProgram [Node]", "contents": "getGLProgram()" },{ "trigger": "s_getNodeToWorldTransform():ret (return value: cc.Mat4):#Mat4 [Node]", "contents": "getNodeToWorldTransform()" },{ "trigger": "s_getPosition3D():ret (return value: cc.Vec3):#Vec3 [Node]", "contents": "getPosition3D()" },{ "trigger": "s_removeChild(node:#cc.Node,bool:#bool):void [Node]", "contents": "removeChild(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "s_convertToWorldSpace(vec2:#cc.Vec2):ret (return value: cc.Vec2):#Vec2 [Node]", "contents": "convertToWorldSpace(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getScene():ret (return value: cc.Scene):#Scene [Node]", "contents": "getScene()" },{ "trigger": "s_getEventDispatcher():ret (return value: cc.EventDispatcher):#EventDispatcher [Node]", "contents": "getEventDispatcher()" },{ "trigger": "s_setSkewX(float:#float):void [Node]", "contents": "setSkewX(${1:float:#float})" },{ "trigger": "s_setGLProgramState(glprogramstate:#cc.GLProgramState):void [Node]", "contents": "setGLProgramState(${1:glprogramstate:#cc.GLProgramState})" },{ "trigger": "s_getOpacity():unsigned [Node]", "contents": "getOpacity()" },{ "trigger": "s_convertTouchToNodeSpace(touch:#cc.Touch):ret (return value: cc.Vec2):#Vec2 [Node]", "contents": "convertTouchToNodeSpace(${1:touch:#cc.Touch})" },{ "trigger": "f_removeAllChildrenWithCleanup(bool):void [Node]", "contents": "removeAllChildrenWithCleanup(${1:bool})" },{ "trigger": "f_removeAllChildrenWithCleanup():void [Node]", "contents": "removeAllChildrenWithCleanup(${1:})" },{ "trigger": "s_removeAllChildrenWithCleanup(bool:#bool):void [Node]", "contents": "removeAllChildrenWithCleanup(${1:bool:#bool})" },{ "trigger": "s_getNodeToParentAffineTransform():ret (return value: cc.AffineTransform):#AffineTransform [Node]", "contents": "getNodeToParentAffineTransform()" },{ "trigger": "s_isCascadeOpacityEnabled():ret (return value: bool):#bool [Node]", "contents": "isCascadeOpacityEnabled()" },{ "trigger": "s_setParent(node:#cc.Node):void [Node]", "contents": "setParent(${1:node:#cc.Node})" },{ "trigger": "s_getRotation3D():ret (return value: cc.Vec3):#Vec3 [Node]", "contents": "getRotation3D()" },{ "trigger": "s_getNodeToParentTransform():ret (return value: cc.Mat4):#Mat4 [Node]", "contents": "getNodeToParentTransform()" },{ "trigger": "s_convertTouchToNodeSpaceAR(touch:#cc.Touch):ret (return value: cc.Vec2):#Vec2 [Node]", "contents": "convertTouchToNodeSpaceAR(${1:touch:#cc.Touch})" },{ "trigger": "s_convertToNodeSpace(vec2:#cc.Vec2):ret (return value: cc.Vec2):#Vec2 [Node]", "contents": "convertToNodeSpace(${1:vec2:#cc.Vec2})" },{ "trigger": "s_resume():void [Node]", "contents": "resume()" },{ "trigger": "s_getPhysicsBody():ret (return value: cc.PhysicsBody):#PhysicsBody [Node]", "contents": "getPhysicsBody()" },{ "trigger": "f_setPosition(float, float):void [Node]", "contents": "setPosition(${1:float},${2: float})" },{ "trigger": "f_setPosition(cc.Vec2):void [Node]", "contents": "setPosition(${1:cc.Vec2})" },{ "trigger": "s_setPosition(float:#float,float:#float):void [Node]", "contents": "setPosition(${1:float:#float},${2:float:#float})" },{ "trigger": "s_stopActionByTag(int:#int):void [Node]", "contents": "stopActionByTag(${1:int:#int})" },{ "trigger": "s_reorderChild(node:#cc.Node,int:#int):void [Node]", "contents": "reorderChild(${1:node:#cc.Node},${2:int:#int})" },{ "trigger": "s_ignoreAnchorPointForPosition(bool:#bool):void [Node]", "contents": "ignoreAnchorPointForPosition(${1:bool:#bool})" },{ "trigger": "s_setSkewY(float:#float):void [Node]", "contents": "setSkewY(${1:float:#float})" },{ "trigger": "s_setPositionZ(float:#float):void [Node]", "contents": "setPositionZ(${1:float:#float})" },{ "trigger": "s_setRotation3D(vec3:#cc.Vec3):void [Node]", "contents": "setRotation3D(${1:vec3:#cc.Vec3})" },{ "trigger": "s_setPositionX(float:#float):void [Node]", "contents": "setPositionX(${1:float:#float})" },{ "trigger": "s_setNodeToParentTransform(mat4:#cc.Mat4):void [Node]", "contents": "setNodeToParentTransform(${1:mat4:#cc.Mat4})" },{ "trigger": "s_getAnchorPoint():ret (return value: cc.Vec2):#Vec2 [Node]", "contents": "getAnchorPoint()" },{ "trigger": "s_getNumberOfRunningActions():ret (return value: long):#long [Node]", "contents": "getNumberOfRunningActions()" },{ "trigger": "s_updateTransform():void [Node]", "contents": "updateTransform()" },{ "trigger": "s_isVisible():ret (return value: bool):#bool [Node]", "contents": "isVisible()" },{ "trigger": "s_getChildrenCount():ret (return value: long):#long [Node]", "contents": "getChildrenCount()" },{ "trigger": "s_convertToNodeSpaceAR(vec2:#cc.Vec2):ret (return value: cc.Vec2):#Vec2 [Node]", "contents": "convertToNodeSpaceAR(${1:vec2:#cc.Vec2})" },{ "trigger": "s_addComponent(component:#cc.Component):ret (return value: bool):#bool [Node]", "contents": "addComponent(${1:component:#cc.Component})" },{ "trigger": "s_isOpacityModifyRGB():ret (return value: bool):#bool [Node]", "contents": "isOpacityModifyRGB()" },{ "trigger": "s_getRotation():ret (return value: float):#float [Node]", "contents": "getRotation()" },{ "trigger": "s_getAnchorPointInPoints():ret (return value: cc.Vec2):#Vec2 [Node]", "contents": "getAnchorPointInPoints()" },{ "trigger": "s_runAction(action:#cc.Action):ret (return value: cc.Action):#Action [Node]", "contents": "runAction(${1:action:#cc.Action})" },{ "trigger": "s_getGLProgramState():ret (return value: cc.GLProgramState):#GLProgramState [Node]", "contents": "getGLProgramState()" },{ "trigger": "s_setScheduler(scheduler:#cc.Scheduler):void [Node]", "contents": "setScheduler(${1:scheduler:#cc.Scheduler})" },{ "trigger": "s_stopAllActions():void [Node]", "contents": "stopAllActions()" },{ "trigger": "s_getSkewX():ret (return value: float):#float [Node]", "contents": "getSkewX()" },{ "trigger": "s_getSkewY():ret (return value: float):#float [Node]", "contents": "getSkewY()" },{ "trigger": "s_getDisplayedColor():ret (return value: color3b_table):#color3b_table [Node]", "contents": "getDisplayedColor()" },{ "trigger": "s_getActionByTag(int:#int):ret (return value: cc.Action):#Action [Node]", "contents": "getActionByTag(${1:int:#int})" },{ "trigger": "f_setAdditionalTransform(cc.AffineTransform):void [Node]", "contents": "setAdditionalTransform(${1:cc.AffineTransform})" },{ "trigger": "f_setAdditionalTransform(cc.Mat4):void [Node]", "contents": "setAdditionalTransform(${1:cc.Mat4})" },{ "trigger": "s_setAdditionalTransform(mat4:#cc.Mat4):void [Node]", "contents": "setAdditionalTransform(${1:mat4:#cc.Mat4})" },{ "trigger": "s_getDisplayedOpacity():unsigned [Node]", "contents": "getDisplayedOpacity()" },{ "trigger": "s_getLocalZOrder():ret (return value: int):#int [Node]", "contents": "getLocalZOrder()" },{ "trigger": "f_getScheduler():ret (retunr value: cc.Scheduler):#Scheduler [Node]", "contents": "getScheduler(${1:})" },{ "trigger": "f_getScheduler():ret (retunr value: cc.Scheduler):#Scheduler [Node]", "contents": "getScheduler(${1:})" },{ "trigger": "s_getScheduler():ret (retunr value: cc.Scheduler):#Scheduler [Node]", "contents": "getScheduler()" },{ "trigger": "s_getParentToNodeAffineTransform():ret (return value: cc.AffineTransform):#AffineTransform [Node]", "contents": "getParentToNodeAffineTransform()" },{ "trigger": "s_getOrderOfArrival():ret (return value: int):#int [Node]", "contents": "getOrderOfArrival()" },{ "trigger": "s_setActionManager(actionmanager:#cc.ActionManager):void [Node]", "contents": "setActionManager(${1:actionmanager:#cc.ActionManager})" },{ "trigger": "s_setColor(color3b:#color3b_table):void [Node]", "contents": "setColor(${1:color3b:#color3b_table})" },{ "trigger": "s_isRunning():ret (return value: bool):#bool [Node]", "contents": "isRunning()" },{ "trigger": "f_getParent():ret (retunr value: cc.Node):#Node [Node]", "contents": "getParent(${1:})" },{ "trigger": "f_getParent():ret (retunr value: cc.Node):#Node [Node]", "contents": "getParent(${1:})" },{ "trigger": "s_getParent():ret (retunr value: cc.Node):#Node [Node]", "contents": "getParent()" },{ "trigger": "s_getPositionZ():ret (return value: float):#float [Node]", "contents": "getPositionZ()" },{ "trigger": "s_getPositionY():ret (return value: float):#float [Node]", "contents": "getPositionY()" },{ "trigger": "s_getPositionX():ret (return value: float):#float [Node]", "contents": "getPositionX()" },{ "trigger": "s_removeChildByTag(int:#int,bool:#bool):void [Node]", "contents": "removeChildByTag(${1:int:#int},${2:bool:#bool})" },{ "trigger": "s_setPositionY(float:#float):void [Node]", "contents": "setPositionY(${1:float:#float})" },{ "trigger": "s_getNodeToWorldAffineTransform():ret (return value: cc.AffineTransform):#AffineTransform [Node]", "contents": "getNodeToWorldAffineTransform()" },{ "trigger": "s_updateDisplayedColor(color3b:#color3b_table):void [Node]", "contents": "updateDisplayedColor(${1:color3b:#color3b_table})" },{ "trigger": "s_setVisible(bool:#bool):void [Node]", "contents": "setVisible(${1:bool:#bool})" },{ "trigger": "s_getParentToNodeTransform():ret (return value: cc.Mat4):#Mat4 [Node]", "contents": "getParentToNodeTransform()" },{ "trigger": "s_setGlobalZOrder(float:#float):void [Node]", "contents": "setGlobalZOrder(${1:float:#float})" },{ "trigger": "f_setScale(float, float):void [Node]", "contents": "setScale(${1:float},${2: float})" },{ "trigger": "f_setScale(float):void [Node]", "contents": "setScale(${1:float})" },{ "trigger": "s_setScale(float:#float,float:#float):void [Node]", "contents": "setScale(${1:float:#float},${2:float:#float})" },{ "trigger": "s_getChildByTag(int:#int):ret (return value: cc.Node):#Node [Node]", "contents": "getChildByTag(${1:int:#int})" },{ "trigger": "s_setOrderOfArrival(int:#int):void [Node]", "contents": "setOrderOfArrival(${1:int:#int})" },{ "trigger": "s_getScaleZ():ret (return value: float):#float [Node]", "contents": "getScaleZ()" },{ "trigger": "s_getScaleY():ret (return value: float):#float [Node]", "contents": "getScaleY()" },{ "trigger": "s_getScaleX():ret (return value: float):#float [Node]", "contents": "getScaleX()" },{ "trigger": "s_setLocalZOrder(int:#int):void [Node]", "contents": "setLocalZOrder(${1:int:#int})" },{ "trigger": "s_getWorldToNodeAffineTransform():ret (return value: cc.AffineTransform):#AffineTransform [Node]", "contents": "getWorldToNodeAffineTransform()" },{ "trigger": "s_setCascadeColorEnabled(bool:#bool):void [Node]", "contents": "setCascadeColorEnabled(${1:bool:#bool})" },{ "trigger": "s_setOpacity(char char:#unsigned):void [Node]", "contents": "setOpacity(${1:char char:#unsigned})" },{ "trigger": "s_cleanup():void [Node]", "contents": "cleanup()" },{ "trigger": "s_getComponent(str:#string):ret (return value: cc.Component):#Component [Node]", "contents": "getComponent(${1:str:#string})" },{ "trigger": "s_getContentSize():ret (return value: size_table):#size_table [Node]", "contents": "getContentSize()" },{ "trigger": "s_getColor():ret (return value: color3b_table):#color3b_table [Node]", "contents": "getColor()" },{ "trigger": "s_getBoundingBox():ret (return value: rect_table):#rect_table [Node]", "contents": "getBoundingBox()" },{ "trigger": "s_setEventDispatcher(eventdispatcher:#cc.EventDispatcher):void [Node]", "contents": "setEventDispatcher(${1:eventdispatcher:#cc.EventDispatcher})" },{ "trigger": "s_getGlobalZOrder():ret (return value: float):#float [Node]", "contents": "getGlobalZOrder()" },{ "trigger": "f_draw():void [Node]", "contents": "draw(${1:})" },{ "trigger": "f_draw(cc.Renderer, cc.Mat4, bool):void [Node]", "contents": "draw(${1:cc.Renderer},${2: cc.Mat4},${3: bool})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [Node]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_setUserObject(ref:#cc.Ref):void [Node]", "contents": "setUserObject(${1:ref:#cc.Ref})" },{ "trigger": "f_removeFromParentAndCleanup(bool):void [Node]", "contents": "removeFromParentAndCleanup(${1:bool})" },{ "trigger": "f_removeFromParentAndCleanup():void [Node]", "contents": "removeFromParentAndCleanup(${1:})" },{ "trigger": "s_removeFromParentAndCleanup(bool:#bool):void [Node]", "contents": "removeFromParentAndCleanup(${1:bool:#bool})" },{ "trigger": "s_setPosition3D(vec3:#cc.Vec3):void [Node]", "contents": "setPosition3D(${1:vec3:#cc.Vec3})" },{ "trigger": "s_update(float:#float):void [Node]", "contents": "update(${1:float:#float})" },{ "trigger": "s_sortAllChildren():void [Node]", "contents": "sortAllChildren()" },{ "trigger": "s_getWorldToNodeTransform():ret (return value: cc.Mat4):#Mat4 [Node]", "contents": "getWorldToNodeTransform()" },{ "trigger": "s_setGLProgram(glprogram:#cc.GLProgram):void [Node]", "contents": "setGLProgram(${1:glprogram:#cc.GLProgram})" },{ "trigger": "s_getScale():ret (return value: float):#float [Node]", "contents": "getScale()" },{ "trigger": "s_getRotationSkewX():ret (return value: float):#float [Node]", "contents": "getRotationSkewX()" },{ "trigger": "s_getRotationSkewY():ret (return value: float):#float [Node]", "contents": "getRotationSkewY()" },{ "trigger": "s_setTag(int:#int):void [Node]", "contents": "setTag(${1:int:#int})" },{ "trigger": "s_isCascadeColorEnabled():ret (return value: bool):#bool [Node]", "contents": "isCascadeColorEnabled()" },{ "trigger": "s_stopAction(action:#cc.Action):void [Node]", "contents": "stopAction(${1:action:#cc.Action})" },{ "trigger": "f_getActionManager():ret (retunr value: cc.ActionManager):#ActionManager [Node]", "contents": "getActionManager(${1:})" },{ "trigger": "f_getActionManager():ret (retunr value: cc.ActionManager):#ActionManager [Node]", "contents": "getActionManager(${1:})" },{ "trigger": "s_getActionManager():ret (retunr value: cc.ActionManager):#ActionManager [Node]", "contents": "getActionManager()" },{ "trigger": "s_create():ret (return value: cc.Node):#Node [Node]", "contents": "create()" },{ "trigger": "s_getAnimation(str:#string):ret (return value: cc.Animation):#Animation [AnimationCache]", "contents": "getAnimation(${1:str:#string})" },{ "trigger": "s_addAnimation(animation:#cc.Animation,str:#string):void [AnimationCache]", "contents": "addAnimation(${1:animation:#cc.Animation},${2:str:#string})" },{ "trigger": "s_init():ret (return value: bool):#bool [AnimationCache]", "contents": "init()" },{ "trigger": "s_addAnimationsWithDictionary(map:#map_table,str:#string):void [AnimationCache]", "contents": "addAnimationsWithDictionary(${1:map:#map_table},${2:str:#string})" },{ "trigger": "s_removeAnimation(str:#string):void [AnimationCache]", "contents": "removeAnimation(${1:str:#string})" },{ "trigger": "s_addAnimationsWithFile(str:#string):void [AnimationCache]", "contents": "addAnimationsWithFile(${1:str:#string})" },{ "trigger": "s_destroyInstance():void [AnimationCache]", "contents": "destroyInstance()" },{ "trigger": "s_getInstance():ret (return value: cc.AnimationCache):#AnimationCache [AnimationCache]", "contents": "getInstance()" },{ "trigger": "s_AnimationCache():void [AnimationCache]", "contents": "AnimationCache()" },{ "trigger": "s_switchToAndReleaseMe(int:#int):void [LayerMultiplex]", "contents": "switchToAndReleaseMe(${1:int:#int})" },{ "trigger": "s_addLayer(layer:#cc.Layer):void [LayerMultiplex]", "contents": "addLayer(${1:layer:#cc.Layer})" },{ "trigger": "s_switchTo(int:#int):void [LayerMultiplex]", "contents": "switchTo(${1:int:#int})" },{ "trigger": "s_getDescription():ret (return value: string):#string [LayerMultiplex]", "contents": "getDescription()" },{ "trigger": "s_initWithDuration(float:#float,pointarray:#point_table):ret (return value: bool):#bool [CatmullRomTo]", "contents": "initWithDuration(${1:float:#float},${2:pointarray:#point_table})" },{ "trigger": "s_clone():ret (return value: cc.CatmullRomTo):#CatmullRomTo [CatmullRomTo]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.CatmullRomTo):#CatmullRomTo [CatmullRomTo]", "contents": "reverse()" },{ "trigger": "TextureResTypem_localType [TextureResType]", "contents": "TextureResType.localType" },{ "trigger": "TextureResTypem_plistType [TextureResType]", "contents": "TextureResType.plistType" },{ "trigger": "s_copy(displaydata:#ccs.DisplayData):void [SpriteDisplayData]", "contents": "copy(${1:displaydata:#ccs.DisplayData})" },{ "trigger": "s_create():ret (return value: ccs.SpriteDisplayData):#SpriteDisplayData [SpriteDisplayData]", "contents": "create()" },{ "trigger": "s_SpriteDisplayData():void [SpriteDisplayData]", "contents": "SpriteDisplayData()" },{ "trigger": "s_create(bool:#bool):ret (return value: cc.FlipY):#FlipY [FlipY]", "contents": "create(${1:bool:#bool})" },{ "trigger": "s_clone():ret (return value: cc.FlipY):#FlipY [FlipY]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [FlipY]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.FlipY):#FlipY [FlipY]", "contents": "reverse()" },{ "trigger": "s_getEventName():ret (return value: string):#string [EventCustom]", "contents": "getEventName()" },{ "trigger": "s_EventCustom(str:#string):void [EventCustom]", "contents": "EventCustom(${1:str:#string})" },{ "trigger": "ccsm_ActionObject [lua_cocos2dx_studio_auto_api]", "contents": "ccs.ActionObject" },{ "trigger": "ccsm_ActionManagerEx [lua_cocos2dx_studio_auto_api]", "contents": "ccs.ActionManagerEx" },{ "trigger": "ccsm_BaseData [lua_cocos2dx_studio_auto_api]", "contents": "ccs.BaseData" },{ "trigger": "ccsm_DisplayData [lua_cocos2dx_studio_auto_api]", "contents": "ccs.DisplayData" },{ "trigger": "ccsm_SpriteDisplayData [lua_cocos2dx_studio_auto_api]", "contents": "ccs.SpriteDisplayData" },{ "trigger": "ccsm_ArmatureDisplayData [lua_cocos2dx_studio_auto_api]", "contents": "ccs.ArmatureDisplayData" },{ "trigger": "ccsm_ParticleDisplayData [lua_cocos2dx_studio_auto_api]", "contents": "ccs.ParticleDisplayData" },{ "trigger": "ccsm_BoneData [lua_cocos2dx_studio_auto_api]", "contents": "ccs.BoneData" },{ "trigger": "ccsm_ArmatureData [lua_cocos2dx_studio_auto_api]", "contents": "ccs.ArmatureData" },{ "trigger": "ccsm_FrameData [lua_cocos2dx_studio_auto_api]", "contents": "ccs.FrameData" },{ "trigger": "ccsm_MovementBoneData [lua_cocos2dx_studio_auto_api]", "contents": "ccs.MovementBoneData" },{ "trigger": "ccsm_MovementData [lua_cocos2dx_studio_auto_api]", "contents": "ccs.MovementData" },{ "trigger": "ccsm_AnimationData [lua_cocos2dx_studio_auto_api]", "contents": "ccs.AnimationData" },{ "trigger": "ccsm_ContourData [lua_cocos2dx_studio_auto_api]", "contents": "ccs.ContourData" },{ "trigger": "ccsm_TextureData [lua_cocos2dx_studio_auto_api]", "contents": "ccs.TextureData" },{ "trigger": "ccsm_Tween [lua_cocos2dx_studio_auto_api]", "contents": "ccs.Tween" },{ "trigger": "ccsm_DisplayManager [lua_cocos2dx_studio_auto_api]", "contents": "ccs.DisplayManager" },{ "trigger": "ccsm_Bone [lua_cocos2dx_studio_auto_api]", "contents": "ccs.Bone" },{ "trigger": "ccsm_BatchNode [lua_cocos2dx_studio_auto_api]", "contents": "ccs.BatchNode" },{ "trigger": "ccsm_ArmatureAnimation [lua_cocos2dx_studio_auto_api]", "contents": "ccs.ArmatureAnimation" },{ "trigger": "ccsm_ArmatureDataManager [lua_cocos2dx_studio_auto_api]", "contents": "ccs.ArmatureDataManager" },{ "trigger": "ccsm_Armature [lua_cocos2dx_studio_auto_api]", "contents": "ccs.Armature" },{ "trigger": "ccsm_Skin [lua_cocos2dx_studio_auto_api]", "contents": "ccs.Skin" },{ "trigger": "ccsm_ComAttribute [lua_cocos2dx_studio_auto_api]", "contents": "ccs.ComAttribute" },{ "trigger": "ccsm_ComAudio [lua_cocos2dx_studio_auto_api]", "contents": "ccs.ComAudio" },{ "trigger": "ccsm_ComController [lua_cocos2dx_studio_auto_api]", "contents": "ccs.ComController" },{ "trigger": "ccsm_ComRender [lua_cocos2dx_studio_auto_api]", "contents": "ccs.ComRender" },{ "trigger": "ccsm_GUIReader [lua_cocos2dx_studio_auto_api]", "contents": "ccs.GUIReader" },{ "trigger": "ccsm_SceneReader [lua_cocos2dx_studio_auto_api]", "contents": "ccs.SceneReader" },{ "trigger": "s_create(float:#float,scene:#cc.Scene,orientation:#cc.TransitionScene::Orientation):ret (return value: cc.TransitionSceneOriented):#TransitionSceneOriented [TransitionSceneOriented]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene},${3:orientation:#cc.TransitionScene::Orientation})" },{ "trigger": "s_create():ret (return value: cc.EventListenerPhysicsContact):#EventListenerPhysicsContact [EventListenerPhysicsContact]", "contents": "create()" },{ "trigger": "s_clone():ret (return value: cc.EventListenerPhysicsContact):#EventListenerPhysicsContact [EventListenerPhysicsContact]", "contents": "clone()" },{ "trigger": "s_checkAvailable():ret (return value: bool):#bool [EventListenerPhysicsContact]", "contents": "checkAvailable()" },{ "trigger": "s_loadTexture(str:#string,texturerestype:#ccui.Widget::TextureResType):void [ImageView]", "contents": "loadTexture(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_setScale9Enabled(bool:#bool):void [ImageView]", "contents": "setScale9Enabled(${1:bool:#bool})" },{ "trigger": "s_setTextureRect(rect:#rect_table):void [ImageView]", "contents": "setTextureRect(${1:rect:#rect_table})" },{ "trigger": "s_setCapInsets(rect:#rect_table):void [ImageView]", "contents": "setCapInsets(${1:rect:#rect_table})" },{ "trigger": "s_getCapInsets():ret (return value: rect_table):#rect_table [ImageView]", "contents": "getCapInsets()" },{ "trigger": "s_isScale9Enabled():ret (return value: bool):#bool [ImageView]", "contents": "isScale9Enabled()" },{ "trigger": "f_create(string, ccui.Widget::TextureResType):ret (retunr value: ccui.ImageView):#ImageView [ImageView]", "contents": "create(${1:string},${2: ccui.Widget::TextureResType})" },{ "trigger": "f_create():ret (retunr value: ccui.ImageView):#ImageView [ImageView]", "contents": "create(${1:})" },{ "trigger": "s_create(str:#string,texturerestype:#ccui.Widget::TextureResType):ret (retunr value: ccui.ImageView):#ImageView [ImageView]", "contents": "create(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [ImageView]", "contents": "createInstance()" },{ "trigger": "s_getVirtualRenderer():ret (return value: cc.Node):#Node [ImageView]", "contents": "getVirtualRenderer()" },{ "trigger": "s_getDescription():ret (return value: string):#string [ImageView]", "contents": "getDescription()" },{ "trigger": "s_getVirtualRendererSize():ret (return value: size_table):#size_table [ImageView]", "contents": "getVirtualRendererSize()" },{ "trigger": "s_ignoreContentAdaptWithSize(bool:#bool):void [ImageView]", "contents": "ignoreContentAdaptWithSize(${1:bool:#bool})" },{ "trigger": "s_ImageView():void [ImageView]", "contents": "ImageView()" },{ "trigger": "s_getInterval():ret (return value: float):#float [Timer]", "contents": "getInterval()" },{ "trigger": "s_setupTimerWithInterval(float:#float,int int:#unsigned,float:#float):void [Timer]", "contents": "setupTimerWithInterval(${1:float:#float},${2:int int:#unsigned},${3:float:#float})" },{ "trigger": "s_setInterval(float:#float):void [Timer]", "contents": "setInterval(${1:float:#float})" },{ "trigger": "s_update(float:#float):void [Timer]", "contents": "update(${1:float:#float})" },{ "trigger": "s_trigger():void [Timer]", "contents": "trigger()" },{ "trigger": "s_cancel():void [Timer]", "contents": "cancel()" },{ "trigger": "s_init(int:#int,color3b:#color3b_table,char char:#unsigned):ret (return value: bool):#bool [RichElement]", "contents": "init(${1:int:#int},${2:color3b:#color3b_table},${3:char char:#unsigned})" },{ "trigger": "s_RichElement():void [RichElement]", "contents": "RichElement()" },{ "trigger": "s_getSpeedScale():ret (return value: float):#float [ArmatureAnimation]", "contents": "getSpeedScale()" },{ "trigger": "s_pause():void [ArmatureAnimation]", "contents": "pause()" },{ "trigger": "s_setSpeedScale(float:#float):void [ArmatureAnimation]", "contents": "setSpeedScale(${1:float:#float})" },{ "trigger": "s_init(armature:#ccs.Armature):ret (return value: bool):#bool [ArmatureAnimation]", "contents": "init(${1:armature:#ccs.Armature})" },{ "trigger": "s_playWithIndexes(array:#array_table,int:#int,bool:#bool):void [ArmatureAnimation]", "contents": "playWithIndexes(${1:array:#array_table},${2:int:#int},${3:bool:#bool})" },{ "trigger": "s_play(str:#string,int:#int,int:#int):void [ArmatureAnimation]", "contents": "play(${1:str:#string},${2:int:#int},${3:int:#int})" },{ "trigger": "s_gotoAndPause(int:#int):void [ArmatureAnimation]", "contents": "gotoAndPause(${1:int:#int})" },{ "trigger": "s_resume():void [ArmatureAnimation]", "contents": "resume()" },{ "trigger": "s_stop():void [ArmatureAnimation]", "contents": "stop()" },{ "trigger": "s_update(float:#float):void [ArmatureAnimation]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getAnimationData():ret (return value: ccs.AnimationData):#AnimationData [ArmatureAnimation]", "contents": "getAnimationData()" },{ "trigger": "s_playWithIndex(int:#int,int:#int,int:#int):void [ArmatureAnimation]", "contents": "playWithIndex(${1:int:#int},${2:int:#int},${3:int:#int})" },{ "trigger": "s_getCurrentMovementID():ret (return value: string):#string [ArmatureAnimation]", "contents": "getCurrentMovementID()" },{ "trigger": "s_setAnimationData(animationdata:#ccs.AnimationData):void [ArmatureAnimation]", "contents": "setAnimationData(${1:animationdata:#ccs.AnimationData})" },{ "trigger": "s_gotoAndPlay(int:#int):void [ArmatureAnimation]", "contents": "gotoAndPlay(${1:int:#int})" },{ "trigger": "s_playWithNames(array:#array_table,int:#int,bool:#bool):void [ArmatureAnimation]", "contents": "playWithNames(${1:array:#array_table},${2:int:#int},${3:bool:#bool})" },{ "trigger": "s_getMovementCount():ret (return value: long):#long [ArmatureAnimation]", "contents": "getMovementCount()" },{ "trigger": "s_create(armature:#ccs.Armature):ret (return value: ccs.ArmatureAnimation):#ArmatureAnimation [ArmatureAnimation]", "contents": "create(${1:armature:#ccs.Armature})" },{ "trigger": "s_ArmatureAnimation():void [ArmatureAnimation]", "contents": "ArmatureAnimation()" },{ "trigger": "s_getContourData(int:#int):ret (return value: ccs.ContourData):#ContourData [TextureData]", "contents": "getContourData(${1:int:#int})" },{ "trigger": "s_init():ret (return value: bool):#bool [TextureData]", "contents": "init()" },{ "trigger": "s_addContourData(contourdata:#ccs.ContourData):void [TextureData]", "contents": "addContourData(${1:contourdata:#ccs.ContourData})" },{ "trigger": "s_create():ret (return value: ccs.TextureData):#TextureData [TextureData]", "contents": "create()" },{ "trigger": "s_TextureData():void [TextureData]", "contents": "TextureData()" },{ "trigger": "s_getPoints():ret (return value: point_table):#point_table [CardinalSplineTo]", "contents": "getPoints()" },{ "trigger": "s_updatePosition(vec2:#cc.Vec2):void [CardinalSplineTo]", "contents": "updatePosition(${1:vec2:#cc.Vec2})" },{ "trigger": "s_initWithDuration(float:#float,pointarray:#point_table,float:#float):ret (return value: bool):#bool [CardinalSplineTo]", "contents": "initWithDuration(${1:float:#float},${2:pointarray:#point_table},${3:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [CardinalSplineTo]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.CardinalSplineTo):#CardinalSplineTo [CardinalSplineTo]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.CardinalSplineTo):#CardinalSplineTo [CardinalSplineTo]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [CardinalSplineTo]", "contents": "update(${1:float:#float})" },{ "trigger": "s_CardinalSplineTo():void [CardinalSplineTo]", "contents": "CardinalSplineTo()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionProgressRadialCW):#TransitionProgressRadialCW [TransitionProgressRadialCW]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "f_new():ret (return value: table):#table [ObjectFactory]", "contents": "new()" },{ "trigger": "f_getInstance():ret (return value: table):#table [ObjectFactory]", "contents": "getInstance()" },{ "trigger": "f_destroyInstance():void [ObjectFactory]", "contents": "destroyInstance()" },{ "trigger": "f_registerType(t:#table):void [ObjectFactory]", "contents": "registerType(${1:t:#table})" },{ "trigger": "ObjectFactorym__typeMap [ObjectFactory]", "contents": "ObjectFactory._typeMap" },{ "trigger": "ObjectFactorym__instance [ObjectFactory]", "contents": "ObjectFactory._instance" },{ "trigger": "s_setStoragePath(char:#char):void [AssetsManager]", "contents": "setStoragePath(${1:char:#char})" },{ "trigger": "s_setPackageUrl(char:#char):void [AssetsManager]", "contents": "setPackageUrl(${1:char:#char})" },{ "trigger": "s_checkUpdate():ret (return value: bool):#bool [AssetsManager]", "contents": "checkUpdate()" },{ "trigger": "s_getStoragePath():ret (return value: char):#char [AssetsManager]", "contents": "getStoragePath()" },{ "trigger": "s_update():void [AssetsManager]", "contents": "update()" },{ "trigger": "s_setConnectionTimeout(int int:#unsigned):void [AssetsManager]", "contents": "setConnectionTimeout(${1:int int:#unsigned})" },{ "trigger": "s_setVersionFileUrl(char:#char):void [AssetsManager]", "contents": "setVersionFileUrl(${1:char:#char})" },{ "trigger": "s_getPackageUrl():ret (return value: char):#char [AssetsManager]", "contents": "getPackageUrl()" },{ "trigger": "s_getConnectionTimeout():unsigned [AssetsManager]", "contents": "getConnectionTimeout()" },{ "trigger": "s_getVersion():ret (return value: string):#string [AssetsManager]", "contents": "getVersion()" },{ "trigger": "s_getVersionFileUrl():ret (return value: char):#char [AssetsManager]", "contents": "getVersionFileUrl()" },{ "trigger": "s_deleteVersion():void [AssetsManager]", "contents": "deleteVersion()" },{ "trigger": "s_create(char:#char,char:#char,char:#char,func:#function,func:#function,func:#function):ret (return value: cc.AssetsManager):#AssetsManager [AssetsManager]", "contents": "create(${1:char:#char},${2:char:#char},${3:char:#char},${4:func:#function},${5:func:#function},${6:func:#function})" },{ "trigger": "s_AssetsManager():void [AssetsManager]", "contents": "AssetsManager()" },{ "trigger": "s_action():ret (return value: cc.ActionInterval):#ActionInterval [TransitionSlideInB]", "contents": "action()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionSlideInB):#TransitionSlideInB [TransitionSlideInB]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_create():ret (return value: cc.ParticleRain):#ParticleRain [ParticleRain]", "contents": "create()" },{ "trigger": "s_createWithTotalParticles(int:#int):ret (return value: cc.ParticleRain):#ParticleRain [ParticleRain]", "contents": "createWithTotalParticles(${1:int:#int})" },{ "trigger": "BrightStylem_none [BrightStyle]", "contents": "BrightStyle.none" },{ "trigger": "BrightStylem_normal [BrightStyle]", "contents": "BrightStyle.normal" },{ "trigger": "BrightStylem_highlight [BrightStyle]", "contents": "BrightStyle.highlight" },{ "trigger": "s_release():void [Ref]", "contents": "release()" },{ "trigger": "s_retain():void [Ref]", "contents": "retain()" },{ "trigger": "s_getReferenceCount():unsigned [Ref]", "contents": "getReferenceCount()" },{ "trigger": "s_create(float:#float,int int:#unsigned):ret (return value: cc.SplitCols):#SplitCols [SplitCols]", "contents": "create(${1:float:#float},${2:int int:#unsigned})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [SplitCols]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.SplitCols):#SplitCols [SplitCols]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [SplitCols]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getStringLength():ret (return value: long):#long [TextAtlas]", "contents": "getStringLength()" },{ "trigger": "s_getString():ret (return value: string):#string [TextAtlas]", "contents": "getString()" },{ "trigger": "s_setString(str:#string):void [TextAtlas]", "contents": "setString(${1:str:#string})" },{ "trigger": "s_setProperty(str:#string,str:#string,int:#int,int:#int,str:#string):void [TextAtlas]", "contents": "setProperty(${1:str:#string},${2:str:#string},${3:int:#int},${4:int:#int},${5:str:#string})" },{ "trigger": "s_adaptRenderers():void [TextAtlas]", "contents": "adaptRenderers()" },{ "trigger": "f_create(string, string, int, int, string):ret (retunr value: ccui.TextAtlas):#TextAtlas [TextAtlas]", "contents": "create(${1:string},${2: string},${3: int},${4: int},${5: string})" },{ "trigger": "f_create():ret (retunr value: ccui.TextAtlas):#TextAtlas [TextAtlas]", "contents": "create(${1:})" },{ "trigger": "s_create(str:#string,str:#string,int:#int,int:#int,str:#string):ret (retunr value: ccui.TextAtlas):#TextAtlas [TextAtlas]", "contents": "create(${1:str:#string},${2:str:#string},${3:int:#int},${4:int:#int},${5:str:#string})" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [TextAtlas]", "contents": "createInstance()" },{ "trigger": "s_getVirtualRenderer():ret (return value: cc.Node):#Node [TextAtlas]", "contents": "getVirtualRenderer()" },{ "trigger": "s_getDescription():ret (return value: string):#string [TextAtlas]", "contents": "getDescription()" },{ "trigger": "s_getVirtualRendererSize():ret (return value: size_table):#size_table [TextAtlas]", "contents": "getVirtualRendererSize()" },{ "trigger": "s_TextAtlas():void [TextAtlas]", "contents": "TextAtlas()" },{ "trigger": "s_hitTest(physicsshape:#cc.PhysicsShape,physicsshape:#cc.PhysicsShape):ret (return value: bool):#bool [EventListenerPhysicsContactWithShapes]", "contents": "hitTest(${1:physicsshape:#cc.PhysicsShape},${2:physicsshape:#cc.PhysicsShape})" },{ "trigger": "s_create(physicsshape:#cc.PhysicsShape,physicsshape:#cc.PhysicsShape):ret (return value: cc.EventListenerPhysicsContactWithShapes):#EventListenerPhysicsContactWithShapes [EventListenerPhysicsContactWithShapes]", "contents": "create(${1:physicsshape:#cc.PhysicsShape},${2:physicsshape:#cc.PhysicsShape})" },{ "trigger": "s_clone():ret (return value: cc.EventListenerPhysicsContactWithShapes):#EventListenerPhysicsContactWithShapes [EventListenerPhysicsContactWithShapes]", "contents": "clone()" },{ "trigger": "s_updateCellAtIndex(long:#long):void [TableView]", "contents": "updateCellAtIndex(${1:long:#long})" },{ "trigger": "s_setVerticalFillOrder(verticalfillorder:#cc.TableView::VerticalFillOrder):void [TableView]", "contents": "setVerticalFillOrder(${1:verticalfillorder:#cc.TableView::VerticalFillOrder})" },{ "trigger": "s_scrollViewDidZoom(scrollview:#cc.ScrollView):void [TableView]", "contents": "scrollViewDidZoom(${1:scrollview:#cc.ScrollView})" },{ "trigger": "s__updateContentSize():void [TableView]", "contents": "_updateContentSize()" },{ "trigger": "s_getVerticalFillOrder():ret (return value: cc.TableView::VerticalFillOrder):#TableView::VerticalFillOrder [TableView]", "contents": "getVerticalFillOrder()" },{ "trigger": "s_removeCellAtIndex(long:#long):void [TableView]", "contents": "removeCellAtIndex(${1:long:#long})" },{ "trigger": "s_initWithViewSize(size:#size_table,node:#cc.Node):ret (return value: bool):#bool [TableView]", "contents": "initWithViewSize(${1:size:#size_table},${2:node:#cc.Node})" },{ "trigger": "s_scrollViewDidScroll(scrollview:#cc.ScrollView):void [TableView]", "contents": "scrollViewDidScroll(${1:scrollview:#cc.ScrollView})" },{ "trigger": "s_reloadData():void [TableView]", "contents": "reloadData()" },{ "trigger": "s_insertCellAtIndex(long:#long):void [TableView]", "contents": "insertCellAtIndex(${1:long:#long})" },{ "trigger": "s_cellAtIndex(long:#long):ret (return value: cc.TableViewCell):#TableViewCell [TableView]", "contents": "cellAtIndex(${1:long:#long})" },{ "trigger": "s_dequeueCell():ret (return value: cc.TableViewCell):#TableViewCell [TableView]", "contents": "dequeueCell()" },{ "trigger": "s_onTouchMoved(touch:#cc.Touch,event:#cc.Event):void [TableView]", "contents": "onTouchMoved(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_onTouchEnded(touch:#cc.Touch,event:#cc.Event):void [TableView]", "contents": "onTouchEnded(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_onTouchCancelled(touch:#cc.Touch,event:#cc.Event):void [TableView]", "contents": "onTouchCancelled(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_onTouchBegan(touch:#cc.Touch,event:#cc.Event):ret (return value: bool):#bool [TableView]", "contents": "onTouchBegan(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_TableView():void [TableView]", "contents": "TableView()" },{ "trigger": "s_setGravity(lineargravity:#ccui.LinearLayoutParameter::LinearGravity):void [LinearLayoutParameter]", "contents": "setGravity(${1:lineargravity:#ccui.LinearLayoutParameter::LinearGravity})" },{ "trigger": "s_getGravity():ret (return value: ccui.LinearLayoutParameter::LinearGravity):#LinearLayoutParameter::LinearGravity [LinearLayoutParameter]", "contents": "getGravity()" },{ "trigger": "s_create():ret (return value: ccui.LinearLayoutParameter):#LinearLayoutParameter [LinearLayoutParameter]", "contents": "create()" },{ "trigger": "s_createCloneInstance():ret (return value: ccui.LayoutParameter):#LayoutParameter [LinearLayoutParameter]", "contents": "createCloneInstance()" },{ "trigger": "s_copyProperties(layoutparameter:#ccui.LayoutParameter):void [LinearLayoutParameter]", "contents": "copyProperties(${1:layoutparameter:#ccui.LayoutParameter})" },{ "trigger": "s_LinearLayoutParameter():void [LinearLayoutParameter]", "contents": "LinearLayoutParameter()" },{ "trigger": "s_getInnerAction():ret (return value: cc.ActionInterval):#ActionInterval [ActionEase]", "contents": "getInnerAction()" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [ActionEase]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.ActionEase):#ActionEase [ActionEase]", "contents": "clone()" },{ "trigger": "s_stop():void [ActionEase]", "contents": "stop()" },{ "trigger": "s_reverse():ret (return value: cc.ActionEase):#ActionEase [ActionEase]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [ActionEase]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getFriction():ret (return value: float):#float [PhysicsContactPreSolve]", "contents": "getFriction()" },{ "trigger": "s_getRestitution():ret (return value: float):#float [PhysicsContactPreSolve]", "contents": "getRestitution()" },{ "trigger": "s_setFriction(float:#float):void [PhysicsContactPreSolve]", "contents": "setFriction(${1:float:#float})" },{ "trigger": "s_ignore():void [PhysicsContactPreSolve]", "contents": "ignore()" },{ "trigger": "s_getSurfaceVelocity():ret (return value: cc.Vec2):#Vec2 [PhysicsContactPreSolve]", "contents": "getSurfaceVelocity()" },{ "trigger": "s_setSurfaceVelocity(vec2:#cc.Vec2):void [PhysicsContactPreSolve]", "contents": "setSurfaceVelocity(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setRestitution(float:#float):void [PhysicsContactPreSolve]", "contents": "setRestitution(${1:float:#float})" },{ "trigger": "s_sphericalRadius(float:#float,float:#float,float:#float):void [OrbitCamera]", "contents": "sphericalRadius(${1:float:#float},${2:float:#float},${3:float:#float})" },{ "trigger": "s_create(float:#float,float:#float,float:#float,float:#float,float:#float,float:#float,float:#float):ret (return value: cc.OrbitCamera):#OrbitCamera [OrbitCamera]", "contents": "create(${1:float:#float},${2:float:#float},${3:float:#float},${4:float:#float},${5:float:#float},${6:float:#float},${7:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [OrbitCamera]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.OrbitCamera):#OrbitCamera [OrbitCamera]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [OrbitCamera]", "contents": "update(${1:float:#float})" },{ "trigger": "f_create(float, cc.Scene):ret (retunr value: cc.TransitionFade):#TransitionFade [TransitionFade]", "contents": "create(${1:float},${2: cc.Scene})" },{ "trigger": "f_create(float, cc.Scene, color3b_table):ret (retunr value: cc.TransitionFade):#TransitionFade [TransitionFade]", "contents": "create(${1:float},${2: cc.Scene},${3: color3b_table})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene,color3b:#color3b_table):ret (retunr value: cc.TransitionFade):#TransitionFade [TransitionFade]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene},${3:color3b:#color3b_table})" },{ "trigger": "f_addSpriteFramesWithFile(string, string):void [SpriteFrameCache]", "contents": "addSpriteFramesWithFile(${1:string},${2: string})" },{ "trigger": "f_addSpriteFramesWithFile(string):void [SpriteFrameCache]", "contents": "addSpriteFramesWithFile(${1:string})" },{ "trigger": "f_addSpriteFramesWithFile(string, cc.Texture2D):void [SpriteFrameCache]", "contents": "addSpriteFramesWithFile(${1:string},${2: cc.Texture2D})" },{ "trigger": "s_addSpriteFramesWithFile(str:#string,texture2d:#cc.Texture2D):void [SpriteFrameCache]", "contents": "addSpriteFramesWithFile(${1:str:#string},${2:texture2d:#cc.Texture2D})" },{ "trigger": "s_addSpriteFrame(spriteframe:#cc.SpriteFrame,str:#string):void [SpriteFrameCache]", "contents": "addSpriteFrame(${1:spriteframe:#cc.SpriteFrame},${2:str:#string})" },{ "trigger": "s_removeUnusedSpriteFrames():void [SpriteFrameCache]", "contents": "removeUnusedSpriteFrames()" },{ "trigger": "s_getSpriteFrameByName(str:#string):ret (return value: cc.SpriteFrame):#SpriteFrame [SpriteFrameCache]", "contents": "getSpriteFrameByName(${1:str:#string})" },{ "trigger": "s_removeSpriteFramesFromFile(str:#string):void [SpriteFrameCache]", "contents": "removeSpriteFramesFromFile(${1:str:#string})" },{ "trigger": "s_init():ret (return value: bool):#bool [SpriteFrameCache]", "contents": "init()" },{ "trigger": "s_removeSpriteFrames():void [SpriteFrameCache]", "contents": "removeSpriteFrames()" },{ "trigger": "s_removeSpriteFramesFromTexture(texture2d:#cc.Texture2D):void [SpriteFrameCache]", "contents": "removeSpriteFramesFromTexture(${1:texture2d:#cc.Texture2D})" },{ "trigger": "s_removeSpriteFrameByName(str:#string):void [SpriteFrameCache]", "contents": "removeSpriteFrameByName(${1:str:#string})" },{ "trigger": "s_destroyInstance():void [SpriteFrameCache]", "contents": "destroyInstance()" },{ "trigger": "s_getInstance():ret (return value: cc.SpriteFrameCache):#SpriteFrameCache [SpriteFrameCache]", "contents": "getInstance()" },{ "trigger": "s_drawQuadraticBezier(vec2:#cc.Vec2,vec2:#cc.Vec2,vec2:#cc.Vec2,int int:#unsigned,color4f:#color4f_table):void [DrawNode]", "contents": "drawQuadraticBezier(${1:vec2:#cc.Vec2},${2:vec2:#cc.Vec2},${3:vec2:#cc.Vec2},${4:int int:#unsigned},${5:color4f:#color4f_table})" },{ "trigger": "s_onDraw(mat4:#cc.Mat4,bool:#bool):void [DrawNode]", "contents": "onDraw(${1:mat4:#cc.Mat4},${2:bool:#bool})" },{ "trigger": "s_clear():void [DrawNode]", "contents": "clear()" },{ "trigger": "s_drawTriangle(vec2:#cc.Vec2,vec2:#cc.Vec2,vec2:#cc.Vec2,color4f:#color4f_table):void [DrawNode]", "contents": "drawTriangle(${1:vec2:#cc.Vec2},${2:vec2:#cc.Vec2},${3:vec2:#cc.Vec2},${4:color4f:#color4f_table})" },{ "trigger": "s_drawDot(vec2:#cc.Vec2,float:#float,color4f:#color4f_table):void [DrawNode]", "contents": "drawDot(${1:vec2:#cc.Vec2},${2:float:#float},${3:color4f:#color4f_table})" },{ "trigger": "s_drawCubicBezier(vec2:#cc.Vec2,vec2:#cc.Vec2,vec2:#cc.Vec2,vec2:#cc.Vec2,int int:#unsigned,color4f:#color4f_table):void [DrawNode]", "contents": "drawCubicBezier(${1:vec2:#cc.Vec2},${2:vec2:#cc.Vec2},${3:vec2:#cc.Vec2},${4:vec2:#cc.Vec2},${5:int int:#unsigned},${6:color4f:#color4f_table})" },{ "trigger": "s_drawSegment(vec2:#cc.Vec2,vec2:#cc.Vec2,float:#float,color4f:#color4f_table):void [DrawNode]", "contents": "drawSegment(${1:vec2:#cc.Vec2},${2:vec2:#cc.Vec2},${3:float:#float},${4:color4f:#color4f_table})" },{ "trigger": "s_create():ret (return value: cc.DrawNode):#DrawNode [DrawNode]", "contents": "create()" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [DrawNode]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_getBodyA():ret (return value: cc.PhysicsBody):#PhysicsBody [PhysicsJoint]", "contents": "getBodyA()" },{ "trigger": "s_getBodyB():ret (return value: cc.PhysicsBody):#PhysicsBody [PhysicsJoint]", "contents": "getBodyB()" },{ "trigger": "s_getMaxForce():ret (return value: float):#float [PhysicsJoint]", "contents": "getMaxForce()" },{ "trigger": "s_setMaxForce(float:#float):void [PhysicsJoint]", "contents": "setMaxForce(${1:float:#float})" },{ "trigger": "s_isEnabled():ret (return value: bool):#bool [PhysicsJoint]", "contents": "isEnabled()" },{ "trigger": "s_setEnable(bool:#bool):void [PhysicsJoint]", "contents": "setEnable(${1:bool:#bool})" },{ "trigger": "s_setCollisionEnable(bool:#bool):void [PhysicsJoint]", "contents": "setCollisionEnable(${1:bool:#bool})" },{ "trigger": "s_getWorld():ret (return value: cc.PhysicsWorld):#PhysicsWorld [PhysicsJoint]", "contents": "getWorld()" },{ "trigger": "s_setTag(int:#int):void [PhysicsJoint]", "contents": "setTag(${1:int:#int})" },{ "trigger": "s_removeFormWorld():void [PhysicsJoint]", "contents": "removeFormWorld()" },{ "trigger": "s_isCollisionEnabled():ret (return value: bool):#bool [PhysicsJoint]", "contents": "isCollisionEnabled()" },{ "trigger": "s_getTag():ret (return value: int):#int [PhysicsJoint]", "contents": "getTag()" },{ "trigger": "s_destroy(physicsjoint:#cc.PhysicsJoint):void [PhysicsJoint]", "contents": "destroy(${1:physicsjoint:#cc.PhysicsJoint})" },{ "trigger": "s_getAmplitudeRate():ret (return value: float):#float [Liquid]", "contents": "getAmplitudeRate()" },{ "trigger": "s_setAmplitude(float:#float):void [Liquid]", "contents": "setAmplitude(${1:float:#float})" },{ "trigger": "s_setAmplitudeRate(float:#float):void [Liquid]", "contents": "setAmplitudeRate(${1:float:#float})" },{ "trigger": "s_getAmplitude():ret (return value: float):#float [Liquid]", "contents": "getAmplitude()" },{ "trigger": "s_create(float:#float,size:#size_table,int int:#unsigned,float:#float):ret (return value: cc.Liquid):#Liquid [Liquid]", "contents": "create(${1:float:#float},${2:size:#size_table},${3:int int:#unsigned},${4:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.Liquid):#Liquid [Liquid]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [Liquid]", "contents": "update(${1:float:#float})" },{ "trigger": "PageViewEventTypem_turning [PageViewEventType]", "contents": "PageViewEventType.turning" },{ "trigger": "s_create(bool:#bool):ret (return value: cc.FlipX):#FlipX [FlipX]", "contents": "create(${1:bool:#bool})" },{ "trigger": "s_clone():ret (return value: cc.FlipX):#FlipX [FlipX]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [FlipX]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.FlipX):#FlipX [FlipX]", "contents": "reverse()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionSplitRows):#TransitionSplitRows [TransitionSplitRows]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_action():ret (return value: cc.ActionInterval):#ActionInterval [TransitionSplitRows]", "contents": "action()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval,float:#float):ret (return value: cc.EaseIn):#EaseIn [EaseIn]", "contents": "create(${1:actioninterval:#cc.ActionInterval},${2:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.EaseIn):#EaseIn [EaseIn]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseIn]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseIn):#EaseIn [EaseIn]", "contents": "reverse()" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [BezierTo]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.BezierTo):#BezierTo [BezierTo]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.BezierTo):#BezierTo [BezierTo]", "contents": "reverse()" },{ "trigger": "f_create(float, float, float):ret (retunr value: cc.ScaleTo):#ScaleTo [ScaleTo]", "contents": "create(${1:float},${2: float},${3: float})" },{ "trigger": "f_create(float, float):ret (retunr value: cc.ScaleTo):#ScaleTo [ScaleTo]", "contents": "create(${1:float},${2: float})" },{ "trigger": "f_create(float, float, float, float):ret (retunr value: cc.ScaleTo):#ScaleTo [ScaleTo]", "contents": "create(${1:float},${2: float},${3: float},${4: float})" },{ "trigger": "s_create(float:#float,float:#float,float:#float,float:#float):ret (retunr value: cc.ScaleTo):#ScaleTo [ScaleTo]", "contents": "create(${1:float:#float},${2:float:#float},${3:float:#float},${4:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [ScaleTo]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.ScaleTo):#ScaleTo [ScaleTo]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.ScaleTo):#ScaleTo [ScaleTo]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [ScaleTo]", "contents": "update(${1:float:#float})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionFadeUp):#TransitionFadeUp [TransitionFadeUp]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_actionWithSize(size:#size_table):ret (return value: cc.ActionInterval):#ActionInterval [TransitionFadeUp]", "contents": "actionWithSize(${1:size:#size_table})" },{ "trigger": "s_initWithTileFile(str:#string,str:#string,int:#int,int:#int):ret (return value: bool):#bool [TileMapAtlas]", "contents": "initWithTileFile(${1:str:#string},${2:str:#string},${3:int:#int},${4:int:#int})" },{ "trigger": "s_releaseMap():void [TileMapAtlas]", "contents": "releaseMap()" },{ "trigger": "s_getTileAt(vec2:#cc.Vec2):ret (return value: color3b_table):#color3b_table [TileMapAtlas]", "contents": "getTileAt(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setTile(color3b:#color3b_table,vec2:#cc.Vec2):void [TileMapAtlas]", "contents": "setTile(${1:color3b:#color3b_table},${2:vec2:#cc.Vec2})" },{ "trigger": "s_setTGAInfo(simagetga:#cc.sImageTGA):void [TileMapAtlas]", "contents": "setTGAInfo(${1:simagetga:#cc.sImageTGA})" },{ "trigger": "s_create(str:#string,str:#string,int:#int,int:#int):ret (return value: cc.TileMapAtlas):#TileMapAtlas [TileMapAtlas]", "contents": "create(${1:str:#string},${2:str:#string},${3:int:#int},${4:int:#int})" },{ "trigger": "s_TileMapAtlas():void [TileMapAtlas]", "contents": "TileMapAtlas()" },{ "trigger": "s_getPointsCount():ret (return value: int):#int [PhysicsShapeBox]", "contents": "getPointsCount()" },{ "trigger": "s_getSize():ret (return value: size_table):#size_table [PhysicsShapeBox]", "contents": "getSize()" },{ "trigger": "s_create(size:#size_table,physicsmaterial:#cc.PhysicsMaterial,vec2:#cc.Vec2):ret (return value: cc.PhysicsShapeBox):#PhysicsShapeBox [PhysicsShapeBox]", "contents": "create(${1:size:#size_table},${2:physicsmaterial:#cc.PhysicsMaterial},${3:vec2:#cc.Vec2})" },{ "trigger": "s_calculateArea(size:#size_table):ret (return value: float):#float [PhysicsShapeBox]", "contents": "calculateArea(${1:size:#size_table})" },{ "trigger": "s_calculateMoment(float:#float,size:#size_table,vec2:#cc.Vec2):ret (return value: float):#float [PhysicsShapeBox]", "contents": "calculateMoment(${1:float:#float},${2:size:#size_table},${3:vec2:#cc.Vec2})" },{ "trigger": "s_getOffset():ret (return value: cc.Vec2):#Vec2 [PhysicsShapeBox]", "contents": "getOffset()" },{ "trigger": "s_calculateDefaultMoment():ret (return value: float):#float [PhysicsShapeBox]", "contents": "calculateDefaultMoment()" },{ "trigger": "s_create(float:#float):ret (return value: cc.DelayTime):#DelayTime [DelayTime]", "contents": "create(${1:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.DelayTime):#DelayTime [DelayTime]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [DelayTime]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.DelayTime):#DelayTime [DelayTime]", "contents": "reverse()" },{ "trigger": "s_getGrid():ret (return value: cc.GridBase):#GridBase [GridAction]", "contents": "getGrid()" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [GridAction]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.GridAction):#GridAction [GridAction]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.GridAction):#GridAction [GridAction]", "contents": "reverse()" },{ "trigger": "s_action():ret (return value: cc.ActionInterval):#ActionInterval [TransitionSlideInL]", "contents": "action()" },{ "trigger": "s_easeActionWithAction(actioninterval:#cc.ActionInterval):ret (return value: cc.ActionInterval):#ActionInterval [TransitionSlideInL]", "contents": "easeActionWithAction(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionSlideInL):#TransitionSlideInL [TransitionSlideInL]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_action():ret (return value: cc.ActionInterval):#ActionInterval [TransitionSlideInT]", "contents": "action()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionSlideInT):#TransitionSlideInT [TransitionSlideInT]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "f_create(float, float, float):ret (retunr value: cc.RotateBy):#RotateBy [RotateBy]", "contents": "create(${1:float},${2: float},${3: float})" },{ "trigger": "f_create(float, float):ret (retunr value: cc.RotateBy):#RotateBy [RotateBy]", "contents": "create(${1:float},${2: float})" },{ "trigger": "f_create(float, cc.Vec3):ret (retunr value: cc.RotateBy):#RotateBy [RotateBy]", "contents": "create(${1:float},${2: cc.Vec3})" },{ "trigger": "s_create(float:#float,float:#float,float:#float):ret (retunr value: cc.RotateBy):#RotateBy [RotateBy]", "contents": "create(${1:float:#float},${2:float:#float},${3:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [RotateBy]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.RotateBy):#RotateBy [RotateBy]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.RotateBy):#RotateBy [RotateBy]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [RotateBy]", "contents": "update(${1:float:#float})" },{ "trigger": "s_easeActionWithAction(actioninterval:#cc.ActionInterval):ret (return value: cc.ActionInterval):#ActionInterval [TransitionEaseScene]", "contents": "easeActionWithAction(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_reloadTexture(str:#string):ret (return value: bool):#bool [TextureCache]", "contents": "reloadTexture(${1:str:#string})" },{ "trigger": "s_removeTextureForKey(str:#string):void [TextureCache]", "contents": "removeTextureForKey(${1:str:#string})" },{ "trigger": "s_removeAllTextures():void [TextureCache]", "contents": "removeAllTextures()" },{ "trigger": "s_getDescription():ret (return value: string):#string [TextureCache]", "contents": "getDescription()" },{ "trigger": "s_getCachedTextureInfo():ret (return value: string):#string [TextureCache]", "contents": "getCachedTextureInfo()" },{ "trigger": "f_addImage(cc.Image, string):ret (retunr value: cc.Texture2D):#Texture2D [TextureCache]", "contents": "addImage(${1:cc.Image},${2: string})" },{ "trigger": "f_addImage(string):ret (retunr value: cc.Texture2D):#Texture2D [TextureCache]", "contents": "addImage(${1:string})" },{ "trigger": "s_addImage(image:#cc.Image,str:#string):ret (retunr value: cc.Texture2D):#Texture2D [TextureCache]", "contents": "addImage(${1:image:#cc.Image},${2:str:#string})" },{ "trigger": "s_getTextureForKey(str:#string):ret (return value: cc.Texture2D):#Texture2D [TextureCache]", "contents": "getTextureForKey(${1:str:#string})" },{ "trigger": "s_removeUnusedTextures():void [TextureCache]", "contents": "removeUnusedTextures()" },{ "trigger": "s_removeTexture(texture2d:#cc.Texture2D):void [TextureCache]", "contents": "removeTexture(${1:texture2d:#cc.Texture2D})" },{ "trigger": "s_waitForQuit():void [TextureCache]", "contents": "waitForQuit()" },{ "trigger": "s_TextureCache():void [TextureCache]", "contents": "TextureCache()" },{ "trigger": "s_execute():void [CallFunc]", "contents": "execute()" },{ "trigger": "s_getTargetCallback():ret (return value: cc.Ref):#Ref [CallFunc]", "contents": "getTargetCallback()" },{ "trigger": "s_setTargetCallback(ref:#cc.Ref):void [CallFunc]", "contents": "setTargetCallback(${1:ref:#cc.Ref})" },{ "trigger": "s_clone():ret (return value: cc.CallFunc):#CallFunc [CallFunc]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [CallFunc]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.CallFunc):#CallFunc [CallFunc]", "contents": "reverse()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionMoveInT):#TransitionMoveInT [TransitionMoveInT]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_setEnabled(bool:#bool):void [ControlColourPicker]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_getHuePicker():ret (return value: cc.ControlHuePicker):#ControlHuePicker [ControlColourPicker]", "contents": "getHuePicker()" },{ "trigger": "s_setColor(color3b:#color3b_table):void [ControlColourPicker]", "contents": "setColor(${1:color3b:#color3b_table})" },{ "trigger": "s_hueSliderValueChanged(ref:#cc.Ref,eventtype:#cc.Control::EventType):void [ControlColourPicker]", "contents": "hueSliderValueChanged(${1:ref:#cc.Ref},${2:eventtype:#cc.Control::EventType})" },{ "trigger": "s_getcolourPicker():ret (return value: cc.ControlSaturationBrightnessPicker):#ControlSaturationBrightnessPicker [ControlColourPicker]", "contents": "getcolourPicker()" },{ "trigger": "s_setBackground(sprite:#cc.Sprite):void [ControlColourPicker]", "contents": "setBackground(${1:sprite:#cc.Sprite})" },{ "trigger": "s_init():ret (return value: bool):#bool [ControlColourPicker]", "contents": "init()" },{ "trigger": "s_setcolourPicker(controlsaturationbrightnesspicker:#cc.ControlSaturationBrightnessPicker):void [ControlColourPicker]", "contents": "setcolourPicker(${1:controlsaturationbrightnesspicker:#cc.ControlSaturationBrightnessPicker})" },{ "trigger": "s_colourSliderValueChanged(ref:#cc.Ref,eventtype:#cc.Control::EventType):void [ControlColourPicker]", "contents": "colourSliderValueChanged(${1:ref:#cc.Ref},${2:eventtype:#cc.Control::EventType})" },{ "trigger": "s_setHuePicker(controlhuepicker:#cc.ControlHuePicker):void [ControlColourPicker]", "contents": "setHuePicker(${1:controlhuepicker:#cc.ControlHuePicker})" },{ "trigger": "s_getBackground():ret (return value: cc.Sprite):#Sprite [ControlColourPicker]", "contents": "getBackground()" },{ "trigger": "s_create():ret (return value: cc.ControlColourPicker):#ControlColourPicker [ControlColourPicker]", "contents": "create()" },{ "trigger": "s_ControlColourPicker():void [ControlColourPicker]", "contents": "ControlColourPicker()" },{ "trigger": "s_getTitleText():ret (return value: string):#string [Button]", "contents": "getTitleText()" },{ "trigger": "s_setTitleFontSize(float:#float):void [Button]", "contents": "setTitleFontSize(${1:float:#float})" },{ "trigger": "s_setScale9Enabled(bool:#bool):void [Button]", "contents": "setScale9Enabled(${1:bool:#bool})" },{ "trigger": "s_getCapInsetsDisabledRenderer():ret (return value: rect_table):#rect_table [Button]", "contents": "getCapInsetsDisabledRenderer()" },{ "trigger": "s_setTitleColor(color3b:#color3b_table):void [Button]", "contents": "setTitleColor(${1:color3b:#color3b_table})" },{ "trigger": "s_setCapInsetsDisabledRenderer(rect:#rect_table):void [Button]", "contents": "setCapInsetsDisabledRenderer(${1:rect:#rect_table})" },{ "trigger": "s_setCapInsets(rect:#rect_table):void [Button]", "contents": "setCapInsets(${1:rect:#rect_table})" },{ "trigger": "s_loadTextureDisabled(str:#string,texturerestype:#ccui.Widget::TextureResType):void [Button]", "contents": "loadTextureDisabled(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_setTitleText(str:#string):void [Button]", "contents": "setTitleText(${1:str:#string})" },{ "trigger": "s_setCapInsetsNormalRenderer(rect:#rect_table):void [Button]", "contents": "setCapInsetsNormalRenderer(${1:rect:#rect_table})" },{ "trigger": "s_loadTexturePressed(str:#string,texturerestype:#ccui.Widget::TextureResType):void [Button]", "contents": "loadTexturePressed(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_setTitleFontName(str:#string):void [Button]", "contents": "setTitleFontName(${1:str:#string})" },{ "trigger": "s_getCapInsetsNormalRenderer():ret (return value: rect_table):#rect_table [Button]", "contents": "getCapInsetsNormalRenderer()" },{ "trigger": "s_getCapInsetsPressedRenderer():ret (return value: rect_table):#rect_table [Button]", "contents": "getCapInsetsPressedRenderer()" },{ "trigger": "s_loadTextures(str:#string,str:#string,str:#string,texturerestype:#ccui.Widget::TextureResType):void [Button]", "contents": "loadTextures(${1:str:#string},${2:str:#string},${3:str:#string},${4:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_isScale9Enabled():ret (return value: bool):#bool [Button]", "contents": "isScale9Enabled()" },{ "trigger": "s_loadTextureNormal(str:#string,texturerestype:#ccui.Widget::TextureResType):void [Button]", "contents": "loadTextureNormal(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_setCapInsetsPressedRenderer(rect:#rect_table):void [Button]", "contents": "setCapInsetsPressedRenderer(${1:rect:#rect_table})" },{ "trigger": "s_getTitleFontSize():ret (return value: float):#float [Button]", "contents": "getTitleFontSize()" },{ "trigger": "s_getTitleFontName():ret (return value: string):#string [Button]", "contents": "getTitleFontName()" },{ "trigger": "s_getTitleColor():ret (return value: color3b_table):#color3b_table [Button]", "contents": "getTitleColor()" },{ "trigger": "s_setPressedActionEnabled(bool:#bool):void [Button]", "contents": "setPressedActionEnabled(${1:bool:#bool})" },{ "trigger": "f_create(string, string, string, ccui.Widget::TextureResType):ret (retunr value: ccui.Button):#Button [Button]", "contents": "create(${1:string},${2: string},${3: string},${4: ccui.Widget::TextureResType})" },{ "trigger": "f_create():ret (retunr value: ccui.Button):#Button [Button]", "contents": "create(${1:})" },{ "trigger": "s_create(str:#string,str:#string,str:#string,texturerestype:#ccui.Widget::TextureResType):ret (retunr value: ccui.Button):#Button [Button]", "contents": "create(${1:str:#string},${2:str:#string},${3:str:#string},${4:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [Button]", "contents": "createInstance()" },{ "trigger": "s_getVirtualRenderer():ret (return value: cc.Node):#Node [Button]", "contents": "getVirtualRenderer()" },{ "trigger": "s_getDescription():ret (return value: string):#string [Button]", "contents": "getDescription()" },{ "trigger": "s_getVirtualRendererSize():ret (return value: size_table):#size_table [Button]", "contents": "getVirtualRendererSize()" },{ "trigger": "s_ignoreContentAdaptWithSize(bool:#bool):void [Button]", "contents": "ignoreContentAdaptWithSize(${1:bool:#bool})" },{ "trigger": "s_Button():void [Button]", "contents": "Button()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionFadeBL):#TransitionFadeBL [TransitionFadeBL]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_actionWithSize(size:#size_table):ret (return value: cc.ActionInterval):#ActionInterval [TransitionFadeBL]", "contents": "actionWithSize(${1:size:#size_table})" },{ "trigger": "ScrollviewEventTypem_scrollToTop [ScrollviewEventType]", "contents": "ScrollviewEventType.scrollToTop" },{ "trigger": "ScrollviewEventTypem_scrollToBottom [ScrollviewEventType]", "contents": "ScrollviewEventType.scrollToBottom" },{ "trigger": "ScrollviewEventTypem_scrollToLeft [ScrollviewEventType]", "contents": "ScrollviewEventType.scrollToLeft" },{ "trigger": "ScrollviewEventTypem_scrollToRight [ScrollviewEventType]", "contents": "ScrollviewEventType.scrollToRight" },{ "trigger": "ScrollviewEventTypem_scrolling [ScrollviewEventType]", "contents": "ScrollviewEventType.scrolling" },{ "trigger": "ScrollviewEventTypem_bounceTop [ScrollviewEventType]", "contents": "ScrollviewEventType.bounceTop" },{ "trigger": "ScrollviewEventTypem_bounceBottom [ScrollviewEventType]", "contents": "ScrollviewEventType.bounceBottom" },{ "trigger": "ScrollviewEventTypem_bounceLeft [ScrollviewEventType]", "contents": "ScrollviewEventType.bounceLeft" },{ "trigger": "ScrollviewEventTypem_bounceRight [ScrollviewEventType]", "contents": "ScrollviewEventType.bounceRight" },{ "trigger": "LayoutTypem_ABSOLUTE [LayoutType]", "contents": "LayoutType.ABSOLUTE" },{ "trigger": "LayoutTypem_VERTICAL [LayoutType]", "contents": "LayoutType.VERTICAL" },{ "trigger": "LayoutTypem_HORIZONTAL [LayoutType]", "contents": "LayoutType.HORIZONTAL" },{ "trigger": "LayoutTypem_RELATIVE [LayoutType]", "contents": "LayoutType.RELATIVE" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [Action]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_setOriginalTarget(node:#cc.Node):void [Action]", "contents": "setOriginalTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.Action):#Action [Action]", "contents": "clone()" },{ "trigger": "s_getOriginalTarget():ret (return value: cc.Node):#Node [Action]", "contents": "getOriginalTarget()" },{ "trigger": "s_stop():void [Action]", "contents": "stop()" },{ "trigger": "s_update(float:#float):void [Action]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getTarget():ret (return value: cc.Node):#Node [Action]", "contents": "getTarget()" },{ "trigger": "s_step(float:#float):void [Action]", "contents": "step(${1:float:#float})" },{ "trigger": "s_setTag(int:#int):void [Action]", "contents": "setTag(${1:int:#int})" },{ "trigger": "s_getTag():ret (return value: int):#int [Action]", "contents": "getTag()" },{ "trigger": "s_setTarget(node:#cc.Node):void [Action]", "contents": "setTarget(${1:node:#cc.Node})" },{ "trigger": "s_isDone():ret (return value: bool):#bool [Action]", "contents": "isDone()" },{ "trigger": "s_reverse():ret (return value: cc.Action):#Action [Action]", "contents": "reverse()" },{ "trigger": "s_stopAllEffects():void [ComAudio]", "contents": "stopAllEffects()" },{ "trigger": "s_getEffectsVolume():ret (return value: float):#float [ComAudio]", "contents": "getEffectsVolume()" },{ "trigger": "s_stopEffect(int int:#unsigned):void [ComAudio]", "contents": "stopEffect(${1:int int:#unsigned})" },{ "trigger": "s_getBackgroundMusicVolume():ret (return value: float):#float [ComAudio]", "contents": "getBackgroundMusicVolume()" },{ "trigger": "s_willPlayBackgroundMusic():ret (return value: bool):#bool [ComAudio]", "contents": "willPlayBackgroundMusic()" },{ "trigger": "s_setBackgroundMusicVolume(float:#float):void [ComAudio]", "contents": "setBackgroundMusicVolume(${1:float:#float})" },{ "trigger": "s_end():void [ComAudio]", "contents": "end()" },{ "trigger": "f_stopBackgroundMusic():void [ComAudio]", "contents": "stopBackgroundMusic(${1:})" },{ "trigger": "f_stopBackgroundMusic(bool):void [ComAudio]", "contents": "stopBackgroundMusic(${1:bool})" },{ "trigger": "s_stopBackgroundMusic(bool:#bool):void [ComAudio]", "contents": "stopBackgroundMusic(${1:bool:#bool})" },{ "trigger": "s_pauseBackgroundMusic():void [ComAudio]", "contents": "pauseBackgroundMusic()" },{ "trigger": "s_isBackgroundMusicPlaying():ret (return value: bool):#bool [ComAudio]", "contents": "isBackgroundMusicPlaying()" },{ "trigger": "s_isLoop():ret (return value: bool):#bool [ComAudio]", "contents": "isLoop()" },{ "trigger": "s_resumeAllEffects():void [ComAudio]", "contents": "resumeAllEffects()" },{ "trigger": "s_pauseAllEffects():void [ComAudio]", "contents": "pauseAllEffects()" },{ "trigger": "s_preloadBackgroundMusic(char:#char):void [ComAudio]", "contents": "preloadBackgroundMusic(${1:char:#char})" },{ "trigger": "f_playBackgroundMusic(char):void [ComAudio]", "contents": "playBackgroundMusic(${1:char})" },{ "trigger": "f_playBackgroundMusic(char, bool):void [ComAudio]", "contents": "playBackgroundMusic(${1:char},${2: bool})" },{ "trigger": "f_playBackgroundMusic():void [ComAudio]", "contents": "playBackgroundMusic(${1:})" },{ "trigger": "s_playBackgroundMusic(char:#char,bool:#bool):void [ComAudio]", "contents": "playBackgroundMusic(${1:char:#char},${2:bool:#bool})" },{ "trigger": "f_playEffect(char):unsigned [ComAudio]", "contents": "playEffect(${1:char})" },{ "trigger": "f_playEffect(char, bool):unsigned [ComAudio]", "contents": "playEffect(${1:char},${2: bool})" },{ "trigger": "f_playEffect():unsigned [ComAudio]", "contents": "playEffect(${1:})" },{ "trigger": "s_playEffect(char:#char,bool:#bool):unsigned [ComAudio]", "contents": "playEffect(${1:char:#char},${2:bool:#bool})" },{ "trigger": "s_preloadEffect(char:#char):void [ComAudio]", "contents": "preloadEffect(${1:char:#char})" },{ "trigger": "s_setLoop(bool:#bool):void [ComAudio]", "contents": "setLoop(${1:bool:#bool})" },{ "trigger": "s_unloadEffect(char:#char):void [ComAudio]", "contents": "unloadEffect(${1:char:#char})" },{ "trigger": "s_rewindBackgroundMusic():void [ComAudio]", "contents": "rewindBackgroundMusic()" },{ "trigger": "s_pauseEffect(int int:#unsigned):void [ComAudio]", "contents": "pauseEffect(${1:int int:#unsigned})" },{ "trigger": "s_resumeBackgroundMusic():void [ComAudio]", "contents": "resumeBackgroundMusic()" },{ "trigger": "s_setFile(char:#char):void [ComAudio]", "contents": "setFile(${1:char:#char})" },{ "trigger": "s_setEffectsVolume(float:#float):void [ComAudio]", "contents": "setEffectsVolume(${1:float:#float})" },{ "trigger": "s_getFile():ret (return value: char):#char [ComAudio]", "contents": "getFile()" },{ "trigger": "s_resumeEffect(int int:#unsigned):void [ComAudio]", "contents": "resumeEffect(${1:int int:#unsigned})" },{ "trigger": "s_create():ret (return value: ccs.ComAudio):#ComAudio [ComAudio]", "contents": "create()" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [ComAudio]", "contents": "createInstance()" },{ "trigger": "s_setEnabled(bool:#bool):void [ComAudio]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_isEnabled():ret (return value: bool):#bool [ComAudio]", "contents": "isEnabled()" },{ "trigger": "s_serialize(void:#void):ret (return value: bool):#bool [ComAudio]", "contents": "serialize(${1:void:#void})" },{ "trigger": "s_init():ret (return value: bool):#bool [ComAudio]", "contents": "init()" },{ "trigger": "s_setAnchr2(vec2:#cc.Vec2):void [PhysicsJointGroove]", "contents": "setAnchr2(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setGrooveA(vec2:#cc.Vec2):void [PhysicsJointGroove]", "contents": "setGrooveA(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setGrooveB(vec2:#cc.Vec2):void [PhysicsJointGroove]", "contents": "setGrooveB(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getGrooveA():ret (return value: cc.Vec2):#Vec2 [PhysicsJointGroove]", "contents": "getGrooveA()" },{ "trigger": "s_getGrooveB():ret (return value: cc.Vec2):#Vec2 [PhysicsJointGroove]", "contents": "getGrooveB()" },{ "trigger": "s_getAnchr2():ret (return value: cc.Vec2):#Vec2 [PhysicsJointGroove]", "contents": "getAnchr2()" },{ "trigger": "s_construct(physicsbody:#cc.PhysicsBody,physicsbody:#cc.PhysicsBody,vec2:#cc.Vec2,vec2:#cc.Vec2,vec2:#cc.Vec2):ret (return value: cc.PhysicsJointGroove):#PhysicsJointGroove [PhysicsJointGroove]", "contents": "construct(${1:physicsbody:#cc.PhysicsBody},${2:physicsbody:#cc.PhysicsBody},${3:vec2:#cc.Vec2},${4:vec2:#cc.Vec2},${5:vec2:#cc.Vec2})" },{ "trigger": "s_createWithRect(str:#string,rect:#rect_table,float:#float):ret (return value: cc.GLView):#GLView [GLView]", "contents": "createWithRect(${1:str:#string},${2:rect:#rect_table},${3:float:#float})" },{ "trigger": "s_create(str:#string):ret (return value: cc.GLView):#GLView [GLView]", "contents": "create(${1:str:#string})" },{ "trigger": "s_createWithFullScreen(str:#string):ret (return value: cc.GLView):#GLView [GLView]", "contents": "createWithFullScreen(${1:str:#string})" },{ "trigger": "s_setIMEKeyboardState(bool:#bool):void [GLView]", "contents": "setIMEKeyboardState(${1:bool:#bool})" },{ "trigger": "s_isOpenGLReady():ret (return value: bool):#bool [GLView]", "contents": "isOpenGLReady()" },{ "trigger": "s_getAnimation():ret (return value: ccs.ArmatureAnimation):#ArmatureAnimation [Tween]", "contents": "getAnimation()" },{ "trigger": "s_gotoAndPause(int:#int):void [Tween]", "contents": "gotoAndPause(${1:int:#int})" },{ "trigger": "s_play(movementbonedata:#ccs.MovementBoneData,int:#int,int:#int,int:#int,int:#int):void [Tween]", "contents": "play(${1:movementbonedata:#ccs.MovementBoneData},${2:int:#int},${3:int:#int},${4:int:#int},${5:int:#int})" },{ "trigger": "s_gotoAndPlay(int:#int):void [Tween]", "contents": "gotoAndPlay(${1:int:#int})" },{ "trigger": "s_init(bone:#ccs.Bone):ret (return value: bool):#bool [Tween]", "contents": "init(${1:bone:#ccs.Bone})" },{ "trigger": "s_setAnimation(armatureanimation:#ccs.ArmatureAnimation):void [Tween]", "contents": "setAnimation(${1:armatureanimation:#ccs.ArmatureAnimation})" },{ "trigger": "s_create(bone:#ccs.Bone):ret (return value: ccs.Tween):#Tween [Tween]", "contents": "create(${1:bone:#ccs.Bone})" },{ "trigger": "s_Tween():void [Tween]", "contents": "Tween()" },{ "trigger": "s_reloadDefaultShaders():void [ShaderCache]", "contents": "reloadDefaultShaders()" },{ "trigger": "s_addProgram(glprogram:#cc.GLProgram,str:#string):void [ShaderCache]", "contents": "addProgram(${1:glprogram:#cc.GLProgram},${2:str:#string})" },{ "trigger": "s_getProgram(str:#string):ret (return value: cc.GLProgram):#GLProgram [ShaderCache]", "contents": "getProgram(${1:str:#string})" },{ "trigger": "s_loadDefaultShaders():void [ShaderCache]", "contents": "loadDefaultShaders()" },{ "trigger": "s_destroyInstance():void [ShaderCache]", "contents": "destroyInstance()" },{ "trigger": "s_getInstance():ret (return value: cc.ShaderCache):#ShaderCache [ShaderCache]", "contents": "getInstance()" },{ "trigger": "s_ShaderCache():void [ShaderCache]", "contents": "ShaderCache()" },{ "trigger": "f_create(float, cc.Scene):ret (retunr value: cc.TransitionZoomFlipY):#TransitionZoomFlipY [TransitionZoomFlipY]", "contents": "create(${1:float},${2: cc.Scene})" },{ "trigger": "f_create(float, cc.Scene, cc.TransitionScene::Orientation):ret (retunr value: cc.TransitionZoomFlipY):#TransitionZoomFlipY [TransitionZoomFlipY]", "contents": "create(${1:float},${2: cc.Scene},${3: cc.TransitionScene::Orientation})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene,orientation:#cc.TransitionScene::Orientation):ret (retunr value: cc.TransitionZoomFlipY):#TransitionZoomFlipY [TransitionZoomFlipY]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene},${3:orientation:#cc.TransitionScene::Orientation})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseBounceIn):#EaseBounceIn [EaseBounceIn]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseBounceIn):#EaseBounceIn [EaseBounceIn]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseBounceIn]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseBounce):#EaseBounce [EaseBounceIn]", "contents": "reverse()" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [CardinalSplineBy]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.CardinalSplineBy):#CardinalSplineBy [CardinalSplineBy]", "contents": "clone()" },{ "trigger": "s_updatePosition(vec2:#cc.Vec2):void [CardinalSplineBy]", "contents": "updatePosition(${1:vec2:#cc.Vec2})" },{ "trigger": "s_reverse():ret (return value: cc.CardinalSplineBy):#CardinalSplineBy [CardinalSplineBy]", "contents": "reverse()" },{ "trigger": "s_CardinalSplineBy():void [CardinalSplineBy]", "contents": "CardinalSplineBy()" },{ "trigger": "s_getPhysicsWorld():ret (return value: cc.PhysicsWorld):#PhysicsWorld [Scene]", "contents": "getPhysicsWorld()" },{ "trigger": "s_create():ret (return value: cc.Scene):#Scene [Scene]", "contents": "create()" },{ "trigger": "s_createWithPhysics():ret (return value: cc.Scene):#Scene [Scene]", "contents": "createWithPhysics()" },{ "trigger": "s_getDescription():ret (return value: string):#string [Scene]", "contents": "getDescription()" },{ "trigger": "s_getScene():ret (return value: cc.Scene):#Scene [Scene]", "contents": "getScene()" },{ "trigger": "s_update(float:#float):void [Scene]", "contents": "update(${1:float:#float})" },{ "trigger": "s_addChild(node:#cc.Node,int:#int,int:#int):void [Scene]", "contents": "addChild(${1:node:#cc.Node},${2:int:#int},${3:int:#int})" },{ "trigger": "s_create(float:#float):ret (return value: cc.FlipX3D):#FlipX3D [FlipX3D]", "contents": "create(${1:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.FlipX3D):#FlipX3D [FlipX3D]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [FlipX3D]", "contents": "update(${1:float:#float})" },{ "trigger": "s_setAmplitudeRate(float:#float):void [Twirl]", "contents": "setAmplitudeRate(${1:float:#float})" },{ "trigger": "s_getAmplitudeRate():ret (return value: float):#float [Twirl]", "contents": "getAmplitudeRate()" },{ "trigger": "s_setAmplitude(float:#float):void [Twirl]", "contents": "setAmplitude(${1:float:#float})" },{ "trigger": "s_getAmplitude():ret (return value: float):#float [Twirl]", "contents": "getAmplitude()" },{ "trigger": "s_setPosition(vec2:#cc.Vec2):void [Twirl]", "contents": "setPosition(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getPosition():ret (return value: cc.Vec2):#Vec2 [Twirl]", "contents": "getPosition()" },{ "trigger": "s_create(float:#float,size:#size_table,vec2:#cc.Vec2,int int:#unsigned,float:#float):ret (return value: cc.Twirl):#Twirl [Twirl]", "contents": "create(${1:float:#float},${2:size:#size_table},${3:vec2:#cc.Vec2},${4:int int:#unsigned},${5:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.Twirl):#Twirl [Twirl]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [Twirl]", "contents": "update(${1:float:#float})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseExponentialInOut):#EaseExponentialInOut [EaseExponentialInOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseExponentialInOut):#EaseExponentialInOut [EaseExponentialInOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseExponentialInOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseExponentialInOut):#EaseExponentialInOut [EaseExponentialInOut]", "contents": "reverse()" },{ "trigger": "s_setSubItems(array:#array_table):void [MenuItemToggle]", "contents": "setSubItems(${1:array:#array_table})" },{ "trigger": "s_getSelectedIndex():unsigned [MenuItemToggle]", "contents": "getSelectedIndex()" },{ "trigger": "s_addSubItem(menuitem:#cc.MenuItem):void [MenuItemToggle]", "contents": "addSubItem(${1:menuitem:#cc.MenuItem})" },{ "trigger": "s_getSelectedItem():ret (return value: cc.MenuItem):#MenuItem [MenuItemToggle]", "contents": "getSelectedItem()" },{ "trigger": "s_setSelectedIndex(int int:#unsigned):void [MenuItemToggle]", "contents": "setSelectedIndex(${1:int int:#unsigned})" },{ "trigger": "s_setEnabled(bool:#bool):void [MenuItemToggle]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_activate():void [MenuItemToggle]", "contents": "activate()" },{ "trigger": "s_unselected():void [MenuItemToggle]", "contents": "unselected()" },{ "trigger": "s_selected():void [MenuItemToggle]", "contents": "selected()" },{ "trigger": "s_getFriction():ret (return value: float):#float [PhysicsShape]", "contents": "getFriction()" },{ "trigger": "s_setGroup(int:#int):void [PhysicsShape]", "contents": "setGroup(${1:int:#int})" },{ "trigger": "s_setDensity(float:#float):void [PhysicsShape]", "contents": "setDensity(${1:float:#float})" },{ "trigger": "s_getMass():ret (return value: float):#float [PhysicsShape]", "contents": "getMass()" },{ "trigger": "s_getMaterial():ret (return value: cc.PhysicsMaterial):#PhysicsMaterial [PhysicsShape]", "contents": "getMaterial()" },{ "trigger": "s_getCollisionBitmask():ret (return value: int):#int [PhysicsShape]", "contents": "getCollisionBitmask()" },{ "trigger": "s_getArea():ret (return value: float):#float [PhysicsShape]", "contents": "getArea()" },{ "trigger": "s_setCategoryBitmask(int:#int):void [PhysicsShape]", "contents": "setCategoryBitmask(${1:int:#int})" },{ "trigger": "s_getGroup():ret (return value: int):#int [PhysicsShape]", "contents": "getGroup()" },{ "trigger": "s_setMoment(float:#float):void [PhysicsShape]", "contents": "setMoment(${1:float:#float})" },{ "trigger": "s_containsPoint(vec2:#cc.Vec2):ret (return value: bool):#bool [PhysicsShape]", "contents": "containsPoint(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getCategoryBitmask():ret (return value: int):#int [PhysicsShape]", "contents": "getCategoryBitmask()" },{ "trigger": "s_getType():ret (return value: cc.PhysicsShape::Type):#PhysicsShape::Type [PhysicsShape]", "contents": "getType()" },{ "trigger": "s_getContactTestBitmask():ret (return value: int):#int [PhysicsShape]", "contents": "getContactTestBitmask()" },{ "trigger": "s_getCenter():ret (return value: cc.Vec2):#Vec2 [PhysicsShape]", "contents": "getCenter()" },{ "trigger": "s_getDensity():ret (return value: float):#float [PhysicsShape]", "contents": "getDensity()" },{ "trigger": "s_setMass(float:#float):void [PhysicsShape]", "contents": "setMass(${1:float:#float})" },{ "trigger": "s_getTag():ret (return value: int):#int [PhysicsShape]", "contents": "getTag()" },{ "trigger": "s_calculateDefaultMoment():ret (return value: float):#float [PhysicsShape]", "contents": "calculateDefaultMoment()" },{ "trigger": "s_setCollisionBitmask(int:#int):void [PhysicsShape]", "contents": "setCollisionBitmask(${1:int:#int})" },{ "trigger": "s_getMoment():ret (return value: float):#float [PhysicsShape]", "contents": "getMoment()" },{ "trigger": "s_getOffset():ret (return value: cc.Vec2):#Vec2 [PhysicsShape]", "contents": "getOffset()" },{ "trigger": "s_getRestitution():ret (return value: float):#float [PhysicsShape]", "contents": "getRestitution()" },{ "trigger": "s_setFriction(float:#float):void [PhysicsShape]", "contents": "setFriction(${1:float:#float})" },{ "trigger": "s_setMaterial(physicsmaterial:#cc.PhysicsMaterial):void [PhysicsShape]", "contents": "setMaterial(${1:physicsmaterial:#cc.PhysicsMaterial})" },{ "trigger": "s_setTag(int:#int):void [PhysicsShape]", "contents": "setTag(${1:int:#int})" },{ "trigger": "s_setContactTestBitmask(int:#int):void [PhysicsShape]", "contents": "setContactTestBitmask(${1:int:#int})" },{ "trigger": "s_setRestitution(float:#float):void [PhysicsShape]", "contents": "setRestitution(${1:float:#float})" },{ "trigger": "s_getBody():ret (return value: cc.PhysicsBody):#PhysicsBody [PhysicsShape]", "contents": "getBody()" },{ "trigger": "s_getContactData():ret (return value: cc.PhysicsContactData):#PhysicsContactData [PhysicsContact]", "contents": "getContactData()" },{ "trigger": "s_getEventCode():ret (return value: cc.PhysicsContact::EventCode):#PhysicsContact::EventCode [PhysicsContact]", "contents": "getEventCode()" },{ "trigger": "s_getPreContactData():ret (return value: cc.PhysicsContactData):#PhysicsContactData [PhysicsContact]", "contents": "getPreContactData()" },{ "trigger": "s_getShapeA():ret (return value: cc.PhysicsShape):#PhysicsShape [PhysicsContact]", "contents": "getShapeA()" },{ "trigger": "s_getShapeB():ret (return value: cc.PhysicsShape):#PhysicsShape [PhysicsContact]", "contents": "getShapeB()" },{ "trigger": "s_clone():ret (return value: cc.EaseBounce):#EaseBounce [EaseBounce]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.EaseBounce):#EaseBounce [EaseBounce]", "contents": "reverse()" },{ "trigger": "s_insertElement(richelement:#ccui.RichElement,int:#int):void [RichText]", "contents": "insertElement(${1:richelement:#ccui.RichElement},${2:int:#int})" },{ "trigger": "s_setAnchorPoint(vec2:#cc.Vec2):void [RichText]", "contents": "setAnchorPoint(${1:vec2:#cc.Vec2})" },{ "trigger": "s_pushBackElement(richelement:#ccui.RichElement):void [RichText]", "contents": "pushBackElement(${1:richelement:#ccui.RichElement})" },{ "trigger": "s_ignoreContentAdaptWithSize(bool:#bool):void [RichText]", "contents": "ignoreContentAdaptWithSize(${1:bool:#bool})" },{ "trigger": "s_setVerticalSpace(float:#float):void [RichText]", "contents": "setVerticalSpace(${1:float:#float})" },{ "trigger": "s_formatText():void [RichText]", "contents": "formatText()" },{ "trigger": "f_removeElement(ccui.RichElement):void [RichText]", "contents": "removeElement(${1:ccui.RichElement})" },{ "trigger": "f_removeElement(int):void [RichText]", "contents": "removeElement(${1:int})" },{ "trigger": "s_removeElement(int:#int):void [RichText]", "contents": "removeElement(${1:int:#int})" },{ "trigger": "s_create():ret (return value: ccui.RichText):#RichText [RichText]", "contents": "create()" },{ "trigger": "s_getDescription():ret (return value: string):#string [RichText]", "contents": "getDescription()" },{ "trigger": "s_getVirtualRendererSize():ret (return value: size_table):#size_table [RichText]", "contents": "getVirtualRendererSize()" },{ "trigger": "s_RichText():void [RichText]", "contents": "RichText()" },{ "trigger": "PositionTypem_absolute [PositionType]", "contents": "PositionType.absolute" },{ "trigger": "PositionTypem_percent [PositionType]", "contents": "PositionType.percent" },{ "trigger": "s_isSwallowTouches():ret (return value: bool):#bool [EventListenerTouchOneByOne]", "contents": "isSwallowTouches()" },{ "trigger": "s_setSwallowTouches(bool:#bool):void [EventListenerTouchOneByOne]", "contents": "setSwallowTouches(${1:bool:#bool})" },{ "trigger": "s_clone():ret (return value: cc.EventListenerTouchOneByOne):#EventListenerTouchOneByOne [EventListenerTouchOneByOne]", "contents": "clone()" },{ "trigger": "s_checkAvailable():ret (return value: bool):#bool [EventListenerTouchOneByOne]", "contents": "checkAvailable()" },{ "trigger": "s_create():ret (return value: cc.ParticleMeteor):#ParticleMeteor [ParticleMeteor]", "contents": "create()" },{ "trigger": "s_createWithTotalParticles(int:#int):ret (return value: cc.ParticleMeteor):#ParticleMeteor [ParticleMeteor]", "contents": "createWithTotalParticles(${1:int:#int})" },{ "trigger": "s_getPointsCount():ret (return value: int):#int [PhysicsShapeEdgeBox]", "contents": "getPointsCount()" },{ "trigger": "s_create(size:#size_table,physicsmaterial:#cc.PhysicsMaterial,float:#float,vec2:#cc.Vec2):ret (return value: cc.PhysicsShapeEdgeBox):#PhysicsShapeEdgeBox [PhysicsShapeEdgeBox]", "contents": "create(${1:size:#size_table},${2:physicsmaterial:#cc.PhysicsMaterial},${3:float:#float},${4:vec2:#cc.Vec2})" },{ "trigger": "s_getOffset():ret (return value: cc.Vec2):#Vec2 [PhysicsShapeEdgeBox]", "contents": "getOffset()" },{ "trigger": "f_new():ret (return value: table):#table [TriggerObj]", "contents": "new()" },{ "trigger": "f_init():void [TriggerObj]", "contents": "init()" },{ "trigger": "f_detect():void [TriggerObj]", "contents": "detect()" },{ "trigger": "f_done():void [TriggerObj]", "contents": "done()" },{ "trigger": "f_removeAll():void [TriggerObj]", "contents": "removeAll()" },{ "trigger": "f_serialize(jsonValue:#table):void [TriggerObj]", "contents": "serialize(${1:jsonValue:#table})" },{ "trigger": "f_getId():ret (return value: int):#int [TriggerObj]", "contents": "getId()" },{ "trigger": "f_setEnable(enable:#bool):void [TriggerObj]", "contents": "setEnable(${1:enable:#bool})" },{ "trigger": "f_getEvents():ret (return value: table):#table [TriggerObj]", "contents": "getEvents()" },{ "trigger": "TriggerObjm__typeMap [TriggerObj]", "contents": "TriggerObj._typeMap" },{ "trigger": "TriggerObjm__acts [TriggerObj]", "contents": "TriggerObj._acts" },{ "trigger": "TriggerObjm__enable [TriggerObj]", "contents": "TriggerObj._enable" },{ "trigger": "TriggerObjm__id [TriggerObj]", "contents": "TriggerObj._id" },{ "trigger": "TriggerObjm__vInt [TriggerObj]", "contents": "TriggerObj._vInt" },{ "trigger": "s_create(float:#float,size:#size_table,int:#int,bool:#bool):ret (return value: cc.ShakyTiles3D):#ShakyTiles3D [ShakyTiles3D]", "contents": "create(${1:float:#float},${2:size:#size_table},${3:int:#int},${4:bool:#bool})" },{ "trigger": "s_clone():ret (return value: cc.ShakyTiles3D):#ShakyTiles3D [ShakyTiles3D]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [ShakyTiles3D]", "contents": "update(${1:float:#float})" },{ "trigger": "s_create(float:#float,size:#size_table,int:#int,bool:#bool):ret (return value: cc.ShatteredTiles3D):#ShatteredTiles3D [ShatteredTiles3D]", "contents": "create(${1:float:#float},${2:size:#size_table},${3:int:#int},${4:bool:#bool})" },{ "trigger": "s_clone():ret (return value: cc.ShatteredTiles3D):#ShatteredTiles3D [ShatteredTiles3D]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [ShatteredTiles3D]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getDisplayData(int:#int):ret (return value: ccs.DisplayData):#DisplayData [BoneData]", "contents": "getDisplayData(${1:int:#int})" },{ "trigger": "s_init():ret (return value: bool):#bool [BoneData]", "contents": "init()" },{ "trigger": "s_addDisplayData(displaydata:#ccs.DisplayData):void [BoneData]", "contents": "addDisplayData(${1:displaydata:#ccs.DisplayData})" },{ "trigger": "s_create():ret (return value: ccs.BoneData):#BoneData [BoneData]", "contents": "create()" },{ "trigger": "s_BoneData():void [BoneData]", "contents": "BoneData()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseCubicActionIn):#EaseCubicActionIn [EaseCubicActionIn]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseCubicActionIn):#EaseCubicActionIn [EaseCubicActionIn]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseCubicActionIn]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseCubicActionIn):#EaseCubicActionIn [EaseCubicActionIn]", "contents": "reverse()" },{ "trigger": "s_setMix(char:#char,char:#char,float:#float):void [SkeletonAnimation]", "contents": "setMix(${1:char:#char},${2:char:#char},${3:float:#float})" },{ "trigger": "s_clearTracks():void [SkeletonAnimation]", "contents": "clearTracks()" },{ "trigger": "s_clearTrack():void [SkeletonAnimation]", "contents": "clearTrack()" },{ "trigger": "s_onAnimationStateEvent(int:#int,speventtype:#spEventType,spevent:#spEvent,int:#int):void [SkeletonAnimation]", "contents": "onAnimationStateEvent(${1:int:#int},${2:speventtype:#spEventType},${3:spevent:#spEvent},${4:int:#int})" },{ "trigger": "s_pause():void [Director]", "contents": "pause()" },{ "trigger": "s_pushScene(scene:#cc.Scene):void [Director]", "contents": "pushScene(${1:scene:#cc.Scene})" },{ "trigger": "s_getDeltaTime():ret (return value: float):#float [Director]", "contents": "getDeltaTime()" },{ "trigger": "s_getContentScaleFactor():ret (return value: float):#float [Director]", "contents": "getContentScaleFactor()" },{ "trigger": "s_getWinSizeInPixels():ret (return value: size_table):#size_table [Director]", "contents": "getWinSizeInPixels()" },{ "trigger": "s_getConsole():ret (return value: cc.Console):#Console [Director]", "contents": "getConsole()" },{ "trigger": "s_pushMatrix(matrix_stack_type:#cc.MATRIX_STACK_TYPE):void [Director]", "contents": "pushMatrix(${1:matrix_stack_type:#cc.MATRIX_STACK_TYPE})" },{ "trigger": "s_setGLDefaultValues():void [Director]", "contents": "setGLDefaultValues()" },{ "trigger": "s_setActionManager(actionmanager:#cc.ActionManager):void [Director]", "contents": "setActionManager(${1:actionmanager:#cc.ActionManager})" },{ "trigger": "s_setAlphaBlending(bool:#bool):void [Director]", "contents": "setAlphaBlending(${1:bool:#bool})" },{ "trigger": "s_popToRootScene():void [Director]", "contents": "popToRootScene()" },{ "trigger": "s_loadMatrix(matrix_stack_type:#cc.MATRIX_STACK_TYPE,mat4:#cc.Mat4):void [Director]", "contents": "loadMatrix(${1:matrix_stack_type:#cc.MATRIX_STACK_TYPE},${2:mat4:#cc.Mat4})" },{ "trigger": "s_getNotificationNode():ret (return value: cc.Node):#Node [Director]", "contents": "getNotificationNode()" },{ "trigger": "s_getWinSize():ret (return value: size_table):#size_table [Director]", "contents": "getWinSize()" },{ "trigger": "s_getTextureCache():ret (return value: cc.TextureCache):#TextureCache [Director]", "contents": "getTextureCache()" },{ "trigger": "s_isSendCleanupToScene():ret (return value: bool):#bool [Director]", "contents": "isSendCleanupToScene()" },{ "trigger": "s_getVisibleOrigin():ret (return value: cc.Vec2):#Vec2 [Director]", "contents": "getVisibleOrigin()" },{ "trigger": "s_mainLoop():void [Director]", "contents": "mainLoop()" },{ "trigger": "s_setDepthTest(bool:#bool):void [Director]", "contents": "setDepthTest(${1:bool:#bool})" },{ "trigger": "s_getFrameRate():ret (return value: float):#float [Director]", "contents": "getFrameRate()" },{ "trigger": "s_getSecondsPerFrame():ret (return value: float):#float [Director]", "contents": "getSecondsPerFrame()" },{ "trigger": "s_convertToUI(vec2:#cc.Vec2):ret (return value: cc.Vec2):#Vec2 [Director]", "contents": "convertToUI(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setDefaultValues():void [Director]", "contents": "setDefaultValues()" },{ "trigger": "s_init():ret (return value: bool):#bool [Director]", "contents": "init()" },{ "trigger": "s_setScheduler(scheduler:#cc.Scheduler):void [Director]", "contents": "setScheduler(${1:scheduler:#cc.Scheduler})" },{ "trigger": "s_startAnimation():void [Director]", "contents": "startAnimation()" },{ "trigger": "s_getOpenGLView():ret (return value: cc.GLView):#GLView [Director]", "contents": "getOpenGLView()" },{ "trigger": "s_getRunningScene():ret (return value: cc.Scene):#Scene [Director]", "contents": "getRunningScene()" },{ "trigger": "s_setViewport():void [Director]", "contents": "setViewport()" },{ "trigger": "s_stopAnimation():void [Director]", "contents": "stopAnimation()" },{ "trigger": "s_setContentScaleFactor(float:#float):void [Director]", "contents": "setContentScaleFactor(${1:float:#float})" },{ "trigger": "s_popToSceneStackLevel(int:#int):void [Director]", "contents": "popToSceneStackLevel(${1:int:#int})" },{ "trigger": "s_resume():void [Director]", "contents": "resume()" },{ "trigger": "s_isNextDeltaTimeZero():ret (return value: bool):#bool [Director]", "contents": "isNextDeltaTimeZero()" },{ "trigger": "s_end():void [Director]", "contents": "end()" },{ "trigger": "s_setOpenGLView(glview:#cc.GLView):void [Director]", "contents": "setOpenGLView(${1:glview:#cc.GLView})" },{ "trigger": "s_convertToGL(vec2:#cc.Vec2):ret (return value: cc.Vec2):#Vec2 [Director]", "contents": "convertToGL(${1:vec2:#cc.Vec2})" },{ "trigger": "s_purgeCachedData():void [Director]", "contents": "purgeCachedData()" },{ "trigger": "s_getTotalFrames():unsigned [Director]", "contents": "getTotalFrames()" },{ "trigger": "s_runWithScene(scene:#cc.Scene):void [Director]", "contents": "runWithScene(${1:scene:#cc.Scene})" },{ "trigger": "s_setNotificationNode(node:#cc.Node):void [Director]", "contents": "setNotificationNode(${1:node:#cc.Node})" },{ "trigger": "s_drawScene():void [Director]", "contents": "drawScene()" },{ "trigger": "s_getZEye():ret (return value: float):#float [Director]", "contents": "getZEye()" },{ "trigger": "s_getMatrix(matrix_stack_type:#cc.MATRIX_STACK_TYPE):ret (return value: cc.Mat4):#Mat4 [Director]", "contents": "getMatrix(${1:matrix_stack_type:#cc.MATRIX_STACK_TYPE})" },{ "trigger": "s_popScene():void [Director]", "contents": "popScene()" },{ "trigger": "s_isDisplayStats():ret (return value: bool):#bool [Director]", "contents": "isDisplayStats()" },{ "trigger": "s_setProjection(projection:#cc.Director::Projection):void [Director]", "contents": "setProjection(${1:projection:#cc.Director::Projection})" },{ "trigger": "s_loadIdentityMatrix(matrix_stack_type:#cc.MATRIX_STACK_TYPE):void [Director]", "contents": "loadIdentityMatrix(${1:matrix_stack_type:#cc.MATRIX_STACK_TYPE})" },{ "trigger": "s_setNextDeltaTimeZero(bool:#bool):void [Director]", "contents": "setNextDeltaTimeZero(${1:bool:#bool})" },{ "trigger": "s_resetMatrixStack():void [Director]", "contents": "resetMatrixStack()" },{ "trigger": "s_popMatrix(matrix_stack_type:#cc.MATRIX_STACK_TYPE):void [Director]", "contents": "popMatrix(${1:matrix_stack_type:#cc.MATRIX_STACK_TYPE})" },{ "trigger": "s_getVisibleSize():ret (return value: size_table):#size_table [Director]", "contents": "getVisibleSize()" },{ "trigger": "s_getScheduler():ret (return value: cc.Scheduler):#Scheduler [Director]", "contents": "getScheduler()" },{ "trigger": "s_setAnimationInterval(double:#double):void [Director]", "contents": "setAnimationInterval(${1:double:#double})" },{ "trigger": "s_getAnimationInterval():ret (return value: double):#double [Director]", "contents": "getAnimationInterval()" },{ "trigger": "s_isPaused():ret (return value: bool):#bool [Director]", "contents": "isPaused()" },{ "trigger": "s_setDisplayStats(bool:#bool):void [Director]", "contents": "setDisplayStats(${1:bool:#bool})" },{ "trigger": "s_replaceScene(scene:#cc.Scene):void [Director]", "contents": "replaceScene(${1:scene:#cc.Scene})" },{ "trigger": "s_multiplyMatrix(matrix_stack_type:#cc.MATRIX_STACK_TYPE,mat4:#cc.Mat4):void [Director]", "contents": "multiplyMatrix(${1:matrix_stack_type:#cc.MATRIX_STACK_TYPE},${2:mat4:#cc.Mat4})" },{ "trigger": "s_getActionManager():ret (return value: cc.ActionManager):#ActionManager [Director]", "contents": "getActionManager()" },{ "trigger": "s_getInstance():ret (return value: cc.Director):#Director [Director]", "contents": "getInstance()" },{ "trigger": "s_getPointsCount():ret (return value: int):#int [PhysicsShapeEdgePolygon]", "contents": "getPointsCount()" },{ "trigger": "s_getCenter():ret (return value: cc.Vec2):#Vec2 [PhysicsShapeEdgePolygon]", "contents": "getCenter()" },{ "trigger": "f_playActionByName(char, char, cc.CallFunc):ret (retunr value: ccs.ActionObject):#ActionObject [ActionManagerEx]", "contents": "playActionByName(${1:char},${2: char},${3: cc.CallFunc})" },{ "trigger": "f_playActionByName(char, char):ret (retunr value: ccs.ActionObject):#ActionObject [ActionManagerEx]", "contents": "playActionByName(${1:char},${2: char})" },{ "trigger": "s_playActionByName(char:#char,char:#char,callfunc:#cc.CallFunc):ret (retunr value: ccs.ActionObject):#ActionObject [ActionManagerEx]", "contents": "playActionByName(${1:char:#char},${2:char:#char},${3:callfunc:#cc.CallFunc})" },{ "trigger": "s_getActionByName(char:#char,char:#char):ret (return value: ccs.ActionObject):#ActionObject [ActionManagerEx]", "contents": "getActionByName(${1:char:#char},${2:char:#char})" },{ "trigger": "s_releaseActions():void [ActionManagerEx]", "contents": "releaseActions()" },{ "trigger": "s_destroyInstance():void [ActionManagerEx]", "contents": "destroyInstance()" },{ "trigger": "s_getInstance():ret (return value: ccs.ActionManagerEx):#ActionManagerEx [ActionManagerEx]", "contents": "getInstance()" },{ "trigger": "s_isTransformDirty():ret (return value: bool):#bool [Bone]", "contents": "isTransformDirty()" },{ "trigger": "s_isIgnoreMovementBoneData():ret (return value: bool):#bool [Bone]", "contents": "isIgnoreMovementBoneData()" },{ "trigger": "s_updateZOrder():void [Bone]", "contents": "updateZOrder()" },{ "trigger": "s_getDisplayRenderNode():ret (return value: cc.Node):#Node [Bone]", "contents": "getDisplayRenderNode()" },{ "trigger": "s_isBlendDirty():ret (return value: bool):#bool [Bone]", "contents": "isBlendDirty()" },{ "trigger": "s_addChildBone(bone:#ccs.Bone):void [Bone]", "contents": "addChildBone(${1:bone:#ccs.Bone})" },{ "trigger": "s_getWorldInfo():ret (return value: ccs.BaseData):#BaseData [Bone]", "contents": "getWorldInfo()" },{ "trigger": "s_getTween():ret (return value: ccs.Tween):#Tween [Bone]", "contents": "getTween()" },{ "trigger": "s_getParentBone():ret (return value: ccs.Bone):#Bone [Bone]", "contents": "getParentBone()" },{ "trigger": "s_updateColor():void [Bone]", "contents": "updateColor()" },{ "trigger": "s_getName():ret (return value: string):#string [Bone]", "contents": "getName()" },{ "trigger": "s_setTransformDirty(bool:#bool):void [Bone]", "contents": "setTransformDirty(${1:bool:#bool})" },{ "trigger": "s_getDisplayRenderNodeType():ret (return value: ccs.DisplayType):#DisplayType [Bone]", "contents": "getDisplayRenderNodeType()" },{ "trigger": "s_removeDisplay(int:#int):void [Bone]", "contents": "removeDisplay(${1:int:#int})" },{ "trigger": "s_setBoneData(bonedata:#ccs.BoneData):void [Bone]", "contents": "setBoneData(${1:bonedata:#ccs.BoneData})" },{ "trigger": "f_init(string):ret (retunr value: bool):#bool [Bone]", "contents": "init(${1:string})" },{ "trigger": "f_init():ret (retunr value: bool):#bool [Bone]", "contents": "init(${1:})" },{ "trigger": "s_init(str:#string):ret (retunr value: bool):#bool [Bone]", "contents": "init(${1:str:#string})" },{ "trigger": "s_setParentBone(bone:#ccs.Bone):void [Bone]", "contents": "setParentBone(${1:bone:#ccs.Bone})" },{ "trigger": "f_addDisplay(cc.Node, int):void [Bone]", "contents": "addDisplay(${1:cc.Node},${2: int})" },{ "trigger": "f_addDisplay(ccs.DisplayData, int):void [Bone]", "contents": "addDisplay(${1:ccs.DisplayData},${2: int})" },{ "trigger": "s_addDisplay(displaydata:#ccs.DisplayData,int:#int):void [Bone]", "contents": "addDisplay(${1:displaydata:#ccs.DisplayData},${2:int:#int})" },{ "trigger": "s_setName(str:#string):void [Bone]", "contents": "setName(${1:str:#string})" },{ "trigger": "s_removeFromParent(bool:#bool):void [Bone]", "contents": "removeFromParent(${1:bool:#bool})" },{ "trigger": "s_getColliderDetector():ret (return value: ccs.ColliderDetector):#ColliderDetector [Bone]", "contents": "getColliderDetector()" },{ "trigger": "s_getChildArmature():ret (return value: ccs.Armature):#Armature [Bone]", "contents": "getChildArmature()" },{ "trigger": "s_getTweenData():ret (return value: ccs.FrameData):#FrameData [Bone]", "contents": "getTweenData()" },{ "trigger": "s_changeDisplayWithIndex(int:#int,bool:#bool):void [Bone]", "contents": "changeDisplayWithIndex(${1:int:#int},${2:bool:#bool})" },{ "trigger": "s_changeDisplayWithName(str:#string,bool:#bool):void [Bone]", "contents": "changeDisplayWithName(${1:str:#string},${2:bool:#bool})" },{ "trigger": "s_setArmature(armature:#ccs.Armature):void [Bone]", "contents": "setArmature(${1:armature:#ccs.Armature})" },{ "trigger": "s_setBlendDirty(bool:#bool):void [Bone]", "contents": "setBlendDirty(${1:bool:#bool})" },{ "trigger": "s_removeChildBone(bone:#ccs.Bone,bool:#bool):void [Bone]", "contents": "removeChildBone(${1:bone:#ccs.Bone},${2:bool:#bool})" },{ "trigger": "s_setChildArmature(armature:#ccs.Armature):void [Bone]", "contents": "setChildArmature(${1:armature:#ccs.Armature})" },{ "trigger": "s_getNodeToArmatureTransform():ret (return value: cc.Mat4):#Mat4 [Bone]", "contents": "getNodeToArmatureTransform()" },{ "trigger": "s_getDisplayManager():ret (return value: ccs.DisplayManager):#DisplayManager [Bone]", "contents": "getDisplayManager()" },{ "trigger": "s_getArmature():ret (return value: ccs.Armature):#Armature [Bone]", "contents": "getArmature()" },{ "trigger": "s_getBoneData():ret (return value: ccs.BoneData):#BoneData [Bone]", "contents": "getBoneData()" },{ "trigger": "f_create(string):ret (retunr value: ccs.Bone):#Bone [Bone]", "contents": "create(${1:string})" },{ "trigger": "f_create():ret (retunr value: ccs.Bone):#Bone [Bone]", "contents": "create(${1:})" },{ "trigger": "s_create(str:#string):ret (retunr value: ccs.Bone):#Bone [Bone]", "contents": "create(${1:str:#string})" },{ "trigger": "s_updateDisplayedColor(color3b:#color3b_table):void [Bone]", "contents": "updateDisplayedColor(${1:color3b:#color3b_table})" },{ "trigger": "s_setLocalZOrder(int:#int):void [Bone]", "contents": "setLocalZOrder(${1:int:#int})" },{ "trigger": "s_getNodeToWorldTransform():ret (return value: cc.Mat4):#Mat4 [Bone]", "contents": "getNodeToWorldTransform()" },{ "trigger": "s_update(float:#float):void [Bone]", "contents": "update(${1:float:#float})" },{ "trigger": "s_updateDisplayedOpacity(char char:#unsigned):void [Bone]", "contents": "updateDisplayedOpacity(${1:char char:#unsigned})" },{ "trigger": "s_Bone():void [Bone]", "contents": "Bone()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseCircleActionInOut):#EaseCircleActionInOut [EaseCircleActionInOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseCircleActionInOut):#EaseCircleActionInOut [EaseCircleActionInOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseCircleActionInOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseCircleActionInOut):#EaseCircleActionInOut [EaseCircleActionInOut]", "contents": "reverse()" },{ "trigger": "s_getTileGIDAt(vec2:#cc.Vec2,tmxtileflags_:#cc.TMXTileFlags_):unsigned [TMXLayer]", "contents": "getTileGIDAt(${1:vec2:#cc.Vec2},${2:tmxtileflags_:#cc.TMXTileFlags_})" },{ "trigger": "s_getPositionAt(vec2:#cc.Vec2):ret (return value: cc.Vec2):#Vec2 [TMXLayer]", "contents": "getPositionAt(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setLayerOrientation(int:#int):void [TMXLayer]", "contents": "setLayerOrientation(${1:int:#int})" },{ "trigger": "s_releaseMap():void [TMXLayer]", "contents": "releaseMap()" },{ "trigger": "s_setTiles(int int:#unsigned):void [TMXLayer]", "contents": "setTiles(${1:int int:#unsigned})" },{ "trigger": "s_getLayerSize():ret (return value: size_table):#size_table [TMXLayer]", "contents": "getLayerSize()" },{ "trigger": "s_setMapTileSize(size:#size_table):void [TMXLayer]", "contents": "setMapTileSize(${1:size:#size_table})" },{ "trigger": "s_getLayerOrientation():ret (return value: int):#int [TMXLayer]", "contents": "getLayerOrientation()" },{ "trigger": "s_setProperties(map:#map_table):void [TMXLayer]", "contents": "setProperties(${1:map:#map_table})" },{ "trigger": "s_setLayerName(str:#string):void [TMXLayer]", "contents": "setLayerName(${1:str:#string})" },{ "trigger": "s_removeTileAt(vec2:#cc.Vec2):void [TMXLayer]", "contents": "removeTileAt(${1:vec2:#cc.Vec2})" },{ "trigger": "s_initWithTilesetInfo(tmxtilesetinfo:#cc.TMXTilesetInfo,tmxlayerinfo:#cc.TMXLayerInfo,map:#cc.TMXMapInfo):ret (return value: bool):#bool [TMXLayer]", "contents": "initWithTilesetInfo(${1:tmxtilesetinfo:#cc.TMXTilesetInfo},${2:tmxlayerinfo:#cc.TMXLayerInfo},${3:map:#cc.TMXMapInfo})" },{ "trigger": "s_setupTiles():void [TMXLayer]", "contents": "setupTiles()" },{ "trigger": "f_setTileGID(unsigned int, cc.Vec2, cc.TMXTileFlags_):void [TMXLayer]", "contents": "setTileGID(${1:unsigned int},${2: cc.Vec2},${3: cc.TMXTileFlags_})" },{ "trigger": "f_setTileGID(unsigned int, cc.Vec2):void [TMXLayer]", "contents": "setTileGID(${1:unsigned int},${2: cc.Vec2})" },{ "trigger": "s_setTileGID(int int:#unsigned,vec2:#cc.Vec2,tmxtileflags_:#cc.TMXTileFlags_):void [TMXLayer]", "contents": "setTileGID(${1:int int:#unsigned},${2:vec2:#cc.Vec2},${3:tmxtileflags_:#cc.TMXTileFlags_})" },{ "trigger": "s_getMapTileSize():ret (return value: size_table):#size_table [TMXLayer]", "contents": "getMapTileSize()" },{ "trigger": "s_getProperty(str:#string):ret (return value: cc.Value):#Value [TMXLayer]", "contents": "getProperty(${1:str:#string})" },{ "trigger": "s_setLayerSize(size:#size_table):void [TMXLayer]", "contents": "setLayerSize(${1:size:#size_table})" },{ "trigger": "s_getLayerName():ret (return value: string):#string [TMXLayer]", "contents": "getLayerName()" },{ "trigger": "s_setTileSet(tmxtilesetinfo:#cc.TMXTilesetInfo):void [TMXLayer]", "contents": "setTileSet(${1:tmxtilesetinfo:#cc.TMXTilesetInfo})" },{ "trigger": "s_getTileSet():ret (return value: cc.TMXTilesetInfo):#TMXTilesetInfo [TMXLayer]", "contents": "getTileSet()" },{ "trigger": "f_getProperties():ret (retunr value: map_table):#map_table [TMXLayer]", "contents": "getProperties(${1:})" },{ "trigger": "f_getProperties():ret (retunr value: map_table):#map_table [TMXLayer]", "contents": "getProperties(${1:})" },{ "trigger": "s_getProperties():ret (retunr value: map_table):#map_table [TMXLayer]", "contents": "getProperties()" },{ "trigger": "s_getTileAt(vec2:#cc.Vec2):ret (return value: cc.Sprite):#Sprite [TMXLayer]", "contents": "getTileAt(${1:vec2:#cc.Vec2})" },{ "trigger": "s_create(tmxtilesetinfo:#cc.TMXTilesetInfo,tmxlayerinfo:#cc.TMXLayerInfo,map:#cc.TMXMapInfo):ret (return value: cc.TMXLayer):#TMXLayer [TMXLayer]", "contents": "create(${1:tmxtilesetinfo:#cc.TMXTilesetInfo},${2:tmxlayerinfo:#cc.TMXLayerInfo},${3:map:#cc.TMXMapInfo})" },{ "trigger": "s_addChild(node:#cc.Node,int:#int,int:#int):void [TMXLayer]", "contents": "addChild(${1:node:#cc.Node},${2:int:#int},${3:int:#int})" },{ "trigger": "s_getDescription():ret (return value: string):#string [TMXLayer]", "contents": "getDescription()" },{ "trigger": "s_removeChild(node:#cc.Node,bool:#bool):void [TMXLayer]", "contents": "removeChild(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "s_TMXLayer():void [TMXLayer]", "contents": "TMXLayer()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseBackIn):#EaseBackIn [EaseBackIn]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseBackIn):#EaseBackIn [EaseBackIn]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseBackIn]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.ActionEase):#ActionEase [EaseBackIn]", "contents": "reverse()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseQuinticActionOut):#EaseQuinticActionOut [EaseQuinticActionOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseQuinticActionOut):#EaseQuinticActionOut [EaseQuinticActionOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseQuinticActionOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseQuinticActionOut):#EaseQuinticActionOut [EaseQuinticActionOut]", "contents": "reverse()" },{ "trigger": "s_setBackGroundColorVector(vec2:#cc.Vec2):void [Layout]", "contents": "setBackGroundColorVector(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setClippingType(clippingtype:#ccui.Layout::ClippingType):void [Layout]", "contents": "setClippingType(${1:clippingtype:#ccui.Layout::ClippingType})" },{ "trigger": "s_setBackGroundColorType(backgroundcolortype:#ccui.Layout::BackGroundColorType):void [Layout]", "contents": "setBackGroundColorType(${1:backgroundcolortype:#ccui.Layout::BackGroundColorType})" },{ "trigger": "s_setLoopFocus(bool:#bool):void [Layout]", "contents": "setLoopFocus(${1:bool:#bool})" },{ "trigger": "s_setBackGroundImageColor(color3b:#color3b_table):void [Layout]", "contents": "setBackGroundImageColor(${1:color3b:#color3b_table})" },{ "trigger": "s_getBackGroundColorVector():ret (return value: cc.Vec2):#Vec2 [Layout]", "contents": "getBackGroundColorVector()" },{ "trigger": "s_getClippingType():ret (return value: ccui.Layout::ClippingType):#Layout::ClippingType [Layout]", "contents": "getClippingType()" },{ "trigger": "s_isLoopFocus():ret (return value: bool):#bool [Layout]", "contents": "isLoopFocus()" },{ "trigger": "s_removeBackGroundImage():void [Layout]", "contents": "removeBackGroundImage()" },{ "trigger": "s_getBackGroundColorOpacity():unsigned [Layout]", "contents": "getBackGroundColorOpacity()" },{ "trigger": "s_isClippingEnabled():ret (return value: bool):#bool [Layout]", "contents": "isClippingEnabled()" },{ "trigger": "s_setBackGroundImageOpacity(char char:#unsigned):void [Layout]", "contents": "setBackGroundImageOpacity(${1:char char:#unsigned})" },{ "trigger": "s_setBackGroundImage(str:#string,texturerestype:#ccui.Widget::TextureResType):void [Layout]", "contents": "setBackGroundImage(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "f_setBackGroundColor(color3b_table, color3b_table):void [Layout]", "contents": "setBackGroundColor(${1:color3b_table},${2: color3b_table})" },{ "trigger": "f_setBackGroundColor(color3b_table):void [Layout]", "contents": "setBackGroundColor(${1:color3b_table})" },{ "trigger": "s_setBackGroundColor(color3b:#color3b_table,color3b:#color3b_table):void [Layout]", "contents": "setBackGroundColor(${1:color3b:#color3b_table},${2:color3b:#color3b_table})" },{ "trigger": "s_requestDoLayout():void [Layout]", "contents": "requestDoLayout()" },{ "trigger": "s_getBackGroundImageCapInsets():ret (return value: rect_table):#rect_table [Layout]", "contents": "getBackGroundImageCapInsets()" },{ "trigger": "s_getBackGroundColor():ret (return value: color3b_table):#color3b_table [Layout]", "contents": "getBackGroundColor()" },{ "trigger": "s_setClippingEnabled(bool:#bool):void [Layout]", "contents": "setClippingEnabled(${1:bool:#bool})" },{ "trigger": "s_getBackGroundImageColor():ret (return value: color3b_table):#color3b_table [Layout]", "contents": "getBackGroundImageColor()" },{ "trigger": "s_isBackGroundImageScale9Enabled():ret (return value: bool):#bool [Layout]", "contents": "isBackGroundImageScale9Enabled()" },{ "trigger": "s_getBackGroundColorType():ret (return value: ccui.Layout::BackGroundColorType):#Layout::BackGroundColorType [Layout]", "contents": "getBackGroundColorType()" },{ "trigger": "s_getBackGroundEndColor():ret (return value: color3b_table):#color3b_table [Layout]", "contents": "getBackGroundEndColor()" },{ "trigger": "s_setBackGroundColorOpacity(char char:#unsigned):void [Layout]", "contents": "setBackGroundColorOpacity(${1:char char:#unsigned})" },{ "trigger": "s_getBackGroundImageOpacity():unsigned [Layout]", "contents": "getBackGroundImageOpacity()" },{ "trigger": "s_isPassFocusToChild():ret (return value: bool):#bool [Layout]", "contents": "isPassFocusToChild()" },{ "trigger": "s_setBackGroundImageCapInsets(rect:#rect_table):void [Layout]", "contents": "setBackGroundImageCapInsets(${1:rect:#rect_table})" },{ "trigger": "s_getBackGroundImageTextureSize():ret (return value: size_table):#size_table [Layout]", "contents": "getBackGroundImageTextureSize()" },{ "trigger": "s_getLayoutType():ret (return value: ccui.Layout::Type):#Layout::Type [Layout]", "contents": "getLayoutType()" },{ "trigger": "s_setPassFocusToChild(bool:#bool):void [Layout]", "contents": "setPassFocusToChild(${1:bool:#bool})" },{ "trigger": "s_getBackGroundStartColor():ret (return value: color3b_table):#color3b_table [Layout]", "contents": "getBackGroundStartColor()" },{ "trigger": "s_setBackGroundImageScale9Enabled(bool:#bool):void [Layout]", "contents": "setBackGroundImageScale9Enabled(${1:bool:#bool})" },{ "trigger": "s_setLayoutType(type:#ccui.Layout::Type):void [Layout]", "contents": "setLayoutType(${1:type:#ccui.Layout::Type})" },{ "trigger": "s_create():ret (return value: ccui.Layout):#Layout [Layout]", "contents": "create()" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [Layout]", "contents": "createInstance()" },{ "trigger": "f_addChild(cc.Node, int):void [Layout]", "contents": "addChild(${1:cc.Node},${2: int})" },{ "trigger": "f_addChild(cc.Node):void [Layout]", "contents": "addChild(${1:cc.Node})" },{ "trigger": "f_addChild(cc.Node, int, int):void [Layout]", "contents": "addChild(${1:cc.Node},${2: int},${3: int})" },{ "trigger": "s_addChild(node:#cc.Node,int:#int,int:#int):void [Layout]", "contents": "addChild(${1:node:#cc.Node},${2:int:#int},${3:int:#int})" },{ "trigger": "s_getDescription():ret (return value: string):#string [Layout]", "contents": "getDescription()" },{ "trigger": "s_removeAllChildrenWithCleanup(bool:#bool):void [Layout]", "contents": "removeAllChildrenWithCleanup(${1:bool:#bool})" },{ "trigger": "s_removeAllChildren():void [Layout]", "contents": "removeAllChildren()" },{ "trigger": "s_sortAllChildren():void [Layout]", "contents": "sortAllChildren()" },{ "trigger": "s_findNextFocusedWidget(focusdirection:#ccui.Widget::FocusDirection,widget:#ccui.Widget):ret (return value: ccui.Widget):#Widget [Layout]", "contents": "findNextFocusedWidget(${1:focusdirection:#ccui.Widget::FocusDirection},${2:widget:#ccui.Widget})" },{ "trigger": "s_removeChild(node:#cc.Node,bool:#bool):void [Layout]", "contents": "removeChild(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "s_Layout():void [Layout]", "contents": "Layout()" },{ "trigger": "f_create(float, cc.Scene):ret (retunr value: cc.TransitionZoomFlipAngular):#TransitionZoomFlipAngular [TransitionZoomFlipAngular]", "contents": "create(${1:float},${2: cc.Scene})" },{ "trigger": "f_create(float, cc.Scene, cc.TransitionScene::Orientation):ret (retunr value: cc.TransitionZoomFlipAngular):#TransitionZoomFlipAngular [TransitionZoomFlipAngular]", "contents": "create(${1:float},${2: cc.Scene},${3: cc.TransitionScene::Orientation})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene,orientation:#cc.TransitionScene::Orientation):ret (retunr value: cc.TransitionZoomFlipAngular):#TransitionZoomFlipAngular [TransitionZoomFlipAngular]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene},${3:orientation:#cc.TransitionScene::Orientation})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseSineOut):#EaseSineOut [EaseSineOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseSineOut):#EaseSineOut [EaseSineOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseSineOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.ActionEase):#ActionEase [EaseSineOut]", "contents": "reverse()" },{ "trigger": "s_EventFocus(widget:#ccui.Widget,widget:#ccui.Widget):void [EventFocus]", "contents": "EventFocus(${1:widget:#ccui.Widget},${2:widget:#ccui.Widget})" },{ "trigger": "s_setRatio(float:#float):void [PhysicsJointGear]", "contents": "setRatio(${1:float:#float})" },{ "trigger": "s_getPhase():ret (return value: float):#float [PhysicsJointGear]", "contents": "getPhase()" },{ "trigger": "s_setPhase(float:#float):void [PhysicsJointGear]", "contents": "setPhase(${1:float:#float})" },{ "trigger": "s_getRatio():ret (return value: float):#float [PhysicsJointGear]", "contents": "getRatio()" },{ "trigger": "s_construct(physicsbody:#cc.PhysicsBody,physicsbody:#cc.PhysicsBody,float:#float,float:#float):ret (return value: cc.PhysicsJointGear):#PhysicsJointGear [PhysicsJointGear]", "contents": "construct(${1:physicsbody:#cc.PhysicsBody},${2:physicsbody:#cc.PhysicsBody},${3:float:#float},${4:float:#float})" },{ "trigger": "LayoutParameterTypem_none [LayoutParameterType]", "contents": "LayoutParameterType.none" },{ "trigger": "LayoutParameterTypem_linear [LayoutParameterType]", "contents": "LayoutParameterType.linear" },{ "trigger": "LayoutParameterTypem_relative [LayoutParameterType]", "contents": "LayoutParameterType.relative" },{ "trigger": "f_setTexture(cc.Texture2D):void [Sprite3D]", "contents": "setTexture(${1:cc.Texture2D})" },{ "trigger": "f_setTexture(string):void [Sprite3D]", "contents": "setTexture(${1:string})" },{ "trigger": "s_setTexture(str:#string):void [Sprite3D]", "contents": "setTexture(${1:str:#string})" },{ "trigger": "s_getBlendFunc():ret (return value: cc.BlendFunc):#BlendFunc [Sprite3D]", "contents": "getBlendFunc()" },{ "trigger": "s_setBlendFunc(blendfunc:#cc.BlendFunc):void [Sprite3D]", "contents": "setBlendFunc(${1:blendfunc:#cc.BlendFunc})" },{ "trigger": "f_create(string, string):ret (retunr value: cc.Sprite3D):#Sprite3D [Sprite3D]", "contents": "create(${1:string},${2: string})" },{ "trigger": "f_create(string):ret (retunr value: cc.Sprite3D):#Sprite3D [Sprite3D]", "contents": "create(${1:string})" },{ "trigger": "s_create(str:#string,str:#string):ret (retunr value: cc.Sprite3D):#Sprite3D [Sprite3D]", "contents": "create(${1:str:#string},${2:str:#string})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [BezierBy]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.BezierBy):#BezierBy [BezierBy]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.BezierBy):#BezierBy [BezierBy]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [BezierBy]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getAmplitudeRate():ret (return value: float):#float [Waves3D]", "contents": "getAmplitudeRate()" },{ "trigger": "s_setAmplitude(float:#float):void [Waves3D]", "contents": "setAmplitude(${1:float:#float})" },{ "trigger": "s_setAmplitudeRate(float:#float):void [Waves3D]", "contents": "setAmplitudeRate(${1:float:#float})" },{ "trigger": "s_getAmplitude():ret (return value: float):#float [Waves3D]", "contents": "getAmplitude()" },{ "trigger": "s_create(float:#float,size:#size_table,int int:#unsigned,float:#float):ret (return value: cc.Waves3D):#Waves3D [Waves3D]", "contents": "create(${1:float:#float},${2:size:#size_table},${3:int int:#unsigned},${4:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.Waves3D):#Waves3D [Waves3D]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [Waves3D]", "contents": "update(${1:float:#float})" },{ "trigger": "ResolutionPolicym_EXACT_FIT [ResolutionPolicy]", "contents": "ResolutionPolicy.EXACT_FIT" },{ "trigger": "ResolutionPolicym_NO_BORDER [ResolutionPolicy]", "contents": "ResolutionPolicy.NO_BORDER" },{ "trigger": "ResolutionPolicym_SHOW_ALL [ResolutionPolicy]", "contents": "ResolutionPolicy.SHOW_ALL" },{ "trigger": "ResolutionPolicym_FIXED_HEIGHT [ResolutionPolicy]", "contents": "ResolutionPolicy.FIXED_HEIGHT" },{ "trigger": "ResolutionPolicym_FIXED_WIDTH [ResolutionPolicy]", "contents": "ResolutionPolicy.FIXED_WIDTH" },{ "trigger": "ResolutionPolicym_UNKNOWN [ResolutionPolicy]", "contents": "ResolutionPolicy.UNKNOWN" },{ "trigger": "s_getBone(str:#string):ret (return value: ccs.Bone):#Bone [Armature]", "contents": "getBone(${1:str:#string})" },{ "trigger": "s_changeBoneParent(bone:#ccs.Bone,str:#string):void [Armature]", "contents": "changeBoneParent(${1:bone:#ccs.Bone},${2:str:#string})" },{ "trigger": "s_setAnimation(armatureanimation:#ccs.ArmatureAnimation):void [Armature]", "contents": "setAnimation(${1:armatureanimation:#ccs.ArmatureAnimation})" },{ "trigger": "s_getBoneAtPoint(float:#float,float:#float):ret (return value: ccs.Bone):#Bone [Armature]", "contents": "getBoneAtPoint(${1:float:#float},${2:float:#float})" },{ "trigger": "s_getArmatureTransformDirty():ret (return value: bool):#bool [Armature]", "contents": "getArmatureTransformDirty()" },{ "trigger": "s_setVersion(float:#float):void [Armature]", "contents": "setVersion(${1:float:#float})" },{ "trigger": "s_updateOffsetPoint():void [Armature]", "contents": "updateOffsetPoint()" },{ "trigger": "s_getParentBone():ret (return value: ccs.Bone):#Bone [Armature]", "contents": "getParentBone()" },{ "trigger": "s_setArmatureData(armaturedata:#ccs.ArmatureData):void [Armature]", "contents": "setArmatureData(${1:armaturedata:#ccs.ArmatureData})" },{ "trigger": "s_removeBone(bone:#ccs.Bone,bool:#bool):void [Armature]", "contents": "removeBone(${1:bone:#ccs.Bone},${2:bool:#bool})" },{ "trigger": "s_getBatchNode():ret (return value: ccs.BatchNode):#BatchNode [Armature]", "contents": "getBatchNode()" },{ "trigger": "s_getName():ret (return value: string):#string [Armature]", "contents": "getName()" },{ "trigger": "f_init(string):ret (retunr value: bool):#bool [Armature]", "contents": "init(${1:string})" },{ "trigger": "f_init():ret (retunr value: bool):#bool [Armature]", "contents": "init(${1:})" },{ "trigger": "f_init(string, ccs.Bone):ret (retunr value: bool):#bool [Armature]", "contents": "init(${1:string},${2: ccs.Bone})" },{ "trigger": "s_init(str:#string,bone:#ccs.Bone):ret (retunr value: bool):#bool [Armature]", "contents": "init(${1:str:#string},${2:bone:#ccs.Bone})" },{ "trigger": "s_setParentBone(bone:#ccs.Bone):void [Armature]", "contents": "setParentBone(${1:bone:#ccs.Bone})" },{ "trigger": "s_drawContour():void [Armature]", "contents": "drawContour()" },{ "trigger": "s_setBatchNode(batchnode:#ccs.BatchNode):void [Armature]", "contents": "setBatchNode(${1:batchnode:#ccs.BatchNode})" },{ "trigger": "s_setName(str:#string):void [Armature]", "contents": "setName(${1:str:#string})" },{ "trigger": "s_addBone(bone:#ccs.Bone,str:#string):void [Armature]", "contents": "addBone(${1:bone:#ccs.Bone},${2:str:#string})" },{ "trigger": "s_getArmatureData():ret (return value: ccs.ArmatureData):#ArmatureData [Armature]", "contents": "getArmatureData()" },{ "trigger": "s_getVersion():ret (return value: float):#float [Armature]", "contents": "getVersion()" },{ "trigger": "s_getAnimation():ret (return value: ccs.ArmatureAnimation):#ArmatureAnimation [Armature]", "contents": "getAnimation()" },{ "trigger": "s_getBoneDic():ret (return value: map_table):#map_table [Armature]", "contents": "getBoneDic()" },{ "trigger": "f_create(string):ret (retunr value: ccs.Armature):#Armature [Armature]", "contents": "create(${1:string})" },{ "trigger": "f_create():ret (retunr value: ccs.Armature):#Armature [Armature]", "contents": "create(${1:})" },{ "trigger": "f_create(string, ccs.Bone):ret (retunr value: ccs.Armature):#Armature [Armature]", "contents": "create(${1:string},${2: ccs.Bone})" },{ "trigger": "s_create(str:#string,bone:#ccs.Bone):ret (retunr value: ccs.Armature):#Armature [Armature]", "contents": "create(${1:str:#string},${2:bone:#ccs.Bone})" },{ "trigger": "s_setAnchorPoint(vec2:#cc.Vec2):void [Armature]", "contents": "setAnchorPoint(${1:vec2:#cc.Vec2})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [Armature]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_getAnchorPointInPoints():ret (return value: cc.Vec2):#Vec2 [Armature]", "contents": "getAnchorPointInPoints()" },{ "trigger": "s_update(float:#float):void [Armature]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getNodeToParentTransform():ret (return value: cc.Mat4):#Mat4 [Armature]", "contents": "getNodeToParentTransform()" },{ "trigger": "s_getBoundingBox():ret (return value: rect_table):#rect_table [Armature]", "contents": "getBoundingBox()" },{ "trigger": "s_Armature():void [Armature]", "contents": "Armature()" },{ "trigger": "s_getStartSizeVar():ret (return value: float):#float [ParticleSystem]", "contents": "getStartSizeVar()" },{ "trigger": "s_getTexture():ret (return value: cc.Texture2D):#Texture2D [ParticleSystem]", "contents": "getTexture()" },{ "trigger": "s_isFull():ret (return value: bool):#bool [ParticleSystem]", "contents": "isFull()" },{ "trigger": "s_getBatchNode():ret (return value: cc.ParticleBatchNode):#ParticleBatchNode [ParticleSystem]", "contents": "getBatchNode()" },{ "trigger": "s_getStartColor():ret (return value: color4f_table):#color4f_table [ParticleSystem]", "contents": "getStartColor()" },{ "trigger": "s_getPositionType():ret (return value: cc.ParticleSystem::PositionType):#ParticleSystem::PositionType [ParticleSystem]", "contents": "getPositionType()" },{ "trigger": "s_setPosVar(vec2:#cc.Vec2):void [ParticleSystem]", "contents": "setPosVar(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getEndSpin():ret (return value: float):#float [ParticleSystem]", "contents": "getEndSpin()" },{ "trigger": "s_setRotatePerSecondVar(float:#float):void [ParticleSystem]", "contents": "setRotatePerSecondVar(${1:float:#float})" },{ "trigger": "s_getStartSpinVar():ret (return value: float):#float [ParticleSystem]", "contents": "getStartSpinVar()" },{ "trigger": "s_getRadialAccelVar():ret (return value: float):#float [ParticleSystem]", "contents": "getRadialAccelVar()" },{ "trigger": "s_getEndSizeVar():ret (return value: float):#float [ParticleSystem]", "contents": "getEndSizeVar()" },{ "trigger": "s_setRotation(float:#float):void [ParticleSystem]", "contents": "setRotation(${1:float:#float})" },{ "trigger": "s_setTangentialAccel(float:#float):void [ParticleSystem]", "contents": "setTangentialAccel(${1:float:#float})" },{ "trigger": "s_setScaleY(float:#float):void [ParticleSystem]", "contents": "setScaleY(${1:float:#float})" },{ "trigger": "s_setScaleX(float:#float):void [ParticleSystem]", "contents": "setScaleX(${1:float:#float})" },{ "trigger": "s_getRadialAccel():ret (return value: float):#float [ParticleSystem]", "contents": "getRadialAccel()" },{ "trigger": "s_setStartRadius(float:#float):void [ParticleSystem]", "contents": "setStartRadius(${1:float:#float})" },{ "trigger": "s_setRotatePerSecond(float:#float):void [ParticleSystem]", "contents": "setRotatePerSecond(${1:float:#float})" },{ "trigger": "s_setEndSize(float:#float):void [ParticleSystem]", "contents": "setEndSize(${1:float:#float})" },{ "trigger": "s_getGravity():ret (return value: cc.Vec2):#Vec2 [ParticleSystem]", "contents": "getGravity()" },{ "trigger": "s_getTangentialAccel():ret (return value: float):#float [ParticleSystem]", "contents": "getTangentialAccel()" },{ "trigger": "s_setEndRadius(float:#float):void [ParticleSystem]", "contents": "setEndRadius(${1:float:#float})" },{ "trigger": "s_getSpeed():ret (return value: float):#float [ParticleSystem]", "contents": "getSpeed()" },{ "trigger": "s_getAngle():ret (return value: float):#float [ParticleSystem]", "contents": "getAngle()" },{ "trigger": "s_setEndColor(color4f:#color4f_table):void [ParticleSystem]", "contents": "setEndColor(${1:color4f:#color4f_table})" },{ "trigger": "s_setStartSpin(float:#float):void [ParticleSystem]", "contents": "setStartSpin(${1:float:#float})" },{ "trigger": "s_setDuration(float:#float):void [ParticleSystem]", "contents": "setDuration(${1:float:#float})" },{ "trigger": "s_setTexture(texture2d:#cc.Texture2D):void [ParticleSystem]", "contents": "setTexture(${1:texture2d:#cc.Texture2D})" },{ "trigger": "s_getPosVar():ret (return value: cc.Vec2):#Vec2 [ParticleSystem]", "contents": "getPosVar()" },{ "trigger": "s_updateWithNoTime():void [ParticleSystem]", "contents": "updateWithNoTime()" },{ "trigger": "s_isBlendAdditive():ret (return value: bool):#bool [ParticleSystem]", "contents": "isBlendAdditive()" },{ "trigger": "s_getSpeedVar():ret (return value: float):#float [ParticleSystem]", "contents": "getSpeedVar()" },{ "trigger": "s_setPositionType(positiontype:#cc.ParticleSystem::PositionType):void [ParticleSystem]", "contents": "setPositionType(${1:positiontype:#cc.ParticleSystem::PositionType})" },{ "trigger": "s_stopSystem():void [ParticleSystem]", "contents": "stopSystem()" },{ "trigger": "s_getSourcePosition():ret (return value: cc.Vec2):#Vec2 [ParticleSystem]", "contents": "getSourcePosition()" },{ "trigger": "s_setLifeVar(float:#float):void [ParticleSystem]", "contents": "setLifeVar(${1:float:#float})" },{ "trigger": "s_setTotalParticles(int:#int):void [ParticleSystem]", "contents": "setTotalParticles(${1:int:#int})" },{ "trigger": "s_setEndColorVar(color4f:#color4f_table):void [ParticleSystem]", "contents": "setEndColorVar(${1:color4f:#color4f_table})" },{ "trigger": "s_updateQuadWithParticle(sparticle:#cc.sParticle,vec2:#cc.Vec2):void [ParticleSystem]", "contents": "updateQuadWithParticle(${1:sparticle:#cc.sParticle},${2:vec2:#cc.Vec2})" },{ "trigger": "s_getAtlasIndex():ret (return value: int):#int [ParticleSystem]", "contents": "getAtlasIndex()" },{ "trigger": "s_getStartSize():ret (return value: float):#float [ParticleSystem]", "contents": "getStartSize()" },{ "trigger": "s_setStartSpinVar(float:#float):void [ParticleSystem]", "contents": "setStartSpinVar(${1:float:#float})" },{ "trigger": "s_resetSystem():void [ParticleSystem]", "contents": "resetSystem()" },{ "trigger": "s_setAtlasIndex(int:#int):void [ParticleSystem]", "contents": "setAtlasIndex(${1:int:#int})" },{ "trigger": "s_setTangentialAccelVar(float:#float):void [ParticleSystem]", "contents": "setTangentialAccelVar(${1:float:#float})" },{ "trigger": "s_setEndRadiusVar(float:#float):void [ParticleSystem]", "contents": "setEndRadiusVar(${1:float:#float})" },{ "trigger": "s_getEndRadius():ret (return value: float):#float [ParticleSystem]", "contents": "getEndRadius()" },{ "trigger": "s_isOpacityModifyRGB():ret (return value: bool):#bool [ParticleSystem]", "contents": "isOpacityModifyRGB()" },{ "trigger": "s_isActive():ret (return value: bool):#bool [ParticleSystem]", "contents": "isActive()" },{ "trigger": "s_setRadialAccelVar(float:#float):void [ParticleSystem]", "contents": "setRadialAccelVar(${1:float:#float})" },{ "trigger": "s_setStartSize(float:#float):void [ParticleSystem]", "contents": "setStartSize(${1:float:#float})" },{ "trigger": "s_setSpeed(float:#float):void [ParticleSystem]", "contents": "setSpeed(${1:float:#float})" },{ "trigger": "s_getStartSpin():ret (return value: float):#float [ParticleSystem]", "contents": "getStartSpin()" },{ "trigger": "s_getRotatePerSecond():ret (return value: float):#float [ParticleSystem]", "contents": "getRotatePerSecond()" },{ "trigger": "s_initParticle(sparticle:#cc.sParticle):void [ParticleSystem]", "contents": "initParticle(${1:sparticle:#cc.sParticle})" },{ "trigger": "s_setEmitterMode(mode:#cc.ParticleSystem::Mode):void [ParticleSystem]", "contents": "setEmitterMode(${1:mode:#cc.ParticleSystem::Mode})" },{ "trigger": "s_getDuration():ret (return value: float):#float [ParticleSystem]", "contents": "getDuration()" },{ "trigger": "s_setSourcePosition(vec2:#cc.Vec2):void [ParticleSystem]", "contents": "setSourcePosition(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getEndSpinVar():ret (return value: float):#float [ParticleSystem]", "contents": "getEndSpinVar()" },{ "trigger": "s_setBlendAdditive(bool:#bool):void [ParticleSystem]", "contents": "setBlendAdditive(${1:bool:#bool})" },{ "trigger": "s_setLife(float:#float):void [ParticleSystem]", "contents": "setLife(${1:float:#float})" },{ "trigger": "s_setAngleVar(float:#float):void [ParticleSystem]", "contents": "setAngleVar(${1:float:#float})" },{ "trigger": "s_setRotationIsDir(bool:#bool):void [ParticleSystem]", "contents": "setRotationIsDir(${1:bool:#bool})" },{ "trigger": "s_setEndSizeVar(float:#float):void [ParticleSystem]", "contents": "setEndSizeVar(${1:float:#float})" },{ "trigger": "s_setAngle(float:#float):void [ParticleSystem]", "contents": "setAngle(${1:float:#float})" },{ "trigger": "s_setBatchNode(particlebatchnode:#cc.ParticleBatchNode):void [ParticleSystem]", "contents": "setBatchNode(${1:particlebatchnode:#cc.ParticleBatchNode})" },{ "trigger": "s_getTangentialAccelVar():ret (return value: float):#float [ParticleSystem]", "contents": "getTangentialAccelVar()" },{ "trigger": "s_getEmitterMode():ret (return value: cc.ParticleSystem::Mode):#ParticleSystem::Mode [ParticleSystem]", "contents": "getEmitterMode()" },{ "trigger": "s_setEndSpinVar(float:#float):void [ParticleSystem]", "contents": "setEndSpinVar(${1:float:#float})" },{ "trigger": "s_getAngleVar():ret (return value: float):#float [ParticleSystem]", "contents": "getAngleVar()" },{ "trigger": "s_setStartColor(color4f:#color4f_table):void [ParticleSystem]", "contents": "setStartColor(${1:color4f:#color4f_table})" },{ "trigger": "s_getRotatePerSecondVar():ret (return value: float):#float [ParticleSystem]", "contents": "getRotatePerSecondVar()" },{ "trigger": "s_getEndSize():ret (return value: float):#float [ParticleSystem]", "contents": "getEndSize()" },{ "trigger": "s_getLife():ret (return value: float):#float [ParticleSystem]", "contents": "getLife()" },{ "trigger": "s_setSpeedVar(float:#float):void [ParticleSystem]", "contents": "setSpeedVar(${1:float:#float})" },{ "trigger": "s_setAutoRemoveOnFinish(bool:#bool):void [ParticleSystem]", "contents": "setAutoRemoveOnFinish(${1:bool:#bool})" },{ "trigger": "s_setGravity(vec2:#cc.Vec2):void [ParticleSystem]", "contents": "setGravity(${1:vec2:#cc.Vec2})" },{ "trigger": "s_postStep():void [ParticleSystem]", "contents": "postStep()" },{ "trigger": "s_setEmissionRate(float:#float):void [ParticleSystem]", "contents": "setEmissionRate(${1:float:#float})" },{ "trigger": "s_getEndColorVar():ret (return value: color4f_table):#color4f_table [ParticleSystem]", "contents": "getEndColorVar()" },{ "trigger": "s_getRotationIsDir():ret (return value: bool):#bool [ParticleSystem]", "contents": "getRotationIsDir()" },{ "trigger": "s_setScale(float:#float):void [ParticleSystem]", "contents": "setScale(${1:float:#float})" },{ "trigger": "s_getEmissionRate():ret (return value: float):#float [ParticleSystem]", "contents": "getEmissionRate()" },{ "trigger": "s_getEndColor():ret (return value: color4f_table):#color4f_table [ParticleSystem]", "contents": "getEndColor()" },{ "trigger": "s_getLifeVar():ret (return value: float):#float [ParticleSystem]", "contents": "getLifeVar()" },{ "trigger": "s_setStartSizeVar(float:#float):void [ParticleSystem]", "contents": "setStartSizeVar(${1:float:#float})" },{ "trigger": "s_setOpacityModifyRGB(bool:#bool):void [ParticleSystem]", "contents": "setOpacityModifyRGB(${1:bool:#bool})" },{ "trigger": "s_addParticle():ret (return value: bool):#bool [ParticleSystem]", "contents": "addParticle()" },{ "trigger": "s_getStartRadius():ret (return value: float):#float [ParticleSystem]", "contents": "getStartRadius()" },{ "trigger": "s_getParticleCount():unsigned [ParticleSystem]", "contents": "getParticleCount()" },{ "trigger": "s_getStartRadiusVar():ret (return value: float):#float [ParticleSystem]", "contents": "getStartRadiusVar()" },{ "trigger": "s_setStartColorVar(color4f:#color4f_table):void [ParticleSystem]", "contents": "setStartColorVar(${1:color4f:#color4f_table})" },{ "trigger": "s_setEndSpin(float:#float):void [ParticleSystem]", "contents": "setEndSpin(${1:float:#float})" },{ "trigger": "s_setRadialAccel(float:#float):void [ParticleSystem]", "contents": "setRadialAccel(${1:float:#float})" },{ "trigger": "s_isAutoRemoveOnFinish():ret (return value: bool):#bool [ParticleSystem]", "contents": "isAutoRemoveOnFinish()" },{ "trigger": "s_getTotalParticles():ret (return value: int):#int [ParticleSystem]", "contents": "getTotalParticles()" },{ "trigger": "s_setStartRadiusVar(float:#float):void [ParticleSystem]", "contents": "setStartRadiusVar(${1:float:#float})" },{ "trigger": "s_getEndRadiusVar():ret (return value: float):#float [ParticleSystem]", "contents": "getEndRadiusVar()" },{ "trigger": "s_getStartColorVar():ret (return value: color4f_table):#color4f_table [ParticleSystem]", "contents": "getStartColorVar()" },{ "trigger": "s_create(str:#string):ret (return value: cc.ParticleSystem):#ParticleSystem [ParticleSystem]", "contents": "create(${1:str:#string})" },{ "trigger": "s_createWithTotalParticles(int:#int):ret (return value: cc.ParticleSystem):#ParticleSystem [ParticleSystem]", "contents": "createWithTotalParticles(${1:int:#int})" },{ "trigger": "s_update(float:#float):void [ParticleSystem]", "contents": "update(${1:float:#float})" },{ "trigger": "f_setEye(float, float, float):void [ActionCamera]", "contents": "setEye(${1:float},${2: float},${3: float})" },{ "trigger": "f_setEye(cc.Vec3):void [ActionCamera]", "contents": "setEye(${1:cc.Vec3})" },{ "trigger": "s_setEye(float:#float,float:#float,float:#float):void [ActionCamera]", "contents": "setEye(${1:float:#float},${2:float:#float},${3:float:#float})" },{ "trigger": "s_getEye():ret (return value: cc.Vec3):#Vec3 [ActionCamera]", "contents": "getEye()" },{ "trigger": "s_setUp(vec3:#cc.Vec3):void [ActionCamera]", "contents": "setUp(${1:vec3:#cc.Vec3})" },{ "trigger": "s_getCenter():ret (return value: cc.Vec3):#Vec3 [ActionCamera]", "contents": "getCenter()" },{ "trigger": "s_setCenter(vec3:#cc.Vec3):void [ActionCamera]", "contents": "setCenter(${1:vec3:#cc.Vec3})" },{ "trigger": "s_getUp():ret (return value: cc.Vec3):#Vec3 [ActionCamera]", "contents": "getUp()" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [ActionCamera]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.ActionCamera):#ActionCamera [ActionCamera]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.ActionCamera):#ActionCamera [ActionCamera]", "contents": "reverse()" },{ "trigger": "s_ActionCamera():void [ActionCamera]", "contents": "ActionCamera()" },{ "trigger": "s_turnOnTile(vec2:#cc.Vec2):void [TurnOffTiles]", "contents": "turnOnTile(${1:vec2:#cc.Vec2})" },{ "trigger": "s_turnOffTile(vec2:#cc.Vec2):void [TurnOffTiles]", "contents": "turnOffTile(${1:vec2:#cc.Vec2})" },{ "trigger": "s_shuffle(int int:#unsigned,int int:#unsigned):void [TurnOffTiles]", "contents": "shuffle(${1:int int:#unsigned},${2:int int:#unsigned})" },{ "trigger": "f_create(float, size_table, unsigned int):ret (retunr value: cc.TurnOffTiles):#TurnOffTiles [TurnOffTiles]", "contents": "create(${1:float},${2: size_table},${3: unsigned int})" },{ "trigger": "f_create(float, size_table):ret (retunr value: cc.TurnOffTiles):#TurnOffTiles [TurnOffTiles]", "contents": "create(${1:float},${2: size_table})" },{ "trigger": "s_create(float:#float,size:#size_table,int int:#unsigned):ret (retunr value: cc.TurnOffTiles):#TurnOffTiles [TurnOffTiles]", "contents": "create(${1:float:#float},${2:size:#size_table},${3:int int:#unsigned})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [TurnOffTiles]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.TurnOffTiles):#TurnOffTiles [TurnOffTiles]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [TurnOffTiles]", "contents": "update(${1:float:#float})" },{ "trigger": "s_setEnabled(bool:#bool):void [MenuItem]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_activate():void [MenuItem]", "contents": "activate()" },{ "trigger": "s_isEnabled():ret (return value: bool):#bool [MenuItem]", "contents": "isEnabled()" },{ "trigger": "s_selected():void [MenuItem]", "contents": "selected()" },{ "trigger": "s_isSelected():ret (return value: bool):#bool [MenuItem]", "contents": "isSelected()" },{ "trigger": "s_unselected():void [MenuItem]", "contents": "unselected()" },{ "trigger": "s_rect():ret (return value: rect_table):#rect_table [MenuItem]", "contents": "rect()" },{ "trigger": "s_getDescription():ret (return value: string):#string [MenuItem]", "contents": "getDescription()" },{ "trigger": "f_stopAllEffects():void [AudioEngine]", "contents": "stopAllEffects()" },{ "trigger": "f_getMusicVolume():ret (return value: float):#float [AudioEngine]", "contents": "getMusicVolume()" },{ "trigger": "f_isMusicPlaying():ret (return value: bool):#bool [AudioEngine]", "contents": "isMusicPlaying()" },{ "trigger": "f_getEffectsVolume():ret (return value: float):#float [AudioEngine]", "contents": "getEffectsVolume()" },{ "trigger": "f_setMusicVolume(float:#float):void [AudioEngine]", "contents": "setMusicVolume(${1:float:#float})" },{ "trigger": "f_stopEffect(int:#int):void [AudioEngine]", "contents": "stopEffect(${1:int:#int})" },{ "trigger": "f_stopMusic(bool:#bool):void [AudioEngine]", "contents": "stopMusic(${1:bool:#bool})" },{ "trigger": "f_playMusic(char:#char,bool:#bool):void [AudioEngine]", "contents": "playMusic(${1:char:#char},${2:bool:#bool})" },{ "trigger": "f_pauseAllEffects():void [AudioEngine]", "contents": "pauseAllEffects()" },{ "trigger": "f_preloadMusic(char:#char):void [AudioEngine]", "contents": "preloadMusic(${1:char:#char})" },{ "trigger": "f_resumeMusic():void [AudioEngine]", "contents": "resumeMusic()" },{ "trigger": "f_playEffect(string:#string,bool:#bool):ret (return value: int):#int [AudioEngine]", "contents": "playEffect(${1:string:#string},${2:bool:#bool})" },{ "trigger": "f_rewindMusic():void [AudioEngine]", "contents": "rewindMusic()" },{ "trigger": "f_willPlayMusic():ret (return value: bool):#bool [AudioEngine]", "contents": "willPlayMusic()" },{ "trigger": "f_unloadEffect(char:#char):void [AudioEngine]", "contents": "unloadEffect(${1:char:#char})" },{ "trigger": "f_preloadEffect(char:#char):void [AudioEngine]", "contents": "preloadEffect(${1:char:#char})" },{ "trigger": "f_willPlayMusic():ret (return value: bool):#bool [AudioEngine]", "contents": "willPlayMusic()" },{ "trigger": "f_setEffectsVolume(float:#float):void [AudioEngine]", "contents": "setEffectsVolume(${1:float:#float})" },{ "trigger": "f_pauseEffect(int int:#unsigned):void [AudioEngine]", "contents": "pauseEffect(${1:int int:#unsigned})" },{ "trigger": "f_resumeAllEffects(float:#float):void [AudioEngine]", "contents": "resumeAllEffects(${1:float:#float})" },{ "trigger": "f_pauseMusic():void [AudioEngine]", "contents": "pauseMusic()" },{ "trigger": "f_resumeEffect():void [AudioEngine]", "contents": "resumeEffect()" },{ "trigger": "f_pauseMusic():void [AudioEngine]", "contents": "pauseMusic()" },{ "trigger": "f_resumeEffect(int int:#unsigned):void [AudioEngine]", "contents": "resumeEffect(${1:int int:#unsigned})" },{ "trigger": "SizeTypem_absolute [SizeType]", "contents": "SizeType.absolute" },{ "trigger": "SizeTypem_percent [SizeType]", "contents": "SizeType.percent" },{ "trigger": "s_getSelectedState():ret (return value: bool):#bool [CheckBox]", "contents": "getSelectedState()" },{ "trigger": "s_loadTextureBackGroundSelected(str:#string,texturerestype:#ccui.Widget::TextureResType):void [CheckBox]", "contents": "loadTextureBackGroundSelected(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_loadTextureBackGroundDisabled(str:#string,texturerestype:#ccui.Widget::TextureResType):void [CheckBox]", "contents": "loadTextureBackGroundDisabled(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_addEventListener(func:#function):void [CheckBox]", "contents": "addEventListener(${1:func:#function})" },{ "trigger": "s_loadTextureFrontCross(str:#string,texturerestype:#ccui.Widget::TextureResType):void [CheckBox]", "contents": "loadTextureFrontCross(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_loadTextures(str:#string,str:#string,str:#string,str:#string,str:#string,texturerestype:#ccui.Widget::TextureResType):void [CheckBox]", "contents": "loadTextures(${1:str:#string},${2:str:#string},${3:str:#string},${4:str:#string},${5:str:#string},${6:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_loadTextureBackGround(str:#string,texturerestype:#ccui.Widget::TextureResType):void [CheckBox]", "contents": "loadTextureBackGround(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_setSelectedState(bool:#bool):void [CheckBox]", "contents": "setSelectedState(${1:bool:#bool})" },{ "trigger": "s_loadTextureFrontCrossDisabled(str:#string,texturerestype:#ccui.Widget::TextureResType):void [CheckBox]", "contents": "loadTextureFrontCrossDisabled(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "f_create(string, string, string, string, string, ccui.Widget::TextureResType):ret (retunr value: ccui.CheckBox):#CheckBox [CheckBox]", "contents": "create(${1:string},${2: string},${3: string},${4: string},${5: string},${6: ccui.Widget::TextureResType})" },{ "trigger": "f_create():ret (retunr value: ccui.CheckBox):#CheckBox [CheckBox]", "contents": "create(${1:})" },{ "trigger": "s_create(str:#string,str:#string,str:#string,str:#string,str:#string,texturerestype:#ccui.Widget::TextureResType):ret (retunr value: ccui.CheckBox):#CheckBox [CheckBox]", "contents": "create(${1:str:#string},${2:str:#string},${3:str:#string},${4:str:#string},${5:str:#string},${6:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [CheckBox]", "contents": "createInstance()" },{ "trigger": "s_getVirtualRenderer():ret (return value: cc.Node):#Node [CheckBox]", "contents": "getVirtualRenderer()" },{ "trigger": "s_getDescription():ret (return value: string):#string [CheckBox]", "contents": "getDescription()" },{ "trigger": "s_getVirtualRendererSize():ret (return value: size_table):#size_table [CheckBox]", "contents": "getVirtualRendererSize()" },{ "trigger": "s_CheckBox():void [CheckBox]", "contents": "CheckBox()" },{ "trigger": "s_isReverseDirection():ret (return value: bool):#bool [ProgressTimer]", "contents": "isReverseDirection()" },{ "trigger": "s_setBarChangeRate(vec2:#cc.Vec2):void [ProgressTimer]", "contents": "setBarChangeRate(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getPercentage():ret (return value: float):#float [ProgressTimer]", "contents": "getPercentage()" },{ "trigger": "s_setSprite(sprite:#cc.Sprite):void [ProgressTimer]", "contents": "setSprite(${1:sprite:#cc.Sprite})" },{ "trigger": "s_getType():ret (return value: cc.ProgressTimer::Type):#ProgressTimer::Type [ProgressTimer]", "contents": "getType()" },{ "trigger": "s_getSprite():ret (return value: cc.Sprite):#Sprite [ProgressTimer]", "contents": "getSprite()" },{ "trigger": "s_setMidpoint(vec2:#cc.Vec2):void [ProgressTimer]", "contents": "setMidpoint(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getBarChangeRate():ret (return value: cc.Vec2):#Vec2 [ProgressTimer]", "contents": "getBarChangeRate()" },{ "trigger": "f_setReverseDirection(bool):void [ProgressTimer]", "contents": "setReverseDirection(${1:bool})" },{ "trigger": "f_setReverseDirection(bool):void [ProgressTimer]", "contents": "setReverseDirection(${1:bool})" },{ "trigger": "s_setReverseDirection(bool:#bool):void [ProgressTimer]", "contents": "setReverseDirection(${1:bool:#bool})" },{ "trigger": "s_getMidpoint():ret (return value: cc.Vec2):#Vec2 [ProgressTimer]", "contents": "getMidpoint()" },{ "trigger": "s_setPercentage(float:#float):void [ProgressTimer]", "contents": "setPercentage(${1:float:#float})" },{ "trigger": "s_setType(type:#cc.ProgressTimer::Type):void [ProgressTimer]", "contents": "setType(${1:type:#cc.ProgressTimer::Type})" },{ "trigger": "s_create(sprite:#cc.Sprite):ret (return value: cc.ProgressTimer):#ProgressTimer [ProgressTimer]", "contents": "create(${1:sprite:#cc.Sprite})" },{ "trigger": "s_setAnchorPoint(vec2:#cc.Vec2):void [ProgressTimer]", "contents": "setAnchorPoint(${1:vec2:#cc.Vec2})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [ProgressTimer]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_setColor(color3b:#color3b_table):void [ProgressTimer]", "contents": "setColor(${1:color3b:#color3b_table})" },{ "trigger": "s_getColor():ret (return value: color3b_table):#color3b_table [ProgressTimer]", "contents": "getColor()" },{ "trigger": "s_setOpacity(char char:#unsigned):void [ProgressTimer]", "contents": "setOpacity(${1:char char:#unsigned})" },{ "trigger": "s_getOpacity():unsigned [ProgressTimer]", "contents": "getOpacity()" },{ "trigger": "s_create(float:#float,int:#int):ret (return value: cc.Blink):#Blink [Blink]", "contents": "create(${1:float:#float},${2:int:#int})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [Blink]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.Blink):#Blink [Blink]", "contents": "clone()" },{ "trigger": "s_stop():void [Blink]", "contents": "stop()" },{ "trigger": "s_reverse():ret (return value: cc.Blink):#Blink [Blink]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [Blink]", "contents": "update(${1:float:#float})" },{ "trigger": "s_create(float:#float,str:#string,float:#float,float:#float):ret (return value: cc.ActionTween):#ActionTween [ActionTween]", "contents": "create(${1:float:#float},${2:str:#string},${3:float:#float},${4:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [ActionTween]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.ActionTween):#ActionTween [ActionTween]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [ActionTween]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.ActionTween):#ActionTween [ActionTween]", "contents": "reverse()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseCubicActionOut):#EaseCubicActionOut [EaseCubicActionOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseCubicActionOut):#EaseCubicActionOut [EaseCubicActionOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseCubicActionOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseCubicActionOut):#EaseCubicActionOut [EaseCubicActionOut]", "contents": "reverse()" },{ "trigger": "SliderEventTypem_percentChanged [SliderEventType]", "contents": "SliderEventType.percentChanged" },{ "trigger": "f_setUniformTexture(string, unsigned int):void [GLProgramState]", "contents": "setUniformTexture(${1:string},${2: unsigned int})" },{ "trigger": "f_setUniformTexture(string, cc.Texture2D):void [GLProgramState]", "contents": "setUniformTexture(${1:string},${2: cc.Texture2D})" },{ "trigger": "s_setUniformTexture(str:#string,texture2d:#cc.Texture2D):void [GLProgramState]", "contents": "setUniformTexture(${1:str:#string},${2:texture2d:#cc.Texture2D})" },{ "trigger": "s_setUniformMat4(str:#string,mat4:#cc.Mat4):void [GLProgramState]", "contents": "setUniformMat4(${1:str:#string},${2:mat4:#cc.Mat4})" },{ "trigger": "s_getUniformCount():ret (return value: long):#long [GLProgramState]", "contents": "getUniformCount()" },{ "trigger": "s_setUniformFloat(str:#string,float:#float):void [GLProgramState]", "contents": "setUniformFloat(${1:str:#string},${2:float:#float})" },{ "trigger": "s_setUniformVec3(str:#string,vec3:#vec3_table):void [GLProgramState]", "contents": "setUniformVec3(${1:str:#string},${2:vec3:#vec3_table})" },{ "trigger": "s_setGLProgram(glprogram:#cc.GLProgram):void [GLProgramState]", "contents": "setGLProgram(${1:glprogram:#cc.GLProgram})" },{ "trigger": "s_setUniformVec4(str:#string,vec4:#vec4_table):void [GLProgramState]", "contents": "setUniformVec4(${1:str:#string},${2:vec4:#vec4_table})" },{ "trigger": "s_getVertexAttribCount():ret (return value: long):#long [GLProgramState]", "contents": "getVertexAttribCount()" },{ "trigger": "s_setUniformInt(str:#string,int:#int):void [GLProgramState]", "contents": "setUniformInt(${1:str:#string},${2:int:#int})" },{ "trigger": "s_setUniformVec2(str:#string,vec2:#vec2_table):void [GLProgramState]", "contents": "setUniformVec2(${1:str:#string},${2:vec2:#vec2_table})" },{ "trigger": "s_getVertexAttribsFlags():unsigned [GLProgramState]", "contents": "getVertexAttribsFlags()" },{ "trigger": "s_apply(mat4:#cc.Mat4):void [GLProgramState]", "contents": "apply(${1:mat4:#cc.Mat4})" },{ "trigger": "s_getGLProgram():ret (return value: cc.GLProgram):#GLProgram [GLProgramState]", "contents": "getGLProgram()" },{ "trigger": "s_create(glprogram:#cc.GLProgram):ret (return value: cc.GLProgramState):#GLProgramState [GLProgramState]", "contents": "create(${1:glprogram:#cc.GLProgram})" },{ "trigger": "s_getOrCreateWithGLProgramName(str:#string):ret (return value: cc.GLProgramState):#GLProgramState [GLProgramState]", "contents": "getOrCreateWithGLProgramName(${1:str:#string})" },{ "trigger": "s_getOrCreateWithGLProgram(glprogram:#cc.GLProgram):ret (return value: cc.GLProgramState):#GLProgramState [GLProgramState]", "contents": "getOrCreateWithGLProgram(${1:glprogram:#cc.GLProgram})" },{ "trigger": "ccuim_LayoutParameter [ccui]", "contents": "ccui.LayoutParameter" },{ "trigger": "ccuim_LinearLayoutParameter [ccui]", "contents": "ccui.LinearLayoutParameter" },{ "trigger": "ccuim_RelativeLayoutParameter [ccui]", "contents": "ccui.RelativeLayoutParameter" },{ "trigger": "ccuim_Widget [ccui]", "contents": "ccui.Widget" },{ "trigger": "ccuim_Layout [ccui]", "contents": "ccui.Layout" },{ "trigger": "ccuim_Button [ccui]", "contents": "ccui.Button" },{ "trigger": "ccuim_CheckBox [ccui]", "contents": "ccui.CheckBox" },{ "trigger": "ccuim_ImageView [ccui]", "contents": "ccui.ImageView" },{ "trigger": "ccuim_Text [ccui]", "contents": "ccui.Text" },{ "trigger": "ccuim_TextAtlas [ccui]", "contents": "ccui.TextAtlas" },{ "trigger": "ccuim_LoadingBar [ccui]", "contents": "ccui.LoadingBar" },{ "trigger": "ccuim_ScrollView [ccui]", "contents": "ccui.ScrollView" },{ "trigger": "ccuim_ListView [ccui]", "contents": "ccui.ListView" },{ "trigger": "ccuim_Slider [ccui]", "contents": "ccui.Slider" },{ "trigger": "ccuim_TextField [ccui]", "contents": "ccui.TextField" },{ "trigger": "ccuim_TextBMFont [ccui]", "contents": "ccui.TextBMFont" },{ "trigger": "ccuim_PageView [ccui]", "contents": "ccui.PageView" },{ "trigger": "ccuim_Helper [ccui]", "contents": "ccui.Helper" },{ "trigger": "ccuim_BrightStyle [ccui]", "contents": "ccui.BrightStyle" },{ "trigger": "ccuim_CheckBoxEventType [ccui]", "contents": "ccui.CheckBoxEventType" },{ "trigger": "ccuim_LayoutBackGroundColorType [ccui]", "contents": "ccui.LayoutBackGroundColorType" },{ "trigger": "ccuim_LayoutParameterType [ccui]", "contents": "ccui.LayoutParameterType" },{ "trigger": "ccuim_LayoutType [ccui]", "contents": "ccui.LayoutType" },{ "trigger": "ccuim_LinearGravity [ccui]", "contents": "ccui.LinearGravity" },{ "trigger": "ccuim_ListViewDirection [ccui]", "contents": "ccui.ListViewDirection" },{ "trigger": "ccuim_ListViewEventType [ccui]", "contents": "ccui.ListViewEventType" },{ "trigger": "ccuim_ListViewGravity [ccui]", "contents": "ccui.ListViewGravity" },{ "trigger": "ccuim_ListViewMoveDirection [ccui]", "contents": "ccui.ListViewMoveDirection" },{ "trigger": "ccuim_LoadingBarType [ccui]", "contents": "ccui.LoadingBarType" },{ "trigger": "ccuim_PageViewEventType [ccui]", "contents": "ccui.PageViewEventType" },{ "trigger": "ccuim_PositionType [ccui]", "contents": "ccui.PositionType" },{ "trigger": "ccuim_PVTouchDir [ccui]", "contents": "ccui.PVTouchDir" },{ "trigger": "ccuim_RelativeAlign [ccui]", "contents": "ccui.RelativeAlign" },{ "trigger": "ccuim_ScrollViewDir [ccui]", "contents": "ccui.ScrollViewDir" },{ "trigger": "ccuim_ScrollviewEventType [ccui]", "contents": "ccui.ScrollviewEventType" },{ "trigger": "ccuim_ScrollViewMoveDir [ccui]", "contents": "ccui.ScrollViewMoveDir" },{ "trigger": "ccuim_SizeType [ccui]", "contents": "ccui.SizeType" },{ "trigger": "ccuim_SliderEventType [ccui]", "contents": "ccui.SliderEventType" },{ "trigger": "ccuim_TextFiledEventType [ccui]", "contents": "ccui.TextFiledEventType" },{ "trigger": "ccuim_TextureResType [ccui]", "contents": "ccui.TextureResType" },{ "trigger": "ccuim_TouchEventType [ccui]", "contents": "ccui.TouchEventType" },{ "trigger": "ccuim_BrightStyle [ccui]", "contents": "ccui.BrightStyle" },{ "trigger": "ccuim_WidgetType [ccui]", "contents": "ccui.WidgetType" },{ "trigger": "ccuim_TextureResType [ccui]", "contents": "ccui.TextureResType" },{ "trigger": "ccuim_TouchEventType [ccui]", "contents": "ccui.TouchEventType" },{ "trigger": "ccuim_SizeType [ccui]", "contents": "ccui.SizeType" },{ "trigger": "ccuim_PositionType [ccui]", "contents": "ccui.PositionType" },{ "trigger": "ccuim_CheckBoxEventType [ccui]", "contents": "ccui.CheckBoxEventType" },{ "trigger": "ccuim_TextFiledEventType [ccui]", "contents": "ccui.TextFiledEventType" },{ "trigger": "ccuim_LayoutBackGroundColorType [ccui]", "contents": "ccui.LayoutBackGroundColorType" },{ "trigger": "ccuim_LayoutType [ccui]", "contents": "ccui.LayoutType" },{ "trigger": "ccuim_LayoutParameterType [ccui]", "contents": "ccui.LayoutParameterType" },{ "trigger": "ccuim_LinearGravity [ccui]", "contents": "ccui.LinearGravity" },{ "trigger": "ccuim_RelativeAlign [ccui]", "contents": "ccui.RelativeAlign" },{ "trigger": "ccuim_SliderEventType [ccui]", "contents": "ccui.SliderEventType" },{ "trigger": "ccuim_LoadingBarType [ccui]", "contents": "ccui.LoadingBarType" },{ "trigger": "ccuim_ScrollViewDir [ccui]", "contents": "ccui.ScrollViewDir" },{ "trigger": "ccuim_ScrollViewMoveDir [ccui]", "contents": "ccui.ScrollViewMoveDir" },{ "trigger": "ccuim_ScrollviewEventType [ccui]", "contents": "ccui.ScrollviewEventType" },{ "trigger": "ccuim_ListViewDirection [ccui]", "contents": "ccui.ListViewDirection" },{ "trigger": "ccuim_ListViewMoveDirection [ccui]", "contents": "ccui.ListViewMoveDirection" },{ "trigger": "ccuim_ListViewEventType [ccui]", "contents": "ccui.ListViewEventType" },{ "trigger": "ccuim_PageViewEventType [ccui]", "contents": "ccui.PageViewEventType" },{ "trigger": "ccuim_PVTouchDir [ccui]", "contents": "ccui.PVTouchDir" },{ "trigger": "ccuim_ListViewGravity [ccui]", "contents": "ccui.ListViewGravity" },{ "trigger": "ccuim_TextType [ccui]", "contents": "ccui.TextType" },{ "trigger": "f_create(float, float, float):ret (retunr value: cc.ScaleBy):#ScaleBy [ScaleBy]", "contents": "create(${1:float},${2: float},${3: float})" },{ "trigger": "f_create(float, float):ret (retunr value: cc.ScaleBy):#ScaleBy [ScaleBy]", "contents": "create(${1:float},${2: float})" },{ "trigger": "f_create(float, float, float, float):ret (retunr value: cc.ScaleBy):#ScaleBy [ScaleBy]", "contents": "create(${1:float},${2: float},${3: float},${4: float})" },{ "trigger": "s_create(float:#float,float:#float,float:#float,float:#float):ret (retunr value: cc.ScaleBy):#ScaleBy [ScaleBy]", "contents": "create(${1:float:#float},${2:float:#float},${3:float:#float},${4:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [ScaleBy]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.ScaleBy):#ScaleBy [ScaleBy]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.ScaleBy):#ScaleBy [ScaleBy]", "contents": "reverse()" },{ "trigger": "s_getAmplitudeRate():ret (return value: float):#float [JumpTiles3D]", "contents": "getAmplitudeRate()" },{ "trigger": "s_setAmplitude(float:#float):void [JumpTiles3D]", "contents": "setAmplitude(${1:float:#float})" },{ "trigger": "s_setAmplitudeRate(float:#float):void [JumpTiles3D]", "contents": "setAmplitudeRate(${1:float:#float})" },{ "trigger": "s_getAmplitude():ret (return value: float):#float [JumpTiles3D]", "contents": "getAmplitude()" },{ "trigger": "s_create(float:#float,size:#size_table,int int:#unsigned,float:#float):ret (return value: cc.JumpTiles3D):#JumpTiles3D [JumpTiles3D]", "contents": "create(${1:float:#float},${2:size:#size_table},${3:int int:#unsigned},${4:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.JumpTiles3D):#JumpTiles3D [JumpTiles3D]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [JumpTiles3D]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getDisplayRenderNode():ret (return value: cc.Node):#Node [DisplayManager]", "contents": "getDisplayRenderNode()" },{ "trigger": "s_getAnchorPointInPoints():ret (return value: cc.Vec2):#Vec2 [DisplayManager]", "contents": "getAnchorPointInPoints()" },{ "trigger": "s_getDisplayRenderNodeType():ret (return value: ccs.DisplayType):#DisplayType [DisplayManager]", "contents": "getDisplayRenderNodeType()" },{ "trigger": "s_removeDisplay(int:#int):void [DisplayManager]", "contents": "removeDisplay(${1:int:#int})" },{ "trigger": "s_setForceChangeDisplay(bool:#bool):void [DisplayManager]", "contents": "setForceChangeDisplay(${1:bool:#bool})" },{ "trigger": "s_init(bone:#ccs.Bone):ret (return value: bool):#bool [DisplayManager]", "contents": "init(${1:bone:#ccs.Bone})" },{ "trigger": "s_getContentSize():ret (return value: size_table):#size_table [DisplayManager]", "contents": "getContentSize()" },{ "trigger": "s_getBoundingBox():ret (return value: rect_table):#rect_table [DisplayManager]", "contents": "getBoundingBox()" },{ "trigger": "f_addDisplay(cc.Node, int):void [DisplayManager]", "contents": "addDisplay(${1:cc.Node},${2: int})" },{ "trigger": "f_addDisplay(ccs.DisplayData, int):void [DisplayManager]", "contents": "addDisplay(${1:ccs.DisplayData},${2: int})" },{ "trigger": "s_addDisplay(displaydata:#ccs.DisplayData,int:#int):void [DisplayManager]", "contents": "addDisplay(${1:displaydata:#ccs.DisplayData},${2:int:#int})" },{ "trigger": "f_containPoint(float, float):ret (retunr value: bool):#bool [DisplayManager]", "contents": "containPoint(${1:float},${2: float})" },{ "trigger": "f_containPoint(cc.Vec2):ret (retunr value: bool):#bool [DisplayManager]", "contents": "containPoint(${1:cc.Vec2})" },{ "trigger": "s_containPoint(float:#float,float:#float):ret (retunr value: bool):#bool [DisplayManager]", "contents": "containPoint(${1:float:#float},${2:float:#float})" },{ "trigger": "s_changeDisplayWithIndex(int:#int,bool:#bool):void [DisplayManager]", "contents": "changeDisplayWithIndex(${1:int:#int},${2:bool:#bool})" },{ "trigger": "s_changeDisplayWithName(str:#string,bool:#bool):void [DisplayManager]", "contents": "changeDisplayWithName(${1:str:#string},${2:bool:#bool})" },{ "trigger": "s_isForceChangeDisplay():ret (return value: bool):#bool [DisplayManager]", "contents": "isForceChangeDisplay()" },{ "trigger": "s_getCurrentDisplayIndex():ret (return value: int):#int [DisplayManager]", "contents": "getCurrentDisplayIndex()" },{ "trigger": "s_getAnchorPoint():ret (return value: cc.Vec2):#Vec2 [DisplayManager]", "contents": "getAnchorPoint()" },{ "trigger": "s_getDecorativeDisplayList():ret (return value: array_table):#array_table [DisplayManager]", "contents": "getDecorativeDisplayList()" },{ "trigger": "s_isVisible():ret (return value: bool):#bool [DisplayManager]", "contents": "isVisible()" },{ "trigger": "s_setVisible(bool:#bool):void [DisplayManager]", "contents": "setVisible(${1:bool:#bool})" },{ "trigger": "s_create(bone:#ccs.Bone):ret (return value: ccs.DisplayManager):#DisplayManager [DisplayManager]", "contents": "create(${1:bone:#ccs.Bone})" },{ "trigger": "s_DisplayManager():void [DisplayManager]", "contents": "DisplayManager()" },{ "trigger": "ListViewMoveDirectionm_none [ListViewMoveDirection]", "contents": "ListViewMoveDirection.none" },{ "trigger": "ListViewMoveDirectionm_up [ListViewMoveDirection]", "contents": "ListViewMoveDirection.up" },{ "trigger": "ListViewMoveDirectionm_down [ListViewMoveDirection]", "contents": "ListViewMoveDirection.down" },{ "trigger": "ListViewMoveDirectionm_left [ListViewMoveDirection]", "contents": "ListViewMoveDirection.left" },{ "trigger": "ListViewMoveDirectionm_right [ListViewMoveDirection]", "contents": "ListViewMoveDirection.right" },{ "trigger": "s_scrollToTop(float:#float,bool:#bool):void [ScrollView]", "contents": "scrollToTop(${1:float:#float},${2:bool:#bool})" },{ "trigger": "s_scrollToPercentHorizontal(float:#float,float:#float,bool:#bool):void [ScrollView]", "contents": "scrollToPercentHorizontal(${1:float:#float},${2:float:#float},${3:bool:#bool})" },{ "trigger": "s_isInertiaScrollEnabled():ret (return value: bool):#bool [ScrollView]", "contents": "isInertiaScrollEnabled()" },{ "trigger": "s_scrollToPercentBothDirection(vec2:#cc.Vec2,float:#float,bool:#bool):void [ScrollView]", "contents": "scrollToPercentBothDirection(${1:vec2:#cc.Vec2},${2:float:#float},${3:bool:#bool})" },{ "trigger": "s_getDirection():ret (return value: ccui.ScrollView::Direction):#ScrollView::Direction [ScrollView]", "contents": "getDirection()" },{ "trigger": "s_scrollToBottomLeft(float:#float,bool:#bool):void [ScrollView]", "contents": "scrollToBottomLeft(${1:float:#float},${2:bool:#bool})" },{ "trigger": "s_getInnerContainer():ret (return value: ccui.Layout):#Layout [ScrollView]", "contents": "getInnerContainer()" },{ "trigger": "s_jumpToBottom():void [ScrollView]", "contents": "jumpToBottom()" },{ "trigger": "s_setDirection(direction:#ccui.ScrollView::Direction):void [ScrollView]", "contents": "setDirection(${1:direction:#ccui.ScrollView::Direction})" },{ "trigger": "s_scrollToTopLeft(float:#float,bool:#bool):void [ScrollView]", "contents": "scrollToTopLeft(${1:float:#float},${2:bool:#bool})" },{ "trigger": "s_jumpToTopRight():void [ScrollView]", "contents": "jumpToTopRight()" },{ "trigger": "s_jumpToBottomLeft():void [ScrollView]", "contents": "jumpToBottomLeft()" },{ "trigger": "s_setInnerContainerSize(size:#size_table):void [ScrollView]", "contents": "setInnerContainerSize(${1:size:#size_table})" },{ "trigger": "s_getInnerContainerSize():ret (return value: size_table):#size_table [ScrollView]", "contents": "getInnerContainerSize()" },{ "trigger": "s_isBounceEnabled():ret (return value: bool):#bool [ScrollView]", "contents": "isBounceEnabled()" },{ "trigger": "s_jumpToPercentVertical(float:#float):void [ScrollView]", "contents": "jumpToPercentVertical(${1:float:#float})" },{ "trigger": "s_addEventListener(func:#function):void [ScrollView]", "contents": "addEventListener(${1:func:#function})" },{ "trigger": "s_setInertiaScrollEnabled(bool:#bool):void [ScrollView]", "contents": "setInertiaScrollEnabled(${1:bool:#bool})" },{ "trigger": "s_jumpToTopLeft():void [ScrollView]", "contents": "jumpToTopLeft()" },{ "trigger": "s_jumpToPercentHorizontal(float:#float):void [ScrollView]", "contents": "jumpToPercentHorizontal(${1:float:#float})" },{ "trigger": "s_jumpToBottomRight():void [ScrollView]", "contents": "jumpToBottomRight()" },{ "trigger": "s_setBounceEnabled(bool:#bool):void [ScrollView]", "contents": "setBounceEnabled(${1:bool:#bool})" },{ "trigger": "s_jumpToTop():void [ScrollView]", "contents": "jumpToTop()" },{ "trigger": "s_scrollToLeft(float:#float,bool:#bool):void [ScrollView]", "contents": "scrollToLeft(${1:float:#float},${2:bool:#bool})" },{ "trigger": "s_jumpToPercentBothDirection(vec2:#cc.Vec2):void [ScrollView]", "contents": "jumpToPercentBothDirection(${1:vec2:#cc.Vec2})" },{ "trigger": "s_scrollToPercentVertical(float:#float,float:#float,bool:#bool):void [ScrollView]", "contents": "scrollToPercentVertical(${1:float:#float},${2:float:#float},${3:bool:#bool})" },{ "trigger": "s_scrollToBottom(float:#float,bool:#bool):void [ScrollView]", "contents": "scrollToBottom(${1:float:#float},${2:bool:#bool})" },{ "trigger": "s_scrollToBottomRight(float:#float,bool:#bool):void [ScrollView]", "contents": "scrollToBottomRight(${1:float:#float},${2:bool:#bool})" },{ "trigger": "s_jumpToLeft():void [ScrollView]", "contents": "jumpToLeft()" },{ "trigger": "s_scrollToRight(float:#float,bool:#bool):void [ScrollView]", "contents": "scrollToRight(${1:float:#float},${2:bool:#bool})" },{ "trigger": "s_jumpToRight():void [ScrollView]", "contents": "jumpToRight()" },{ "trigger": "s_scrollToTopRight(float:#float,bool:#bool):void [ScrollView]", "contents": "scrollToTopRight(${1:float:#float},${2:bool:#bool})" },{ "trigger": "s_create():ret (return value: ccui.ScrollView):#ScrollView [ScrollView]", "contents": "create()" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [ScrollView]", "contents": "createInstance()" },{ "trigger": "f_addChild(cc.Node, int):void [ScrollView]", "contents": "addChild(${1:cc.Node},${2: int})" },{ "trigger": "f_addChild(cc.Node):void [ScrollView]", "contents": "addChild(${1:cc.Node})" },{ "trigger": "f_addChild(cc.Node, int, int):void [ScrollView]", "contents": "addChild(${1:cc.Node},${2: int},${3: int})" },{ "trigger": "s_addChild(node:#cc.Node,int:#int,int:#int):void [ScrollView]", "contents": "addChild(${1:node:#cc.Node},${2:int:#int},${3:int:#int})" },{ "trigger": "s_getChildByName(str:#string):ret (return value: ccui.Widget):#Widget [ScrollView]", "contents": "getChildByName(${1:str:#string})" },{ "trigger": "s_getDescription():ret (return value: string):#string [ScrollView]", "contents": "getDescription()" },{ "trigger": "s_update(float:#float):void [ScrollView]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getLayoutType():ret (return value: ccui.Layout::Type):#Layout::Type [ScrollView]", "contents": "getLayoutType()" },{ "trigger": "s_removeAllChildrenWithCleanup(bool:#bool):void [ScrollView]", "contents": "removeAllChildrenWithCleanup(${1:bool:#bool})" },{ "trigger": "s_removeAllChildren():void [ScrollView]", "contents": "removeAllChildren()" },{ "trigger": "s_removeChild(node:#cc.Node,bool:#bool):void [ScrollView]", "contents": "removeChild(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "f_getChildren():ret (retunr value: array_table):#array_table [ScrollView]", "contents": "getChildren(${1:})" },{ "trigger": "f_getChildren():ret (retunr value: array_table):#array_table [ScrollView]", "contents": "getChildren(${1:})" },{ "trigger": "s_getChildren():ret (retunr value: array_table):#array_table [ScrollView]", "contents": "getChildren()" },{ "trigger": "s_getChildByTag(int:#int):ret (return value: cc.Node):#Node [ScrollView]", "contents": "getChildByTag(${1:int:#int})" },{ "trigger": "s_getChildrenCount():ret (return value: long):#long [ScrollView]", "contents": "getChildrenCount()" },{ "trigger": "s_setLayoutType(type:#ccui.Layout::Type):void [ScrollView]", "contents": "setLayoutType(${1:type:#ccui.Layout::Type})" },{ "trigger": "s_ScrollView():void [ScrollView]", "contents": "ScrollView()" },{ "trigger": "s_transformTile(vec2:#cc.Vec2,float:#float):void [FadeOutUpTiles]", "contents": "transformTile(${1:vec2:#cc.Vec2},${2:float:#float})" },{ "trigger": "s_create(float:#float,size:#size_table):ret (return value: cc.FadeOutUpTiles):#FadeOutUpTiles [FadeOutUpTiles]", "contents": "create(${1:float:#float},${2:size:#size_table})" },{ "trigger": "s_clone():ret (return value: cc.FadeOutUpTiles):#FadeOutUpTiles [FadeOutUpTiles]", "contents": "clone()" },{ "trigger": "s_testFunc(size:#size_table,float:#float):ret (return value: float):#float [FadeOutUpTiles]", "contents": "testFunc(${1:size:#size_table},${2:float:#float})" },{ "trigger": "s_setInnerAction(actioninterval:#cc.ActionInterval):void [RepeatForever]", "contents": "setInnerAction(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_getInnerAction():ret (return value: cc.ActionInterval):#ActionInterval [RepeatForever]", "contents": "getInnerAction()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.RepeatForever):#RepeatForever [RepeatForever]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [RepeatForever]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.RepeatForever):#RepeatForever [RepeatForever]", "contents": "clone()" },{ "trigger": "s_isDone():ret (return value: bool):#bool [RepeatForever]", "contents": "isDone()" },{ "trigger": "s_reverse():ret (return value: cc.RepeatForever):#RepeatForever [RepeatForever]", "contents": "reverse()" },{ "trigger": "s_step(float:#float):void [RepeatForever]", "contents": "step(${1:float:#float})" },{ "trigger": "s_enableShadow(size:#size_table,float:#float,float:#float,bool:#bool):void [LabelTTF]", "contents": "enableShadow(${1:size:#size_table},${2:float:#float},${3:float:#float},${4:bool:#bool})" },{ "trigger": "s_setDimensions(size:#size_table):void [LabelTTF]", "contents": "setDimensions(${1:size:#size_table})" },{ "trigger": "s_getFontSize():ret (return value: float):#float [LabelTTF]", "contents": "getFontSize()" },{ "trigger": "s_getString():ret (return value: string):#string [LabelTTF]", "contents": "getString()" },{ "trigger": "s_setFlippedY(bool:#bool):void [LabelTTF]", "contents": "setFlippedY(${1:bool:#bool})" },{ "trigger": "s_setFlippedX(bool:#bool):void [LabelTTF]", "contents": "setFlippedX(${1:bool:#bool})" },{ "trigger": "s_setTextDefinition(fontdefinition:#cc.FontDefinition):void [LabelTTF]", "contents": "setTextDefinition(${1:fontdefinition:#cc.FontDefinition})" },{ "trigger": "s_setFontName(str:#string):void [LabelTTF]", "contents": "setFontName(${1:str:#string})" },{ "trigger": "s_getHorizontalAlignment():ret (return value: cc.TextHAlignment):#TextHAlignment [LabelTTF]", "contents": "getHorizontalAlignment()" },{ "trigger": "s_initWithStringAndTextDefinition(str:#string,fontdefinition:#cc.FontDefinition):ret (return value: bool):#bool [LabelTTF]", "contents": "initWithStringAndTextDefinition(${1:str:#string},${2:fontdefinition:#cc.FontDefinition})" },{ "trigger": "s_setString(str:#string):void [LabelTTF]", "contents": "setString(${1:str:#string})" },{ "trigger": "s_initWithString(str:#string,str:#string,float:#float,size:#size_table,texthalignment:#cc.TextHAlignment,textvalignment:#cc.TextVAlignment):ret (return value: bool):#bool [LabelTTF]", "contents": "initWithString(${1:str:#string},${2:str:#string},${3:float:#float},${4:size:#size_table},${5:texthalignment:#cc.TextHAlignment},${6:textvalignment:#cc.TextVAlignment})" },{ "trigger": "s_setFontFillColor(color3b:#color3b_table,bool:#bool):void [LabelTTF]", "contents": "setFontFillColor(${1:color3b:#color3b_table},${2:bool:#bool})" },{ "trigger": "s_getBlendFunc():ret (return value: cc.BlendFunc):#BlendFunc [LabelTTF]", "contents": "getBlendFunc()" },{ "trigger": "s_enableStroke(color3b:#color3b_table,float:#float,bool:#bool):void [LabelTTF]", "contents": "enableStroke(${1:color3b:#color3b_table},${2:float:#float},${3:bool:#bool})" },{ "trigger": "s_getDimensions():ret (return value: size_table):#size_table [LabelTTF]", "contents": "getDimensions()" },{ "trigger": "s_setVerticalAlignment(textvalignment:#cc.TextVAlignment):void [LabelTTF]", "contents": "setVerticalAlignment(${1:textvalignment:#cc.TextVAlignment})" },{ "trigger": "s_setFontSize(float:#float):void [LabelTTF]", "contents": "setFontSize(${1:float:#float})" },{ "trigger": "s_getVerticalAlignment():ret (return value: cc.TextVAlignment):#TextVAlignment [LabelTTF]", "contents": "getVerticalAlignment()" },{ "trigger": "s_getTextDefinition():ret (return value: cc.FontDefinition):#FontDefinition [LabelTTF]", "contents": "getTextDefinition()" },{ "trigger": "s_setBlendFunc(blendfunc:#cc.BlendFunc):void [LabelTTF]", "contents": "setBlendFunc(${1:blendfunc:#cc.BlendFunc})" },{ "trigger": "s_getFontName():ret (return value: string):#string [LabelTTF]", "contents": "getFontName()" },{ "trigger": "s_setHorizontalAlignment(texthalignment:#cc.TextHAlignment):void [LabelTTF]", "contents": "setHorizontalAlignment(${1:texthalignment:#cc.TextHAlignment})" },{ "trigger": "s_disableShadow():void [LabelTTF]", "contents": "disableShadow()" },{ "trigger": "s_disableStroke():void [LabelTTF]", "contents": "disableStroke()" },{ "trigger": "f_create():ret (retunr value: cc.LabelTTF):#LabelTTF [LabelTTF]", "contents": "create(${1:})" },{ "trigger": "f_create(string, string, float, size_table, cc.TextHAlignment, cc.TextVAlignment):ret (retunr value: cc.LabelTTF):#LabelTTF [LabelTTF]", "contents": "create(${1:string},${2: string},${3: float},${4: size_table},${5: cc.TextHAlignment},${6: cc.TextVAlignment})" },{ "trigger": "s_create(str:#string,str:#string,float:#float,size:#size_table,texthalignment:#cc.TextHAlignment,textvalignment:#cc.TextVAlignment):ret (retunr value: cc.LabelTTF):#LabelTTF [LabelTTF]", "contents": "create(${1:str:#string},${2:str:#string},${3:float:#float},${4:size:#size_table},${5:texthalignment:#cc.TextHAlignment},${6:textvalignment:#cc.TextVAlignment})" },{ "trigger": "s_createWithFontDefinition(str:#string,fontdefinition:#cc.FontDefinition):ret (return value: cc.LabelTTF):#LabelTTF [LabelTTF]", "contents": "createWithFontDefinition(${1:str:#string},${2:fontdefinition:#cc.FontDefinition})" },{ "trigger": "s_getBoundingBox():ret (return value: rect_table):#rect_table [LabelTTF]", "contents": "getBoundingBox()" },{ "trigger": "s_getDescription():ret (return value: string):#string [LabelTTF]", "contents": "getDescription()" },{ "trigger": "s_getContentSize():ret (return value: size_table):#size_table [LabelTTF]", "contents": "getContentSize()" },{ "trigger": "s_LabelTTF():void [LabelTTF]", "contents": "LabelTTF()" },{ "trigger": "s_setEnabled(bool:#bool):void [MenuItemSprite]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_selected():void [MenuItemSprite]", "contents": "selected()" },{ "trigger": "s_setNormalImage(node:#cc.Node):void [MenuItemSprite]", "contents": "setNormalImage(${1:node:#cc.Node})" },{ "trigger": "s_setDisabledImage(node:#cc.Node):void [MenuItemSprite]", "contents": "setDisabledImage(${1:node:#cc.Node})" },{ "trigger": "s_setSelectedImage(node:#cc.Node):void [MenuItemSprite]", "contents": "setSelectedImage(${1:node:#cc.Node})" },{ "trigger": "s_getDisabledImage():ret (return value: cc.Node):#Node [MenuItemSprite]", "contents": "getDisabledImage()" },{ "trigger": "s_getSelectedImage():ret (return value: cc.Node):#Node [MenuItemSprite]", "contents": "getSelectedImage()" },{ "trigger": "s_getNormalImage():ret (return value: cc.Node):#Node [MenuItemSprite]", "contents": "getNormalImage()" },{ "trigger": "s_unselected():void [MenuItemSprite]", "contents": "unselected()" },{ "trigger": "s_create():ret (return value: cc.ParticleGalaxy):#ParticleGalaxy [ParticleGalaxy]", "contents": "create()" },{ "trigger": "s_createWithTotalParticles(int:#int):ret (return value: cc.ParticleGalaxy):#ParticleGalaxy [ParticleGalaxy]", "contents": "createWithTotalParticles(${1:int:#int})" },{ "trigger": "CheckBoxEventTypem_selected [CheckBoxEventType]", "contents": "CheckBoxEventType.selected" },{ "trigger": "CheckBoxEventTypem_unselected [CheckBoxEventType]", "contents": "CheckBoxEventType.unselected" },{ "trigger": "s_getBone():ret (return value: ccs.Bone):#Bone [Skin]", "contents": "getBone()" },{ "trigger": "s_getNodeToWorldTransformAR():ret (return value: cc.Mat4):#Mat4 [Skin]", "contents": "getNodeToWorldTransformAR()" },{ "trigger": "s_initWithFile(str:#string):ret (return value: bool):#bool [Skin]", "contents": "initWithFile(${1:str:#string})" },{ "trigger": "s_getDisplayName():ret (return value: string):#string [Skin]", "contents": "getDisplayName()" },{ "trigger": "s_updateArmatureTransform():void [Skin]", "contents": "updateArmatureTransform()" },{ "trigger": "s_initWithSpriteFrameName(str:#string):ret (return value: bool):#bool [Skin]", "contents": "initWithSpriteFrameName(${1:str:#string})" },{ "trigger": "s_setBone(bone:#ccs.Bone):void [Skin]", "contents": "setBone(${1:bone:#ccs.Bone})" },{ "trigger": "f_create(string):ret (retunr value: ccs.Skin):#Skin [Skin]", "contents": "create(${1:string})" },{ "trigger": "f_create():ret (retunr value: ccs.Skin):#Skin [Skin]", "contents": "create(${1:})" },{ "trigger": "s_create(str:#string):ret (retunr value: ccs.Skin):#Skin [Skin]", "contents": "create(${1:str:#string})" },{ "trigger": "s_createWithSpriteFrameName(str:#string):ret (return value: ccs.Skin):#Skin [Skin]", "contents": "createWithSpriteFrameName(${1:str:#string})" },{ "trigger": "s_updateTransform():void [Skin]", "contents": "updateTransform()" },{ "trigger": "s_getNodeToWorldTransform():ret (return value: cc.Mat4):#Mat4 [Skin]", "contents": "getNodeToWorldTransform()" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [Skin]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_Skin():void [Skin]", "contents": "Skin()" },{ "trigger": "s_clone():ret (return value: cc.EventListenerMouse):#EventListenerMouse [EventListenerMouse]", "contents": "clone()" },{ "trigger": "s_checkAvailable():ret (return value: bool):#bool [EventListenerMouse]", "contents": "checkAvailable()" },{ "trigger": "s_create(float:#float,size:#size_table,int:#int,bool:#bool):ret (return value: cc.Shaky3D):#Shaky3D [Shaky3D]", "contents": "create(${1:float:#float},${2:size:#size_table},${3:int:#int},${4:bool:#bool})" },{ "trigger": "s_clone():ret (return value: cc.Shaky3D):#Shaky3D [Shaky3D]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [Shaky3D]", "contents": "update(${1:float:#float})" },{ "trigger": "MovementEventTypem_start [MovementEventType]", "contents": "MovementEventType.start" },{ "trigger": "MovementEventTypem_complete [MovementEventType]", "contents": "MovementEventType.complete" },{ "trigger": "MovementEventTypem_loopComplete [MovementEventType]", "contents": "MovementEventType.loopComplete" },{ "trigger": "s_create():ret (return value: cc.Hide):#Hide [Hide]", "contents": "create()" },{ "trigger": "s_clone():ret (return value: cc.Hide):#Hide [Hide]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [Hide]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.ActionInstant):#ActionInstant [Hide]", "contents": "reverse()" },{ "trigger": "s_setRate(float:#float):void [EaseRateAction]", "contents": "setRate(${1:float:#float})" },{ "trigger": "s_getRate():ret (return value: float):#float [EaseRateAction]", "contents": "getRate()" },{ "trigger": "s_clone():ret (return value: cc.EaseRateAction):#EaseRateAction [EaseRateAction]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.EaseRateAction):#EaseRateAction [EaseRateAction]", "contents": "reverse()" },{ "trigger": "s_resizableSpriteWithCapInsets(rect:#rect_table):ret (return value: cc.Scale9Sprite):#Scale9Sprite [Scale9Sprite]", "contents": "resizableSpriteWithCapInsets(${1:rect:#rect_table})" },{ "trigger": "s_setInsetBottom(float:#float):void [Scale9Sprite]", "contents": "setInsetBottom(${1:float:#float})" },{ "trigger": "f_initWithSpriteFrameName(string):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithSpriteFrameName(${1:string})" },{ "trigger": "f_initWithSpriteFrameName(string, rect_table):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithSpriteFrameName(${1:string},${2: rect_table})" },{ "trigger": "s_initWithSpriteFrameName(str:#string,rect:#rect_table):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithSpriteFrameName(${1:str:#string},${2:rect:#rect_table})" },{ "trigger": "s_setInsetTop(float:#float):void [Scale9Sprite]", "contents": "setInsetTop(${1:float:#float})" },{ "trigger": "s_init():ret (return value: bool):#bool [Scale9Sprite]", "contents": "init()" },{ "trigger": "s_setPreferredSize(size:#size_table):void [Scale9Sprite]", "contents": "setPreferredSize(${1:size:#size_table})" },{ "trigger": "s_setSpriteFrame(spriteframe:#cc.SpriteFrame):void [Scale9Sprite]", "contents": "setSpriteFrame(${1:spriteframe:#cc.SpriteFrame})" },{ "trigger": "f_initWithBatchNode(cc.SpriteBatchNode, rect_table, rect_table):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithBatchNode(${1:cc.SpriteBatchNode},${2: rect_table},${3: rect_table})" },{ "trigger": "f_initWithBatchNode(cc.SpriteBatchNode, rect_table, bool, rect_table):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithBatchNode(${1:cc.SpriteBatchNode},${2: rect_table},${3: bool},${4: rect_table})" },{ "trigger": "s_initWithBatchNode(spritebatchnode:#cc.SpriteBatchNode,rect:#rect_table,bool:#bool,rect:#rect_table):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithBatchNode(${1:spritebatchnode:#cc.SpriteBatchNode},${2:rect:#rect_table},${3:bool:#bool},${4:rect:#rect_table})" },{ "trigger": "s_getInsetBottom():ret (return value: float):#float [Scale9Sprite]", "contents": "getInsetBottom()" },{ "trigger": "s_getCapInsets():ret (return value: rect_table):#rect_table [Scale9Sprite]", "contents": "getCapInsets()" },{ "trigger": "s_updateWithBatchNode(spritebatchnode:#cc.SpriteBatchNode,rect:#rect_table,bool:#bool,rect:#rect_table):ret (return value: bool):#bool [Scale9Sprite]", "contents": "updateWithBatchNode(${1:spritebatchnode:#cc.SpriteBatchNode},${2:rect:#rect_table},${3:bool:#bool},${4:rect:#rect_table})" },{ "trigger": "s_getInsetRight():ret (return value: float):#float [Scale9Sprite]", "contents": "getInsetRight()" },{ "trigger": "s_getOriginalSize():ret (return value: size_table):#size_table [Scale9Sprite]", "contents": "getOriginalSize()" },{ "trigger": "f_initWithFile(string, rect_table):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithFile(${1:string},${2: rect_table})" },{ "trigger": "f_initWithFile(string, rect_table, rect_table):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithFile(${1:string},${2: rect_table},${3: rect_table})" },{ "trigger": "f_initWithFile(rect_table, string):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithFile(${1:rect_table},${2: string})" },{ "trigger": "f_initWithFile(string):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithFile(${1:string})" },{ "trigger": "s_initWithFile(str:#string,rect:#rect_table,rect:#rect_table):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithFile(${1:str:#string},${2:rect:#rect_table},${3:rect:#rect_table})" },{ "trigger": "s_getInsetTop():ret (return value: float):#float [Scale9Sprite]", "contents": "getInsetTop()" },{ "trigger": "s_setInsetLeft(float:#float):void [Scale9Sprite]", "contents": "setInsetLeft(${1:float:#float})" },{ "trigger": "f_initWithSpriteFrame(cc.SpriteFrame):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithSpriteFrame(${1:cc.SpriteFrame})" },{ "trigger": "f_initWithSpriteFrame(cc.SpriteFrame, rect_table):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithSpriteFrame(${1:cc.SpriteFrame},${2: rect_table})" },{ "trigger": "s_initWithSpriteFrame(spriteframe:#cc.SpriteFrame,rect:#rect_table):ret (retunr value: bool):#bool [Scale9Sprite]", "contents": "initWithSpriteFrame(${1:spriteframe:#cc.SpriteFrame},${2:rect:#rect_table})" },{ "trigger": "s_getPreferredSize():ret (return value: size_table):#size_table [Scale9Sprite]", "contents": "getPreferredSize()" },{ "trigger": "s_setCapInsets(rect:#rect_table):void [Scale9Sprite]", "contents": "setCapInsets(${1:rect:#rect_table})" },{ "trigger": "s_getInsetLeft():ret (return value: float):#float [Scale9Sprite]", "contents": "getInsetLeft()" },{ "trigger": "s_setInsetRight(float:#float):void [Scale9Sprite]", "contents": "setInsetRight(${1:float:#float})" },{ "trigger": "f_create(string, rect_table, rect_table):ret (retunr value: cc.Scale9Sprite):#Scale9Sprite [Scale9Sprite]", "contents": "create(${1:string},${2: rect_table},${3: rect_table})" },{ "trigger": "f_create():ret (retunr value: cc.Scale9Sprite):#Scale9Sprite [Scale9Sprite]", "contents": "create(${1:})" },{ "trigger": "f_create(rect_table, string):ret (retunr value: cc.Scale9Sprite):#Scale9Sprite [Scale9Sprite]", "contents": "create(${1:rect_table},${2: string})" },{ "trigger": "f_create(string, rect_table):ret (retunr value: cc.Scale9Sprite):#Scale9Sprite [Scale9Sprite]", "contents": "create(${1:string},${2: rect_table})" },{ "trigger": "f_create(string):ret (retunr value: cc.Scale9Sprite):#Scale9Sprite [Scale9Sprite]", "contents": "create(${1:string})" },{ "trigger": "s_create(str:#string,rect:#rect_table,rect:#rect_table):ret (retunr value: cc.Scale9Sprite):#Scale9Sprite [Scale9Sprite]", "contents": "create(${1:str:#string},${2:rect:#rect_table},${3:rect:#rect_table})" },{ "trigger": "f_createWithSpriteFrameName(string, rect_table):ret (retunr value: cc.Scale9Sprite):#Scale9Sprite [Scale9Sprite]", "contents": "createWithSpriteFrameName(${1:string},${2: rect_table})" },{ "trigger": "f_createWithSpriteFrameName(string):ret (retunr value: cc.Scale9Sprite):#Scale9Sprite [Scale9Sprite]", "contents": "createWithSpriteFrameName(${1:string})" },{ "trigger": "s_createWithSpriteFrameName(str:#string,rect:#rect_table):ret (retunr value: cc.Scale9Sprite):#Scale9Sprite [Scale9Sprite]", "contents": "createWithSpriteFrameName(${1:str:#string},${2:rect:#rect_table})" },{ "trigger": "f_createWithSpriteFrame(cc.SpriteFrame, rect_table):ret (retunr value: cc.Scale9Sprite):#Scale9Sprite [Scale9Sprite]", "contents": "createWithSpriteFrame(${1:cc.SpriteFrame},${2: rect_table})" },{ "trigger": "f_createWithSpriteFrame(cc.SpriteFrame):ret (retunr value: cc.Scale9Sprite):#Scale9Sprite [Scale9Sprite]", "contents": "createWithSpriteFrame(${1:cc.SpriteFrame})" },{ "trigger": "s_createWithSpriteFrame(spriteframe:#cc.SpriteFrame,rect:#rect_table):ret (retunr value: cc.Scale9Sprite):#Scale9Sprite [Scale9Sprite]", "contents": "createWithSpriteFrame(${1:spriteframe:#cc.SpriteFrame},${2:rect:#rect_table})" },{ "trigger": "s_isOpacityModifyRGB():ret (return value: bool):#bool [Scale9Sprite]", "contents": "isOpacityModifyRGB()" },{ "trigger": "s_setColor(color3b:#color3b_table):void [Scale9Sprite]", "contents": "setColor(${1:color3b:#color3b_table})" },{ "trigger": "s_setOpacityModifyRGB(bool:#bool):void [Scale9Sprite]", "contents": "setOpacityModifyRGB(${1:bool:#bool})" },{ "trigger": "s_setOpacity(char char:#unsigned):void [Scale9Sprite]", "contents": "setOpacity(${1:char char:#unsigned})" },{ "trigger": "s_updateDisplayedOpacity(char char:#unsigned):void [Scale9Sprite]", "contents": "updateDisplayedOpacity(${1:char char:#unsigned})" },{ "trigger": "s_updateDisplayedColor(color3b:#color3b_table):void [Scale9Sprite]", "contents": "updateDisplayedColor(${1:color3b:#color3b_table})" },{ "trigger": "s_setContentSize(size:#size_table):void [Scale9Sprite]", "contents": "setContentSize(${1:size:#size_table})" },{ "trigger": "s_Scale9Sprite():void [Scale9Sprite]", "contents": "Scale9Sprite()" },{ "trigger": "s_create():ret (return value: cc.CCBProxy):#CCBProxy [CCBProxy]", "contents": "create()" },{ "trigger": "s_createCCBReader():ret (return value: cc.CCBReader):#CCBReader [CCBProxy]", "contents": "createCCBReader()" },{ "trigger": "s_readCCBFromFile(path:#string,reader:#cc.CCBReader,owner:#bool):ret (return value: cc.Node):#Node [CCBProxy]", "contents": "readCCBFromFile(${1:path:#string},${2:reader:#cc.CCBReader},${3:owner:#bool})" },{ "trigger": "s_getNodeTypeName(node:#cc.Node):ret (return value: cc.Node):#string [CCBProxy]", "contents": "getNodeTypeName(${1:node:#cc.Node})" },{ "trigger": "s_setCallback(node:#cc.Node,handler:#int,events:#int):void [CCBProxy]", "contents": "setCallback(${1:node:#cc.Node},${2:handler:#int},${3:events:#int})" },{ "trigger": "LoadingBarTypem_LEFT [LoadingBarDirection]", "contents": "LoadingBarType.LEFT" },{ "trigger": "LoadingBarTypem_RIGHT [LoadingBarDirection]", "contents": "LoadingBarType.RIGHT" },{ "trigger": "f_callStaticMethod(className:#string,methodName:#string,args:#table):ret (return value: int):#int [LuaObjcBridge]", "contents": "callStaticMethod(${1:className:#string},${2:methodName:#string},${3:args:#table})" },{ "trigger": "s_pauseEventListenersForTarget(node:#cc.Node,bool:#bool):void [EventDispatcher]", "contents": "pauseEventListenersForTarget(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "s_addEventListenerWithSceneGraphPriority(eventlistener:#cc.EventListener,node:#cc.Node):void [EventDispatcher]", "contents": "addEventListenerWithSceneGraphPriority(${1:eventlistener:#cc.EventListener},${2:node:#cc.Node})" },{ "trigger": "s_setEnabled(bool:#bool):void [EventDispatcher]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_addEventListenerWithFixedPriority(eventlistener:#cc.EventListener,int:#int):void [EventDispatcher]", "contents": "addEventListenerWithFixedPriority(${1:eventlistener:#cc.EventListener},${2:int:#int})" },{ "trigger": "s_removeEventListener(eventlistener:#cc.EventListener):void [EventDispatcher]", "contents": "removeEventListener(${1:eventlistener:#cc.EventListener})" },{ "trigger": "s_resumeEventListenersForTarget(node:#cc.Node,bool:#bool):void [EventDispatcher]", "contents": "resumeEventListenersForTarget(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "s_removeEventListenersForTarget(node:#cc.Node,bool:#bool):void [EventDispatcher]", "contents": "removeEventListenersForTarget(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "s_setPriority(eventlistener:#cc.EventListener,int:#int):void [EventDispatcher]", "contents": "setPriority(${1:eventlistener:#cc.EventListener},${2:int:#int})" },{ "trigger": "s_addCustomEventListener(str:#string,func:#function):ret (return value: cc.EventListenerCustom):#EventListenerCustom [EventDispatcher]", "contents": "addCustomEventListener(${1:str:#string},${2:func:#function})" },{ "trigger": "s_dispatchEvent(event:#cc.Event):void [EventDispatcher]", "contents": "dispatchEvent(${1:event:#cc.Event})" },{ "trigger": "s_removeAllEventListeners():void [EventDispatcher]", "contents": "removeAllEventListeners()" },{ "trigger": "s_removeCustomEventListeners(str:#string):void [EventDispatcher]", "contents": "removeCustomEventListeners(${1:str:#string})" },{ "trigger": "s_isEnabled():ret (return value: bool):#bool [EventDispatcher]", "contents": "isEnabled()" },{ "trigger": "s_removeEventListenersForType(type:#cc.EventListener::Type):void [EventDispatcher]", "contents": "removeEventListenersForType(${1:type:#cc.EventListener::Type})" },{ "trigger": "s_EventDispatcher():void [EventDispatcher]", "contents": "EventDispatcher()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseQuarticActionIn):#EaseQuarticActionIn [EaseQuarticActionIn]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseQuarticActionIn):#EaseQuarticActionIn [EaseQuarticActionIn]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseQuarticActionIn]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseQuarticActionIn):#EaseQuarticActionIn [EaseQuarticActionIn]", "contents": "reverse()" },{ "trigger": "s_isPushed():ret (return value: bool):#bool [ControlButton]", "contents": "isPushed()" },{ "trigger": "s_setSelected(bool:#bool):void [ControlButton]", "contents": "setSelected(${1:bool:#bool})" },{ "trigger": "s_setTitleLabelForState(node:#cc.Node,state:#cc.Control::State):void [ControlButton]", "contents": "setTitleLabelForState(${1:node:#cc.Node},${2:state:#cc.Control::State})" },{ "trigger": "s_setAdjustBackgroundImage(bool:#bool):void [ControlButton]", "contents": "setAdjustBackgroundImage(${1:bool:#bool})" },{ "trigger": "s_setHighlighted(bool:#bool):void [ControlButton]", "contents": "setHighlighted(${1:bool:#bool})" },{ "trigger": "s_setZoomOnTouchDown(bool:#bool):void [ControlButton]", "contents": "setZoomOnTouchDown(${1:bool:#bool})" },{ "trigger": "s_setTitleForState(str:#string,state:#cc.Control::State):void [ControlButton]", "contents": "setTitleForState(${1:str:#string},${2:state:#cc.Control::State})" },{ "trigger": "s_setLabelAnchorPoint(vec2:#cc.Vec2):void [ControlButton]", "contents": "setLabelAnchorPoint(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getLabelAnchorPoint():ret (return value: cc.Vec2):#Vec2 [ControlButton]", "contents": "getLabelAnchorPoint()" },{ "trigger": "s_getTitleTTFSizeForState(state:#cc.Control::State):ret (return value: float):#float [ControlButton]", "contents": "getTitleTTFSizeForState(${1:state:#cc.Control::State})" },{ "trigger": "s_setTitleTTFForState(str:#string,state:#cc.Control::State):void [ControlButton]", "contents": "setTitleTTFForState(${1:str:#string},${2:state:#cc.Control::State})" },{ "trigger": "s_setTitleTTFSizeForState(float:#float,state:#cc.Control::State):void [ControlButton]", "contents": "setTitleTTFSizeForState(${1:float:#float},${2:state:#cc.Control::State})" },{ "trigger": "s_setTitleLabel(node:#cc.Node):void [ControlButton]", "contents": "setTitleLabel(${1:node:#cc.Node})" },{ "trigger": "s_setPreferredSize(size:#size_table):void [ControlButton]", "contents": "setPreferredSize(${1:size:#size_table})" },{ "trigger": "s_getCurrentTitleColor():ret (return value: color3b_table):#color3b_table [ControlButton]", "contents": "getCurrentTitleColor()" },{ "trigger": "s_setEnabled(bool:#bool):void [ControlButton]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_getBackgroundSpriteForState(state:#cc.Control::State):ret (return value: cc.Scale9Sprite):#Scale9Sprite [ControlButton]", "contents": "getBackgroundSpriteForState(${1:state:#cc.Control::State})" },{ "trigger": "s_getHorizontalOrigin():ret (return value: int):#int [ControlButton]", "contents": "getHorizontalOrigin()" },{ "trigger": "s_needsLayout():void [ControlButton]", "contents": "needsLayout()" },{ "trigger": "f_getCurrentTitle():ret (retunr value: string):#string [ControlButton]", "contents": "getCurrentTitle(${1:})" },{ "trigger": "f_getCurrentTitle():ret (retunr value: string):#string [ControlButton]", "contents": "getCurrentTitle(${1:})" },{ "trigger": "s_getCurrentTitle():ret (retunr value: string):#string [ControlButton]", "contents": "getCurrentTitle()" },{ "trigger": "s_getScaleRatio():ret (return value: float):#float [ControlButton]", "contents": "getScaleRatio()" },{ "trigger": "s_getTitleTTFForState(state:#cc.Control::State):ret (return value: string):#string [ControlButton]", "contents": "getTitleTTFForState(${1:state:#cc.Control::State})" },{ "trigger": "s_getBackgroundSprite():ret (return value: cc.Scale9Sprite):#Scale9Sprite [ControlButton]", "contents": "getBackgroundSprite()" },{ "trigger": "s_getTitleColorForState(state:#cc.Control::State):ret (return value: color3b_table):#color3b_table [ControlButton]", "contents": "getTitleColorForState(${1:state:#cc.Control::State})" },{ "trigger": "s_setTitleColorForState(color3b:#color3b_table,state:#cc.Control::State):void [ControlButton]", "contents": "setTitleColorForState(${1:color3b:#color3b_table},${2:state:#cc.Control::State})" },{ "trigger": "s_doesAdjustBackgroundImage():ret (return value: bool):#bool [ControlButton]", "contents": "doesAdjustBackgroundImage()" },{ "trigger": "s_setBackgroundSpriteFrameForState(spriteframe:#cc.SpriteFrame,state:#cc.Control::State):void [ControlButton]", "contents": "setBackgroundSpriteFrameForState(${1:spriteframe:#cc.SpriteFrame},${2:state:#cc.Control::State})" },{ "trigger": "s_setBackgroundSpriteForState(scale9sprite:#cc.Scale9Sprite,state:#cc.Control::State):void [ControlButton]", "contents": "setBackgroundSpriteForState(${1:scale9sprite:#cc.Scale9Sprite},${2:state:#cc.Control::State})" },{ "trigger": "s_setScaleRatio(float:#float):void [ControlButton]", "contents": "setScaleRatio(${1:float:#float})" },{ "trigger": "s_setBackgroundSprite(scale9sprite:#cc.Scale9Sprite):void [ControlButton]", "contents": "setBackgroundSprite(${1:scale9sprite:#cc.Scale9Sprite})" },{ "trigger": "s_getTitleLabel():ret (return value: cc.Node):#Node [ControlButton]", "contents": "getTitleLabel()" },{ "trigger": "s_getPreferredSize():ret (return value: size_table):#size_table [ControlButton]", "contents": "getPreferredSize()" },{ "trigger": "s_getVerticalMargin():ret (return value: int):#int [ControlButton]", "contents": "getVerticalMargin()" },{ "trigger": "s_getTitleLabelForState(state:#cc.Control::State):ret (return value: cc.Node):#Node [ControlButton]", "contents": "getTitleLabelForState(${1:state:#cc.Control::State})" },{ "trigger": "s_setMargins(int:#int,int:#int):void [ControlButton]", "contents": "setMargins(${1:int:#int},${2:int:#int})" },{ "trigger": "s_setTitleBMFontForState(str:#string,state:#cc.Control::State):void [ControlButton]", "contents": "setTitleBMFontForState(${1:str:#string},${2:state:#cc.Control::State})" },{ "trigger": "s_getTitleBMFontForState(state:#cc.Control::State):ret (return value: string):#string [ControlButton]", "contents": "getTitleBMFontForState(${1:state:#cc.Control::State})" },{ "trigger": "s_getZoomOnTouchDown():ret (return value: bool):#bool [ControlButton]", "contents": "getZoomOnTouchDown()" },{ "trigger": "s_getTitleForState(state:#cc.Control::State):ret (return value: string):#string [ControlButton]", "contents": "getTitleForState(${1:state:#cc.Control::State})" },{ "trigger": "f_create(cc.Scale9Sprite):ret (retunr value: cc.ControlButton):#ControlButton [ControlButton]", "contents": "create(${1:cc.Scale9Sprite})" },{ "trigger": "f_create():ret (retunr value: cc.ControlButton):#ControlButton [ControlButton]", "contents": "create(${1:})" },{ "trigger": "f_create(cc.Node, cc.Scale9Sprite):ret (retunr value: cc.ControlButton):#ControlButton [ControlButton]", "contents": "create(${1:cc.Node},${2: cc.Scale9Sprite})" },{ "trigger": "f_create(string, string, float):ret (retunr value: cc.ControlButton):#ControlButton [ControlButton]", "contents": "create(${1:string},${2: string},${3: float})" },{ "trigger": "s_create(str:#string,str:#string,float:#float):ret (retunr value: cc.ControlButton):#ControlButton [ControlButton]", "contents": "create(${1:str:#string},${2:str:#string},${3:float:#float})" },{ "trigger": "s_onTouchMoved(touch:#cc.Touch,event:#cc.Event):void [ControlButton]", "contents": "onTouchMoved(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_onTouchEnded(touch:#cc.Touch,event:#cc.Event):void [ControlButton]", "contents": "onTouchEnded(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_setColor(color3b:#color3b_table):void [ControlButton]", "contents": "setColor(${1:color3b:#color3b_table})" },{ "trigger": "s_onTouchCancelled(touch:#cc.Touch,event:#cc.Event):void [ControlButton]", "contents": "onTouchCancelled(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_setOpacity(char char:#unsigned):void [ControlButton]", "contents": "setOpacity(${1:char char:#unsigned})" },{ "trigger": "s_updateDisplayedOpacity(char char:#unsigned):void [ControlButton]", "contents": "updateDisplayedOpacity(${1:char char:#unsigned})" },{ "trigger": "s_updateDisplayedColor(color3b:#color3b_table):void [ControlButton]", "contents": "updateDisplayedColor(${1:color3b:#color3b_table})" },{ "trigger": "s_onTouchBegan(touch:#cc.Touch,event:#cc.Event):ret (return value: bool):#bool [ControlButton]", "contents": "onTouchBegan(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_setReverseAction(fadeto:#cc.FadeTo):void [FadeIn]", "contents": "setReverseAction(${1:fadeto:#cc.FadeTo})" },{ "trigger": "s_create(float:#float):ret (return value: cc.FadeIn):#FadeIn [FadeIn]", "contents": "create(${1:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [FadeIn]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.FadeIn):#FadeIn [FadeIn]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.FadeTo):#FadeTo [FadeIn]", "contents": "reverse()" },{ "trigger": "s_setToSetupPose():void [Skeleton]", "contents": "setToSetupPose()" },{ "trigger": "s_setBlendFunc(blendfunc:#cc.BlendFunc):void [Skeleton]", "contents": "setBlendFunc(${1:blendfunc:#cc.BlendFunc})" },{ "trigger": "s_onDraw(mat4:#cc.Mat4,bool:#bool):void [Skeleton]", "contents": "onDraw(${1:mat4:#cc.Mat4},${2:bool:#bool})" },{ "trigger": "s_setSlotsToSetupPose():void [Skeleton]", "contents": "setSlotsToSetupPose()" },{ "trigger": "s_getBlendFunc():ret (return value: cc.BlendFunc):#BlendFunc [Skeleton]", "contents": "getBlendFunc()" },{ "trigger": "s_setSkin(char:#char):ret (return value: bool):#bool [Skeleton]", "contents": "setSkin(${1:char:#char})" },{ "trigger": "s_setBonesToSetupPose():void [Skeleton]", "contents": "setBonesToSetupPose()" },{ "trigger": "s_getBoundingBox():ret (return value: rect_table):#rect_table [Skeleton]", "contents": "getBoundingBox()" },{ "trigger": "s_onEnter():void [Skeleton]", "contents": "onEnter()" },{ "trigger": "s_onExit():void [Skeleton]", "contents": "onExit()" },{ "trigger": "s_addOwnerOutletName(str:#string):void [CCBReader]", "contents": "addOwnerOutletName(${1:str:#string})" },{ "trigger": "s_getOwnerCallbackNames():ret (return value: array_table):#array_table [CCBReader]", "contents": "getOwnerCallbackNames()" },{ "trigger": "s_addDocumentCallbackControlEvents(eventtype:#cc.Control::EventType):void [CCBReader]", "contents": "addDocumentCallbackControlEvents(${1:eventtype:#cc.Control::EventType})" },{ "trigger": "s_setCCBRootPath(char:#char):void [CCBReader]", "contents": "setCCBRootPath(${1:char:#char})" },{ "trigger": "s_addOwnerOutletNode(node:#cc.Node):void [CCBReader]", "contents": "addOwnerOutletNode(${1:node:#cc.Node})" },{ "trigger": "s_getOwnerCallbackNodes():ret (return value: array_table):#array_table [CCBReader]", "contents": "getOwnerCallbackNodes()" },{ "trigger": "s_readSoundKeyframesForSeq(ccbsequence:#cc.CCBSequence):ret (return value: bool):#bool [CCBReader]", "contents": "readSoundKeyframesForSeq(${1:ccbsequence:#cc.CCBSequence})" },{ "trigger": "s_getCCBRootPath():ret (return value: string):#string [CCBReader]", "contents": "getCCBRootPath()" },{ "trigger": "s_getOwnerCallbackControlEvents():ret (return value: array_table):#array_table [CCBReader]", "contents": "getOwnerCallbackControlEvents()" },{ "trigger": "s_getOwnerOutletNodes():ret (return value: array_table):#array_table [CCBReader]", "contents": "getOwnerOutletNodes()" },{ "trigger": "s_readUTF8():ret (return value: string):#string [CCBReader]", "contents": "readUTF8()" },{ "trigger": "s_addOwnerCallbackControlEvents(eventtype:#cc.Control::EventType):void [CCBReader]", "contents": "addOwnerCallbackControlEvents(${1:eventtype:#cc.Control::EventType})" },{ "trigger": "s_getOwnerOutletNames():ret (return value: array_table):#array_table [CCBReader]", "contents": "getOwnerOutletNames()" },{ "trigger": "s_setAnimationManager(ccbanimationmanager:#cc.CCBAnimationManager):void [CCBReader]", "contents": "setAnimationManager(${1:ccbanimationmanager:#cc.CCBAnimationManager})" },{ "trigger": "s_readCallbackKeyframesForSeq(ccbsequence:#cc.CCBSequence):ret (return value: bool):#bool [CCBReader]", "contents": "readCallbackKeyframesForSeq(${1:ccbsequence:#cc.CCBSequence})" },{ "trigger": "s_getAnimationManagersForNodes():ret (return value: array_table):#array_table [CCBReader]", "contents": "getAnimationManagersForNodes()" },{ "trigger": "s_getNodesWithAnimationManagers():ret (return value: array_table):#array_table [CCBReader]", "contents": "getNodesWithAnimationManagers()" },{ "trigger": "s_getAnimationManager():ret (return value: cc.CCBAnimationManager):#CCBAnimationManager [CCBReader]", "contents": "getAnimationManager()" },{ "trigger": "s_setResolutionScale(float:#float):void [CCBReader]", "contents": "setResolutionScale(${1:float:#float})" },{ "trigger": "f_CCBReader(cc.CCBReader):void [CCBReader]", "contents": "CCBReader(${1:cc.CCBReader})" },{ "trigger": "f_CCBReader(cc.NodeLoaderLibrary, cc.CCBMemberVariableAssigner, cc.CCBSelectorResolver, cc.NodeLoaderListener):void [CCBReader]", "contents": "CCBReader(${1:cc.NodeLoaderLibrary},${2: cc.CCBMemberVariableAssigner},${3: cc.CCBSelectorResolver},${4: cc.NodeLoaderListener})" },{ "trigger": "f_CCBReader():void [CCBReader]", "contents": "CCBReader(${1:})" },{ "trigger": "s_CCBReader(nodeloaderlibrary:#cc.NodeLoaderLibrary,ccbmembervariableassigner:#cc.CCBMemberVariableAssigner,ccbselectorresolver:#cc.CCBSelectorResolver,nodeloaderlistener:#cc.NodeLoaderListener):void [CCBReader]", "contents": "CCBReader(${1:nodeloaderlibrary:#cc.NodeLoaderLibrary},${2:ccbmembervariableassigner:#cc.CCBMemberVariableAssigner},${3:ccbselectorresolver:#cc.CCBSelectorResolver},${4:nodeloaderlistener:#cc.NodeLoaderListener})" },{ "trigger": "f_sendTriggerEvent(event:#int):void [ccs]", "contents": "sendTriggerEvent(${1:event:#int})" },{ "trigger": "f_registerTriggerClass(className:#string,createFunc:#function):void [ccs]", "contents": "registerTriggerClass(${1:className:#string},${2:createFunc:#function})" },{ "trigger": "ccsm_ActionObject [ccs]", "contents": "ccs.ActionObject" },{ "trigger": "ccsm_ActionManagerEx [ccs]", "contents": "ccs.ActionManagerEx" },{ "trigger": "ccsm_BaseData [ccs]", "contents": "ccs.BaseData" },{ "trigger": "ccsm_DisplayData [ccs]", "contents": "ccs.DisplayData" },{ "trigger": "ccsm_SpriteDisplayData [ccs]", "contents": "ccs.SpriteDisplayData" },{ "trigger": "ccsm_ArmatureDisplayData [ccs]", "contents": "ccs.ArmatureDisplayData" },{ "trigger": "ccsm_ParticleDisplayData [ccs]", "contents": "ccs.ParticleDisplayData" },{ "trigger": "ccsm_BoneData [ccs]", "contents": "ccs.BoneData" },{ "trigger": "ccsm_ArmatureData [ccs]", "contents": "ccs.ArmatureData" },{ "trigger": "ccsm_FrameData [ccs]", "contents": "ccs.FrameData" },{ "trigger": "ccsm_MovementBoneData [ccs]", "contents": "ccs.MovementBoneData" },{ "trigger": "ccsm_MovementData [ccs]", "contents": "ccs.MovementData" },{ "trigger": "ccsm_AnimationData [ccs]", "contents": "ccs.AnimationData" },{ "trigger": "ccsm_ContourData [ccs]", "contents": "ccs.ContourData" },{ "trigger": "ccsm_TextureData [ccs]", "contents": "ccs.TextureData" },{ "trigger": "ccsm_Tween [ccs]", "contents": "ccs.Tween" },{ "trigger": "ccsm_DisplayManager [ccs]", "contents": "ccs.DisplayManager" },{ "trigger": "ccsm_Bone [ccs]", "contents": "ccs.Bone" },{ "trigger": "ccsm_BatchNode [ccs]", "contents": "ccs.BatchNode" },{ "trigger": "ccsm_ArmatureAnimation [ccs]", "contents": "ccs.ArmatureAnimation" },{ "trigger": "ccsm_ArmatureDataManager [ccs]", "contents": "ccs.ArmatureDataManager" },{ "trigger": "ccsm_Armature [ccs]", "contents": "ccs.Armature" },{ "trigger": "ccsm_Skin [ccs]", "contents": "ccs.Skin" },{ "trigger": "ccsm_ComAttribute [ccs]", "contents": "ccs.ComAttribute" },{ "trigger": "ccsm_ComAudio [ccs]", "contents": "ccs.ComAudio" },{ "trigger": "ccsm_ComController [ccs]", "contents": "ccs.ComController" },{ "trigger": "ccsm_ComRender [ccs]", "contents": "ccs.ComRender" },{ "trigger": "ccsm_GUIReader [ccs]", "contents": "ccs.GUIReader" },{ "trigger": "ccsm_SceneReader [ccs]", "contents": "ccs.SceneReader" },{ "trigger": "ccsm_MovementEventType [ccs]", "contents": "ccs.MovementEventType" },{ "trigger": "ccsm_TInfo [ccs]", "contents": "ccs.TInfo" },{ "trigger": "ccsm_ObjectFactory [ccs]", "contents": "ccs.ObjectFactory" },{ "trigger": "ccsm_TriggerObj [ccs]", "contents": "ccs.TriggerObj" },{ "trigger": "ccsm_TriggerMng [ccs]", "contents": "ccs.TriggerMng" },{ "trigger": "s_isStopped():ret (return value: bool):#bool [Event]", "contents": "isStopped()" },{ "trigger": "s_getType():ret (return value: cc.Event::Type):#Event::Type [Event]", "contents": "getType()" },{ "trigger": "s_getCurrentTarget():ret (return value: cc.Node):#Node [Event]", "contents": "getCurrentTarget()" },{ "trigger": "s_stopPropagation():void [Event]", "contents": "stopPropagation()" },{ "trigger": "s_getPointsCount():ret (return value: int):#int [PhysicsShapePolygon]", "contents": "getPointsCount()" },{ "trigger": "s_getPoint(int:#int):ret (return value: cc.Vec2):#Vec2 [PhysicsShapePolygon]", "contents": "getPoint(${1:int:#int})" },{ "trigger": "s_calculateDefaultMoment():ret (return value: float):#float [PhysicsShapePolygon]", "contents": "calculateDefaultMoment()" },{ "trigger": "s_getCenter():ret (return value: cc.Vec2):#Vec2 [PhysicsShapePolygon]", "contents": "getCenter()" },{ "trigger": "s_setAnchr2(vec2:#cc.Vec2):void [PhysicsJointLimit]", "contents": "setAnchr2(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setAnchr1(vec2:#cc.Vec2):void [PhysicsJointLimit]", "contents": "setAnchr1(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setMax(float:#float):void [PhysicsJointLimit]", "contents": "setMax(${1:float:#float})" },{ "trigger": "s_getAnchr2():ret (return value: cc.Vec2):#Vec2 [PhysicsJointLimit]", "contents": "getAnchr2()" },{ "trigger": "s_getAnchr1():ret (return value: cc.Vec2):#Vec2 [PhysicsJointLimit]", "contents": "getAnchr1()" },{ "trigger": "s_getMin():ret (return value: float):#float [PhysicsJointLimit]", "contents": "getMin()" },{ "trigger": "s_getMax():ret (return value: float):#float [PhysicsJointLimit]", "contents": "getMax()" },{ "trigger": "s_setMin(float:#float):void [PhysicsJointLimit]", "contents": "setMin(${1:float:#float})" },{ "trigger": "f_construct(cc.PhysicsBody, cc.PhysicsBody, cc.Vec2, cc.Vec2, float, float):ret (retunr value: cc.PhysicsJointLimit):#PhysicsJointLimit [PhysicsJointLimit]", "contents": "construct(${1:cc.PhysicsBody},${2: cc.PhysicsBody},${3: cc.Vec2},${4: cc.Vec2},${5: float},${6: float})" },{ "trigger": "f_construct(cc.PhysicsBody, cc.PhysicsBody, cc.Vec2, cc.Vec2):ret (retunr value: cc.PhysicsJointLimit):#PhysicsJointLimit [PhysicsJointLimit]", "contents": "construct(${1:cc.PhysicsBody},${2: cc.PhysicsBody},${3: cc.Vec2},${4: cc.Vec2})" },{ "trigger": "s_construct(physicsbody:#cc.PhysicsBody,physicsbody:#cc.PhysicsBody,vec2:#cc.Vec2,vec2:#cc.Vec2,float:#float,float:#float):ret (retunr value: cc.PhysicsJointLimit):#PhysicsJointLimit [PhysicsJointLimit]", "contents": "construct(${1:physicsbody:#cc.PhysicsBody},${2:physicsbody:#cc.PhysicsBody},${3:vec2:#cc.Vec2},${4:vec2:#cc.Vec2},${5:float:#float},${6:float:#float})" },{ "trigger": "s_setPreviousLocation(vec2:#cc.Vec2):void [ControlPotentiometer]", "contents": "setPreviousLocation(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setValue(float:#float):void [ControlPotentiometer]", "contents": "setValue(${1:float:#float})" },{ "trigger": "s_getProgressTimer():ret (return value: cc.ProgressTimer):#ProgressTimer [ControlPotentiometer]", "contents": "getProgressTimer()" },{ "trigger": "s_getMaximumValue():ret (return value: float):#float [ControlPotentiometer]", "contents": "getMaximumValue()" },{ "trigger": "s_angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(vec2:#cc.Vec2,vec2:#cc.Vec2,vec2:#cc.Vec2,vec2:#cc.Vec2):ret (return value: float):#float [ControlPotentiometer]", "contents": "angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(${1:vec2:#cc.Vec2},${2:vec2:#cc.Vec2},${3:vec2:#cc.Vec2},${4:vec2:#cc.Vec2})" },{ "trigger": "s_potentiometerBegan(vec2:#cc.Vec2):void [ControlPotentiometer]", "contents": "potentiometerBegan(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setMaximumValue(float:#float):void [ControlPotentiometer]", "contents": "setMaximumValue(${1:float:#float})" },{ "trigger": "s_getMinimumValue():ret (return value: float):#float [ControlPotentiometer]", "contents": "getMinimumValue()" },{ "trigger": "s_setThumbSprite(sprite:#cc.Sprite):void [ControlPotentiometer]", "contents": "setThumbSprite(${1:sprite:#cc.Sprite})" },{ "trigger": "s_getValue():ret (return value: float):#float [ControlPotentiometer]", "contents": "getValue()" },{ "trigger": "s_getPreviousLocation():ret (return value: cc.Vec2):#Vec2 [ControlPotentiometer]", "contents": "getPreviousLocation()" },{ "trigger": "s_distanceBetweenPointAndPoint(vec2:#cc.Vec2,vec2:#cc.Vec2):ret (return value: float):#float [ControlPotentiometer]", "contents": "distanceBetweenPointAndPoint(${1:vec2:#cc.Vec2},${2:vec2:#cc.Vec2})" },{ "trigger": "s_potentiometerEnded(vec2:#cc.Vec2):void [ControlPotentiometer]", "contents": "potentiometerEnded(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setProgressTimer(progresstimer:#cc.ProgressTimer):void [ControlPotentiometer]", "contents": "setProgressTimer(${1:progresstimer:#cc.ProgressTimer})" },{ "trigger": "s_setMinimumValue(float:#float):void [ControlPotentiometer]", "contents": "setMinimumValue(${1:float:#float})" },{ "trigger": "s_getThumbSprite():ret (return value: cc.Sprite):#Sprite [ControlPotentiometer]", "contents": "getThumbSprite()" },{ "trigger": "s_initWithTrackSprite_ProgressTimer_ThumbSprite(sprite:#cc.Sprite,progresstimer:#cc.ProgressTimer,sprite:#cc.Sprite):ret (return value: bool):#bool [ControlPotentiometer]", "contents": "initWithTrackSprite_ProgressTimer_ThumbSprite(${1:sprite:#cc.Sprite},${2:progresstimer:#cc.ProgressTimer},${3:sprite:#cc.Sprite})" },{ "trigger": "s_potentiometerMoved(vec2:#cc.Vec2):void [ControlPotentiometer]", "contents": "potentiometerMoved(${1:vec2:#cc.Vec2})" },{ "trigger": "s_create(char:#char,char:#char,char:#char):ret (return value: cc.ControlPotentiometer):#ControlPotentiometer [ControlPotentiometer]", "contents": "create(${1:char:#char},${2:char:#char},${3:char:#char})" },{ "trigger": "s_isTouchInside(touch:#cc.Touch):ret (return value: bool):#bool [ControlPotentiometer]", "contents": "isTouchInside(${1:touch:#cc.Touch})" },{ "trigger": "s_setEnabled(bool:#bool):void [ControlPotentiometer]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_onTouchMoved(touch:#cc.Touch,event:#cc.Event):void [ControlPotentiometer]", "contents": "onTouchMoved(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_onTouchEnded(touch:#cc.Touch,event:#cc.Event):void [ControlPotentiometer]", "contents": "onTouchEnded(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_onTouchBegan(touch:#cc.Touch,event:#cc.Event):ret (return value: bool):#bool [ControlPotentiometer]", "contents": "onTouchBegan(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_ControlPotentiometer():void [ControlPotentiometer]", "contents": "ControlPotentiometer()" },{ "trigger": "s_create(float:#float,char char:#unsigned):ret (return value: cc.FadeTo):#FadeTo [FadeTo]", "contents": "create(${1:float:#float},${2:char char:#unsigned})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [FadeTo]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.FadeTo):#FadeTo [FadeTo]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.FadeTo):#FadeTo [FadeTo]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [FadeTo]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getGravity():ret (return value: cc.Vec2):#Vec2 [PhysicsWorld]", "contents": "getGravity()" },{ "trigger": "s_getAllBodies():ret (return value: array_table):#array_table [PhysicsWorld]", "contents": "getAllBodies()" },{ "trigger": "s_setGravity(vec2:#cc.Vec2):void [PhysicsWorld]", "contents": "setGravity(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getSpeed():ret (return value: float):#float [PhysicsWorld]", "contents": "getSpeed()" },{ "trigger": "f_removeBody(int):void [PhysicsWorld]", "contents": "removeBody(${1:int})" },{ "trigger": "f_removeBody(cc.PhysicsBody):void [PhysicsWorld]", "contents": "removeBody(${1:cc.PhysicsBody})" },{ "trigger": "s_removeBody(physicsbody:#cc.PhysicsBody):void [PhysicsWorld]", "contents": "removeBody(${1:physicsbody:#cc.PhysicsBody})" },{ "trigger": "s_removeJoint(physicsjoint:#cc.PhysicsJoint,bool:#bool):void [PhysicsWorld]", "contents": "removeJoint(${1:physicsjoint:#cc.PhysicsJoint},${2:bool:#bool})" },{ "trigger": "s_getUpdateRate():ret (return value: int):#int [PhysicsWorld]", "contents": "getUpdateRate()" },{ "trigger": "s_setSpeed(float:#float):void [PhysicsWorld]", "contents": "setSpeed(${1:float:#float})" },{ "trigger": "s_getShapes(vec2:#cc.Vec2):ret (return value: array_table):#array_table [PhysicsWorld]", "contents": "getShapes(${1:vec2:#cc.Vec2})" },{ "trigger": "s_removeAllJoints():void [PhysicsWorld]", "contents": "removeAllJoints()" },{ "trigger": "s_getShape(vec2:#cc.Vec2):ret (return value: cc.PhysicsShape):#PhysicsShape [PhysicsWorld]", "contents": "getShape(${1:vec2:#cc.Vec2})" },{ "trigger": "s_removeAllBodies():void [PhysicsWorld]", "contents": "removeAllBodies()" },{ "trigger": "s_getDebugDrawMask():ret (return value: int):#int [PhysicsWorld]", "contents": "getDebugDrawMask()" },{ "trigger": "s_setDebugDrawMask(int:#int):void [PhysicsWorld]", "contents": "setDebugDrawMask(${1:int:#int})" },{ "trigger": "s_getBody(int:#int):ret (return value: cc.PhysicsBody):#PhysicsBody [PhysicsWorld]", "contents": "getBody(${1:int:#int})" },{ "trigger": "s_setUpdateRate(int:#int):void [PhysicsWorld]", "contents": "setUpdateRate(${1:int:#int})" },{ "trigger": "s_addJoint(physicsjoint:#cc.PhysicsJoint):void [PhysicsWorld]", "contents": "addJoint(${1:physicsjoint:#cc.PhysicsJoint})" },{ "trigger": "s_create():ret (return value: cc.ParticleSun):#ParticleSun [ParticleSun]", "contents": "create()" },{ "trigger": "s_createWithTotalParticles(int:#int):ret (return value: cc.ParticleSun):#ParticleSun [ParticleSun]", "contents": "createWithTotalParticles(${1:int:#int})" },{ "trigger": "s_getAngle():ret (return value: float):#float [PhysicsJointRatchet]", "contents": "getAngle()" },{ "trigger": "s_setAngle(float:#float):void [PhysicsJointRatchet]", "contents": "setAngle(${1:float:#float})" },{ "trigger": "s_setPhase(float:#float):void [PhysicsJointRatchet]", "contents": "setPhase(${1:float:#float})" },{ "trigger": "s_getPhase():ret (return value: float):#float [PhysicsJointRatchet]", "contents": "getPhase()" },{ "trigger": "s_setRatchet(float:#float):void [PhysicsJointRatchet]", "contents": "setRatchet(${1:float:#float})" },{ "trigger": "s_getRatchet():ret (return value: float):#float [PhysicsJointRatchet]", "contents": "getRatchet()" },{ "trigger": "s_construct(physicsbody:#cc.PhysicsBody,physicsbody:#cc.PhysicsBody,float:#float,float:#float):ret (return value: cc.PhysicsJointRatchet):#PhysicsJointRatchet [PhysicsJointRatchet]", "contents": "construct(${1:physicsbody:#cc.PhysicsBody},${2:physicsbody:#cc.PhysicsBody},${3:float:#float},${4:float:#float})" },{ "trigger": "s_isClipMarginEnabled():ret (return value: bool):#bool [Label]", "contents": "isClipMarginEnabled()" },{ "trigger": "s_enableShadow():void [Label]", "contents": "enableShadow()" },{ "trigger": "s_setDimensions(int int:#unsigned,int int:#unsigned):void [Label]", "contents": "setDimensions(${1:int int:#unsigned},${2:int int:#unsigned})" },{ "trigger": "s_getString():ret (return value: string):#string [Label]", "contents": "getString()" },{ "trigger": "s_getHeight():unsigned [Label]", "contents": "getHeight()" },{ "trigger": "s_disableEffect():void [Label]", "contents": "disableEffect()" },{ "trigger": "s_setTTFConfig(_ttfconfig:#cc._ttfConfig):ret (return value: bool):#bool [Label]", "contents": "setTTFConfig(${1:_ttfconfig:#cc._ttfConfig})" },{ "trigger": "s_getTextColor():ret (return value: color4b_table):#color4b_table [Label]", "contents": "getTextColor()" },{ "trigger": "s_getCommonLineHeight():ret (return value: int):#int [Label]", "contents": "getCommonLineHeight()" },{ "trigger": "s_setWidth(int int:#unsigned):void [Label]", "contents": "setWidth(${1:int int:#unsigned})" },{ "trigger": "s_getMaxLineWidth():unsigned [Label]", "contents": "getMaxLineWidth()" },{ "trigger": "s_getHorizontalAlignment():ret (return value: cc.TextHAlignment):#TextHAlignment [Label]", "contents": "getHorizontalAlignment()" },{ "trigger": "s_setClipMarginEnabled(bool:#bool):void [Label]", "contents": "setClipMarginEnabled(${1:bool:#bool})" },{ "trigger": "s_setString(str:#string):void [Label]", "contents": "setString(${1:str:#string})" },{ "trigger": "s_setSystemFontName(str:#string):void [Label]", "contents": "setSystemFontName(${1:str:#string})" },{ "trigger": "s_setBMFontFilePath(str:#string,vec2:#cc.Vec2):ret (return value: bool):#bool [Label]", "contents": "setBMFontFilePath(${1:str:#string},${2:vec2:#cc.Vec2})" },{ "trigger": "s_getFontAtlas():ret (return value: cc.FontAtlas):#FontAtlas [Label]", "contents": "getFontAtlas()" },{ "trigger": "s_setSystemFontSize(float:#float):void [Label]", "contents": "setSystemFontSize(${1:float:#float})" },{ "trigger": "s_updateContent():void [Label]", "contents": "updateContent()" },{ "trigger": "s_getStringLength():ret (return value: int):#int [Label]", "contents": "getStringLength()" },{ "trigger": "s_setLineBreakWithoutSpace(bool:#bool):void [Label]", "contents": "setLineBreakWithoutSpace(${1:bool:#bool})" },{ "trigger": "s_getStringNumLines():ret (return value: int):#int [Label]", "contents": "getStringNumLines()" },{ "trigger": "s_enableOutline(color4b:#color4b_table,int:#int):void [Label]", "contents": "enableOutline(${1:color4b:#color4b_table},${2:int:#int})" },{ "trigger": "f_setCharMap(cc.Texture2D, int, int, int):ret (retunr value: bool):#bool [Label]", "contents": "setCharMap(${1:cc.Texture2D},${2: int},${3: int},${4: int})" },{ "trigger": "f_setCharMap(string, int, int, int):ret (retunr value: bool):#bool [Label]", "contents": "setCharMap(${1:string},${2: int},${3: int},${4: int})" },{ "trigger": "f_setCharMap(string):ret (retunr value: bool):#bool [Label]", "contents": "setCharMap(${1:string})" },{ "trigger": "s_setCharMap(str:#string,int:#int,int:#int,int:#int):ret (retunr value: bool):#bool [Label]", "contents": "setCharMap(${1:str:#string},${2:int:#int},${3:int:#int},${4:int:#int})" },{ "trigger": "s_getDimensions():ret (return value: size_table):#size_table [Label]", "contents": "getDimensions()" },{ "trigger": "s_setMaxLineWidth(int int:#unsigned):void [Label]", "contents": "setMaxLineWidth(${1:int int:#unsigned})" },{ "trigger": "s_getSystemFontName():ret (return value: string):#string [Label]", "contents": "getSystemFontName()" },{ "trigger": "s_setVerticalAlignment(textvalignment:#cc.TextVAlignment):void [Label]", "contents": "setVerticalAlignment(${1:textvalignment:#cc.TextVAlignment})" },{ "trigger": "s_getTTFConfig():ret (return value: cc._ttfConfig):#_ttfConfig [Label]", "contents": "getTTFConfig()" },{ "trigger": "s_getVerticalAlignment():ret (return value: cc.TextVAlignment):#TextVAlignment [Label]", "contents": "getVerticalAlignment()" },{ "trigger": "s_setTextColor(color4b:#color4b_table):void [Label]", "contents": "setTextColor(${1:color4b:#color4b_table})" },{ "trigger": "s_setHeight(int int:#unsigned):void [Label]", "contents": "setHeight(${1:int int:#unsigned})" },{ "trigger": "s_getWidth():unsigned [Label]", "contents": "getWidth()" },{ "trigger": "s_enableGlow(color4b:#color4b_table):void [Label]", "contents": "enableGlow(${1:color4b:#color4b_table})" },{ "trigger": "s_getLetter(int:#int):ret (return value: cc.Sprite):#Sprite [Label]", "contents": "getLetter(${1:int:#int})" },{ "trigger": "s_getSystemFontSize():ret (return value: float):#float [Label]", "contents": "getSystemFontSize()" },{ "trigger": "s_getTextAlignment():ret (return value: cc.TextHAlignment):#TextHAlignment [Label]", "contents": "getTextAlignment()" },{ "trigger": "s_getBMFontFilePath():ret (return value: string):#string [Label]", "contents": "getBMFontFilePath()" },{ "trigger": "s_setHorizontalAlignment(texthalignment:#cc.TextHAlignment):void [Label]", "contents": "setHorizontalAlignment(${1:texthalignment:#cc.TextHAlignment})" },{ "trigger": "f_setAlignment(cc.TextHAlignment, cc.TextVAlignment):void [Label]", "contents": "setAlignment(${1:cc.TextHAlignment},${2: cc.TextVAlignment})" },{ "trigger": "f_setAlignment(cc.TextHAlignment):void [Label]", "contents": "setAlignment(${1:cc.TextHAlignment})" },{ "trigger": "s_setAlignment(texthalignment:#cc.TextHAlignment,textvalignment:#cc.TextVAlignment):void [Label]", "contents": "setAlignment(${1:texthalignment:#cc.TextHAlignment},${2:textvalignment:#cc.TextVAlignment})" },{ "trigger": "s_createWithBMFont(str:#string,str:#string,texthalignment:#cc.TextHAlignment,int:#int,vec2:#cc.Vec2):ret (return value: cc.Label):#Label [Label]", "contents": "createWithBMFont(${1:str:#string},${2:str:#string},${3:texthalignment:#cc.TextHAlignment},${4:int:#int},${5:vec2:#cc.Vec2})" },{ "trigger": "s_create():ret (return value: cc.Label):#Label [Label]", "contents": "create()" },{ "trigger": "f_createWithCharMap(cc.Texture2D, int, int, int):ret (retunr value: cc.Label):#Label [Label]", "contents": "createWithCharMap(${1:cc.Texture2D},${2: int},${3: int},${4: int})" },{ "trigger": "f_createWithCharMap(string, int, int, int):ret (retunr value: cc.Label):#Label [Label]", "contents": "createWithCharMap(${1:string},${2: int},${3: int},${4: int})" },{ "trigger": "f_createWithCharMap(string):ret (retunr value: cc.Label):#Label [Label]", "contents": "createWithCharMap(${1:string})" },{ "trigger": "s_createWithCharMap(str:#string,int:#int,int:#int,int:#int):ret (retunr value: cc.Label):#Label [Label]", "contents": "createWithCharMap(${1:str:#string},${2:int:#int},${3:int:#int},${4:int:#int})" },{ "trigger": "s_createWithSystemFont(str:#string,str:#string,float:#float,size:#size_table,texthalignment:#cc.TextHAlignment,textvalignment:#cc.TextVAlignment):ret (return value: cc.Label):#Label [Label]", "contents": "createWithSystemFont(${1:str:#string},${2:str:#string},${3:float:#float},${4:size:#size_table},${5:texthalignment:#cc.TextHAlignment},${6:textvalignment:#cc.TextVAlignment})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [Label]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_addChild(node:#cc.Node,int:#int,int:#int):void [Label]", "contents": "addChild(${1:node:#cc.Node},${2:int:#int},${3:int:#int})" },{ "trigger": "s_setScaleY(float:#float):void [Label]", "contents": "setScaleY(${1:float:#float})" },{ "trigger": "s_setScaleX(float:#float):void [Label]", "contents": "setScaleX(${1:float:#float})" },{ "trigger": "s_isOpacityModifyRGB():ret (return value: bool):#bool [Label]", "contents": "isOpacityModifyRGB()" },{ "trigger": "s_getScaleY():ret (return value: float):#float [Label]", "contents": "getScaleY()" },{ "trigger": "s_setBlendFunc(blendfunc:#cc.BlendFunc):void [Label]", "contents": "setBlendFunc(${1:blendfunc:#cc.BlendFunc})" },{ "trigger": "s_getScaleX():ret (return value: float):#float [Label]", "contents": "getScaleX()" },{ "trigger": "s_getDescription():ret (return value: string):#string [Label]", "contents": "getDescription()" },{ "trigger": "s_setOpacityModifyRGB(bool:#bool):void [Label]", "contents": "setOpacityModifyRGB(${1:bool:#bool})" },{ "trigger": "s_setScale(float:#float):void [Label]", "contents": "setScale(${1:float:#float})" },{ "trigger": "s_sortAllChildren():void [Label]", "contents": "sortAllChildren()" },{ "trigger": "s_updateDisplayedOpacity(char char:#unsigned):void [Label]", "contents": "updateDisplayedOpacity(${1:char char:#unsigned})" },{ "trigger": "s_getContentSize():ret (return value: size_table):#size_table [Label]", "contents": "getContentSize()" },{ "trigger": "s_getBoundingBox():ret (return value: rect_table):#rect_table [Label]", "contents": "getBoundingBox()" },{ "trigger": "s_updateDisplayedColor(color3b:#color3b_table):void [Label]", "contents": "updateDisplayedColor(${1:color3b:#color3b_table})" },{ "trigger": "s_setEnabled(bool:#bool):void [EventListener]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_clone():ret (return value: cc.EventListener):#EventListener [EventListener]", "contents": "clone()" },{ "trigger": "s_isEnabled():ret (return value: bool):#bool [EventListener]", "contents": "isEnabled()" },{ "trigger": "s_checkAvailable():ret (return value: bool):#bool [EventListener]", "contents": "checkAvailable()" },{ "trigger": "s_create(vec2:#cc.Vec2):ret (return value: cc.Place):#Place [Place]", "contents": "create(${1:vec2:#cc.Vec2})" },{ "trigger": "s_clone():ret (return value: cc.Place):#Place [Place]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [Place]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.Place):#Place [Place]", "contents": "reverse()" },{ "trigger": "s_create(float:#float,float:#float,float:#float):ret (return value: cc.ProgressFromTo):#ProgressFromTo [ProgressFromTo]", "contents": "create(${1:float:#float},${2:float:#float},${3:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [ProgressFromTo]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.ProgressFromTo):#ProgressFromTo [ProgressFromTo]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.ProgressFromTo):#ProgressFromTo [ProgressFromTo]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [ProgressFromTo]", "contents": "update(${1:float:#float})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseBackOut):#EaseBackOut [EaseBackOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseBackOut):#EaseBackOut [EaseBackOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseBackOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.ActionEase):#ActionEase [EaseBackOut]", "contents": "reverse()" },{ "trigger": "ccm_NORMAL [LabelEffect]", "contents": "cc.NORMAL" },{ "trigger": "ccm_OUTLINE [LabelEffect]", "contents": "cc.OUTLINE" },{ "trigger": "ccm_SHADOW [LabelEffect]", "contents": "cc.SHADOW" },{ "trigger": "ccm_GLOW [LabelEffect]", "contents": "cc.GLOW" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseQuadraticActionInOut):#EaseQuadraticActionInOut [EaseQuadraticActionInOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseQuadraticActionInOut):#EaseQuadraticActionInOut [EaseQuadraticActionInOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseQuadraticActionInOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseQuadraticActionInOut):#EaseQuadraticActionInOut [EaseQuadraticActionInOut]", "contents": "reverse()" },{ "trigger": "s_reset():void [MotionStreak]", "contents": "reset()" },{ "trigger": "s_setTexture(texture2d:#cc.Texture2D):void [MotionStreak]", "contents": "setTexture(${1:texture2d:#cc.Texture2D})" },{ "trigger": "s_getTexture():ret (return value: cc.Texture2D):#Texture2D [MotionStreak]", "contents": "getTexture()" },{ "trigger": "s_tintWithColor(color3b:#color3b_table):void [MotionStreak]", "contents": "tintWithColor(${1:color3b:#color3b_table})" },{ "trigger": "s_setStartingPositionInitialized(bool:#bool):void [MotionStreak]", "contents": "setStartingPositionInitialized(${1:bool:#bool})" },{ "trigger": "s_isStartingPositionInitialized():ret (return value: bool):#bool [MotionStreak]", "contents": "isStartingPositionInitialized()" },{ "trigger": "s_isFastMode():ret (return value: bool):#bool [MotionStreak]", "contents": "isFastMode()" },{ "trigger": "s_setFastMode(bool:#bool):void [MotionStreak]", "contents": "setFastMode(${1:bool:#bool})" },{ "trigger": "f_create(float, float, float, color3b_table, cc.Texture2D):ret (retunr value: cc.MotionStreak):#MotionStreak [MotionStreak]", "contents": "create(${1:float},${2: float},${3: float},${4: color3b_table},${5: cc.Texture2D})" },{ "trigger": "f_create(float, float, float, color3b_table, string):ret (retunr value: cc.MotionStreak):#MotionStreak [MotionStreak]", "contents": "create(${1:float},${2: float},${3: float},${4: color3b_table},${5: string})" },{ "trigger": "s_create(float:#float,float:#float,float:#float,color3b:#color3b_table,str:#string):ret (retunr value: cc.MotionStreak):#MotionStreak [MotionStreak]", "contents": "create(${1:float:#float},${2:float:#float},${3:float:#float},${4:color3b:#color3b_table},${5:str:#string})" },{ "trigger": "s_isOpacityModifyRGB():ret (return value: bool):#bool [MotionStreak]", "contents": "isOpacityModifyRGB()" },{ "trigger": "s_setPositionY(float:#float):void [MotionStreak]", "contents": "setPositionY(${1:float:#float})" },{ "trigger": "s_setPositionX(float:#float):void [MotionStreak]", "contents": "setPositionX(${1:float:#float})" },{ "trigger": "s_getPositionY():ret (return value: float):#float [MotionStreak]", "contents": "getPositionY()" },{ "trigger": "s_getPositionX():ret (return value: float):#float [MotionStreak]", "contents": "getPositionX()" },{ "trigger": "s_setOpacity(char char:#unsigned):void [MotionStreak]", "contents": "setOpacity(${1:char char:#unsigned})" },{ "trigger": "s_setOpacityModifyRGB(bool:#bool):void [MotionStreak]", "contents": "setOpacityModifyRGB(${1:bool:#bool})" },{ "trigger": "s_getOpacity():unsigned [MotionStreak]", "contents": "getOpacity()" },{ "trigger": "f_setPosition(float, float):void [MotionStreak]", "contents": "setPosition(${1:float},${2: float})" },{ "trigger": "f_setPosition(cc.Vec2):void [MotionStreak]", "contents": "setPosition(${1:cc.Vec2})" },{ "trigger": "s_setPosition(float:#float,float:#float):void [MotionStreak]", "contents": "setPosition(${1:float:#float},${2:float:#float})" },{ "trigger": "f_getPosition(float, float):void [MotionStreak]", "contents": "getPosition(${1:float},${2: float})" },{ "trigger": "f_getPosition():void [MotionStreak]", "contents": "getPosition(${1:})" },{ "trigger": "s_getPosition(float:#float,float:#float):void [MotionStreak]", "contents": "getPosition(${1:float:#float},${2:float:#float})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseCircleActionOut):#EaseCircleActionOut [EaseCircleActionOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseCircleActionOut):#EaseCircleActionOut [EaseCircleActionOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseCircleActionOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseCircleActionOut):#EaseCircleActionOut [EaseCircleActionOut]", "contents": "reverse()" },{ "trigger": "s_setVirtualViewport(vec2:#cc.Vec2,rect:#rect_table,rect:#rect_table):void [RenderTexture]", "contents": "setVirtualViewport(${1:vec2:#cc.Vec2},${2:rect:#rect_table},${3:rect:#rect_table})" },{ "trigger": "s_clearStencil(int:#int):void [RenderTexture]", "contents": "clearStencil(${1:int:#int})" },{ "trigger": "s_getClearDepth():ret (return value: float):#float [RenderTexture]", "contents": "getClearDepth()" },{ "trigger": "s_getClearStencil():ret (return value: int):#int [RenderTexture]", "contents": "getClearStencil()" },{ "trigger": "s_end():void [RenderTexture]", "contents": "end()" },{ "trigger": "s_setClearStencil(int:#int):void [RenderTexture]", "contents": "setClearStencil(${1:int:#int})" },{ "trigger": "s_setSprite(sprite:#cc.Sprite):void [RenderTexture]", "contents": "setSprite(${1:sprite:#cc.Sprite})" },{ "trigger": "s_getSprite():ret (return value: cc.Sprite):#Sprite [RenderTexture]", "contents": "getSprite()" },{ "trigger": "s_isAutoDraw():ret (return value: bool):#bool [RenderTexture]", "contents": "isAutoDraw()" },{ "trigger": "s_setKeepMatrix(bool:#bool):void [RenderTexture]", "contents": "setKeepMatrix(${1:bool:#bool})" },{ "trigger": "s_setClearFlags(int int:#unsigned):void [RenderTexture]", "contents": "setClearFlags(${1:int int:#unsigned})" },{ "trigger": "s_begin():void [RenderTexture]", "contents": "begin()" },{ "trigger": "f_saveToFile(string, cc.Image::Format):ret (retunr value: bool):#bool [RenderTexture]", "contents": "saveToFile(${1:string},${2: cc.Image::Format})" },{ "trigger": "f_saveToFile(string):ret (retunr value: bool):#bool [RenderTexture]", "contents": "saveToFile(${1:string})" },{ "trigger": "s_saveToFile(str:#string,format:#cc.Image::Format):ret (retunr value: bool):#bool [RenderTexture]", "contents": "saveToFile(${1:str:#string},${2:format:#cc.Image::Format})" },{ "trigger": "s_setAutoDraw(bool:#bool):void [RenderTexture]", "contents": "setAutoDraw(${1:bool:#bool})" },{ "trigger": "s_setClearColor(color4f:#color4f_table):void [RenderTexture]", "contents": "setClearColor(${1:color4f:#color4f_table})" },{ "trigger": "s_endToLua():void [RenderTexture]", "contents": "endToLua()" },{ "trigger": "f_beginWithClear(float, float, float, float, float):void [RenderTexture]", "contents": "beginWithClear(${1:float},${2: float},${3: float},${4: float},${5: float})" },{ "trigger": "f_beginWithClear(float, float, float, float):void [RenderTexture]", "contents": "beginWithClear(${1:float},${2: float},${3: float},${4: float})" },{ "trigger": "f_beginWithClear(float, float, float, float, float, int):void [RenderTexture]", "contents": "beginWithClear(${1:float},${2: float},${3: float},${4: float},${5: float},${6: int})" },{ "trigger": "s_beginWithClear(float:#float,float:#float,float:#float,float:#float,float:#float,int:#int):void [RenderTexture]", "contents": "beginWithClear(${1:float:#float},${2:float:#float},${3:float:#float},${4:float:#float},${5:float:#float},${6:int:#int})" },{ "trigger": "s_clearDepth(float:#float):void [RenderTexture]", "contents": "clearDepth(${1:float:#float})" },{ "trigger": "s_getClearColor():ret (return value: color4f_table):#color4f_table [RenderTexture]", "contents": "getClearColor()" },{ "trigger": "s_clear(float:#float,float:#float,float:#float,float:#float):void [RenderTexture]", "contents": "clear(${1:float:#float},${2:float:#float},${3:float:#float},${4:float:#float})" },{ "trigger": "s_getClearFlags():unsigned [RenderTexture]", "contents": "getClearFlags()" },{ "trigger": "s_newImage():ret (return value: cc.Image):#Image [RenderTexture]", "contents": "newImage()" },{ "trigger": "s_setClearDepth(float:#float):void [RenderTexture]", "contents": "setClearDepth(${1:float:#float})" },{ "trigger": "f_initWithWidthAndHeight(int, int, cc.Texture2D::PixelFormat, unsigned int):ret (retunr value: bool):#bool [RenderTexture]", "contents": "initWithWidthAndHeight(${1:int},${2: int},${3: cc.Texture2D::PixelFormat},${4: unsigned int})" },{ "trigger": "f_initWithWidthAndHeight(int, int, cc.Texture2D::PixelFormat):ret (retunr value: bool):#bool [RenderTexture]", "contents": "initWithWidthAndHeight(${1:int},${2: int},${3: cc.Texture2D::PixelFormat})" },{ "trigger": "s_initWithWidthAndHeight(int:#int,int:#int,pixelformat:#cc.Texture2D::PixelFormat,int int:#unsigned):ret (retunr value: bool):#bool [RenderTexture]", "contents": "initWithWidthAndHeight(${1:int:#int},${2:int:#int},${3:pixelformat:#cc.Texture2D::PixelFormat},${4:int int:#unsigned})" },{ "trigger": "f_create(int, int, cc.Texture2D::PixelFormat):ret (retunr value: cc.RenderTexture):#RenderTexture [RenderTexture]", "contents": "create(${1:int},${2: int},${3: cc.Texture2D::PixelFormat})" },{ "trigger": "f_create(int, int, cc.Texture2D::PixelFormat, unsigned int):ret (retunr value: cc.RenderTexture):#RenderTexture [RenderTexture]", "contents": "create(${1:int},${2: int},${3: cc.Texture2D::PixelFormat},${4: unsigned int})" },{ "trigger": "f_create(int, int):ret (retunr value: cc.RenderTexture):#RenderTexture [RenderTexture]", "contents": "create(${1:int},${2: int})" },{ "trigger": "s_create(int:#int,int:#int,pixelformat:#cc.Texture2D::PixelFormat,int int:#unsigned):ret (retunr value: cc.RenderTexture):#RenderTexture [RenderTexture]", "contents": "create(${1:int:#int},${2:int:#int},${3:pixelformat:#cc.Texture2D::PixelFormat},${4:int int:#unsigned})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [RenderTexture]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_RenderTexture():void [RenderTexture]", "contents": "RenderTexture()" },{ "trigger": "s_getDamping():ret (return value: float):#float [PhysicsJointRotarySpring]", "contents": "getDamping()" },{ "trigger": "s_setRestAngle(float:#float):void [PhysicsJointRotarySpring]", "contents": "setRestAngle(${1:float:#float})" },{ "trigger": "s_getStiffness():ret (return value: float):#float [PhysicsJointRotarySpring]", "contents": "getStiffness()" },{ "trigger": "s_setStiffness(float:#float):void [PhysicsJointRotarySpring]", "contents": "setStiffness(${1:float:#float})" },{ "trigger": "s_setDamping(float:#float):void [PhysicsJointRotarySpring]", "contents": "setDamping(${1:float:#float})" },{ "trigger": "s_getRestAngle():ret (return value: float):#float [PhysicsJointRotarySpring]", "contents": "getRestAngle()" },{ "trigger": "s_construct(physicsbody:#cc.PhysicsBody,physicsbody:#cc.PhysicsBody,float:#float,float:#float):ret (return value: cc.PhysicsJointRotarySpring):#PhysicsJointRotarySpring [PhysicsJointRotarySpring]", "contents": "construct(${1:physicsbody:#cc.PhysicsBody},${2:physicsbody:#cc.PhysicsBody},${3:float:#float},${4:float:#float})" },{ "trigger": "s_create():ret (return value: cc.ParticleFlower):#ParticleFlower [ParticleFlower]", "contents": "create()" },{ "trigger": "s_createWithTotalParticles(int:#int):ret (return value: cc.ParticleFlower):#ParticleFlower [ParticleFlower]", "contents": "createWithTotalParticles(${1:int:#int})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseBounceInOut):#EaseBounceInOut [EaseBounceInOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseBounceInOut):#EaseBounceInOut [EaseBounceInOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseBounceInOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseBounceInOut):#EaseBounceInOut [EaseBounceInOut]", "contents": "reverse()" },{ "trigger": "s_getShadow():ret (return value: cc.Sprite):#Sprite [ControlSaturationBrightnessPicker]", "contents": "getShadow()" },{ "trigger": "s_initWithTargetAndPos(node:#cc.Node,vec2:#cc.Vec2):ret (return value: bool):#bool [ControlSaturationBrightnessPicker]", "contents": "initWithTargetAndPos(${1:node:#cc.Node},${2:vec2:#cc.Vec2})" },{ "trigger": "s_getStartPos():ret (return value: cc.Vec2):#Vec2 [ControlSaturationBrightnessPicker]", "contents": "getStartPos()" },{ "trigger": "s_getOverlay():ret (return value: cc.Sprite):#Sprite [ControlSaturationBrightnessPicker]", "contents": "getOverlay()" },{ "trigger": "s_setEnabled(bool:#bool):void [ControlSaturationBrightnessPicker]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_getSlider():ret (return value: cc.Sprite):#Sprite [ControlSaturationBrightnessPicker]", "contents": "getSlider()" },{ "trigger": "s_getBackground():ret (return value: cc.Sprite):#Sprite [ControlSaturationBrightnessPicker]", "contents": "getBackground()" },{ "trigger": "s_getSaturation():ret (return value: float):#float [ControlSaturationBrightnessPicker]", "contents": "getSaturation()" },{ "trigger": "s_getBrightness():ret (return value: float):#float [ControlSaturationBrightnessPicker]", "contents": "getBrightness()" },{ "trigger": "s_create(node:#cc.Node,vec2:#cc.Vec2):ret (return value: cc.ControlSaturationBrightnessPicker):#ControlSaturationBrightnessPicker [ControlSaturationBrightnessPicker]", "contents": "create(${1:node:#cc.Node},${2:vec2:#cc.Vec2})" },{ "trigger": "s_ControlSaturationBrightnessPicker():void [ControlSaturationBrightnessPicker]", "contents": "ControlSaturationBrightnessPicker()" },{ "trigger": "s_create(float:#float,vec2:#cc.Vec2):ret (return value: cc.MoveBy):#MoveBy [MoveBy]", "contents": "create(${1:float:#float},${2:vec2:#cc.Vec2})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [MoveBy]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.MoveBy):#MoveBy [MoveBy]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.MoveBy):#MoveBy [MoveBy]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [MoveBy]", "contents": "update(${1:float:#float})" },{ "trigger": "s_construct(physicsbody:#cc.PhysicsBody,physicsbody:#cc.PhysicsBody,vec2:#cc.Vec2):ret (return value: cc.PhysicsJointPin):#PhysicsJointPin [PhysicsJointPin]", "contents": "construct(${1:physicsbody:#cc.PhysicsBody},${2:physicsbody:#cc.PhysicsBody},${3:vec2:#cc.Vec2})" },{ "trigger": "s_create(float:#float,float:#float):ret (return value: cc.ProgressTo):#ProgressTo [ProgressTo]", "contents": "create(${1:float:#float},${2:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [ProgressTo]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.ProgressTo):#ProgressTo [ProgressTo]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.ProgressTo):#ProgressTo [ProgressTo]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [ProgressTo]", "contents": "update(${1:float:#float})" },{ "trigger": "s_create():GLNode ret (return value: cc.GLNode):#GLNode [GLNode]", "contents": "create()" },{ "trigger": "s_setShaderProgram(GLProgram:#GLProgram):GLNode ret (return value: cc.GLNode):#GLNode [GLNode]", "contents": "setShaderProgram(${1:GLProgram:#GLProgram})" },{ "trigger": "s_init(int:#int,color3b:#color3b_table,char char:#unsigned,str:#string,str:#string,float:#float):ret (return value: bool):#bool [RichElementText]", "contents": "init(${1:int:#int},${2:color3b:#color3b_table},${3:char char:#unsigned},${4:str:#string},${5:str:#string},${6:float:#float})" },{ "trigger": "s_create(int:#int,color3b:#color3b_table,char char:#unsigned,str:#string,str:#string,float:#float):ret (return value: ccui.RichElementText):#RichElementText [RichElementText]", "contents": "create(${1:int:#int},${2:color3b:#color3b_table},${3:char char:#unsigned},${4:str:#string},${5:str:#string},${6:float:#float})" },{ "trigger": "s_RichElementText():void [RichElementText]", "contents": "RichElementText()" },{ "trigger": "s_getLoops():unsigned [Animation]", "contents": "getLoops()" },{ "trigger": "s_addSpriteFrame(spriteframe:#cc.SpriteFrame):void [Animation]", "contents": "addSpriteFrame(${1:spriteframe:#cc.SpriteFrame})" },{ "trigger": "s_setRestoreOriginalFrame(bool:#bool):void [Animation]", "contents": "setRestoreOriginalFrame(${1:bool:#bool})" },{ "trigger": "s_clone():ret (return value: cc.Animation):#Animation [Animation]", "contents": "clone()" },{ "trigger": "s_getDuration():ret (return value: float):#float [Animation]", "contents": "getDuration()" },{ "trigger": "s_setFrames(array:#array_table):void [Animation]", "contents": "setFrames(${1:array:#array_table})" },{ "trigger": "s_getFrames():ret (return value: array_table):#array_table [Animation]", "contents": "getFrames()" },{ "trigger": "s_setLoops(int int:#unsigned):void [Animation]", "contents": "setLoops(${1:int int:#unsigned})" },{ "trigger": "s_setDelayPerUnit(float:#float):void [Animation]", "contents": "setDelayPerUnit(${1:float:#float})" },{ "trigger": "s_addSpriteFrameWithFile(str:#string):void [Animation]", "contents": "addSpriteFrameWithFile(${1:str:#string})" },{ "trigger": "s_getTotalDelayUnits():ret (return value: float):#float [Animation]", "contents": "getTotalDelayUnits()" },{ "trigger": "s_getDelayPerUnit():ret (return value: float):#float [Animation]", "contents": "getDelayPerUnit()" },{ "trigger": "s_getRestoreOriginalFrame():ret (return value: bool):#bool [Animation]", "contents": "getRestoreOriginalFrame()" },{ "trigger": "s_addSpriteFrameWithTexture(texture2d:#cc.Texture2D,rect:#rect_table):void [Animation]", "contents": "addSpriteFrameWithTexture(${1:texture2d:#cc.Texture2D},${2:rect:#rect_table})" },{ "trigger": "f_create(array_table, float, unsigned int):ret (retunr value: cc.Animation):#Animation [Animation]", "contents": "create(${1:array_table},${2: float},${3: unsigned int})" },{ "trigger": "f_create():ret (retunr value: cc.Animation):#Animation [Animation]", "contents": "create(${1:})" },{ "trigger": "s_create(array:#array_table,float:#float,int int:#unsigned):ret (retunr value: cc.Animation):#Animation [Animation]", "contents": "create(${1:array:#array_table},${2:float:#float},${3:int int:#unsigned})" },{ "trigger": "s_createWithSpriteFrames(array:#array_table,float:#float,int int:#unsigned):ret (return value: cc.Animation):#Animation [Animation]", "contents": "createWithSpriteFrames(${1:array:#array_table},${2:float:#float},${3:int int:#unsigned})" },{ "trigger": "f_new(className, func):ret (return value: table):#table [TInfo]", "contents": "new(${1:className},${2: func})" },{ "trigger": "f_new(tInfo):ret (return value: table):#table [TInfo]", "contents": "new(${1:tInfo})" },{ "trigger": "f_new(className:#string,func:#function):ret (return value: table):#table [TInfo]", "contents": "new(${1:className:#string},${2:func:#function})" },{ "trigger": "TInfom__className [TInfo]", "contents": "TInfo._className" },{ "trigger": "TInfom__fun [TInfo]", "contents": "TInfo._fun" },{ "trigger": "s_setPositionOffset(vec2:#cc.Vec2):void [TMXObjectGroup]", "contents": "setPositionOffset(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getProperty(str:#string):ret (return value: cc.Value):#Value [TMXObjectGroup]", "contents": "getProperty(${1:str:#string})" },{ "trigger": "s_getPositionOffset():ret (return value: cc.Vec2):#Vec2 [TMXObjectGroup]", "contents": "getPositionOffset()" },{ "trigger": "s_getObject(str:#string):ret (return value: map_table):#map_table [TMXObjectGroup]", "contents": "getObject(${1:str:#string})" },{ "trigger": "f_getObjects():ret (retunr value: array_table):#array_table [TMXObjectGroup]", "contents": "getObjects(${1:})" },{ "trigger": "f_getObjects():ret (retunr value: array_table):#array_table [TMXObjectGroup]", "contents": "getObjects(${1:})" },{ "trigger": "s_getObjects():ret (retunr value: array_table):#array_table [TMXObjectGroup]", "contents": "getObjects()" },{ "trigger": "s_setGroupName(str:#string):void [TMXObjectGroup]", "contents": "setGroupName(${1:str:#string})" },{ "trigger": "f_getProperties():ret (retunr value: map_table):#map_table [TMXObjectGroup]", "contents": "getProperties(${1:})" },{ "trigger": "f_getProperties():ret (retunr value: map_table):#map_table [TMXObjectGroup]", "contents": "getProperties(${1:})" },{ "trigger": "s_getProperties():ret (retunr value: map_table):#map_table [TMXObjectGroup]", "contents": "getProperties()" },{ "trigger": "s_getGroupName():ret (return value: string):#string [TMXObjectGroup]", "contents": "getGroupName()" },{ "trigger": "s_setProperties(map:#map_table):void [TMXObjectGroup]", "contents": "setProperties(${1:map:#map_table})" },{ "trigger": "s_setObjects(array:#array_table):void [TMXObjectGroup]", "contents": "setObjects(${1:array:#array_table})" },{ "trigger": "s_TMXObjectGroup():void [TMXObjectGroup]", "contents": "TMXObjectGroup()" },{ "trigger": "ScrollViewDirm_none [ScrollViewDir]", "contents": "ScrollViewDir.none" },{ "trigger": "ScrollViewDirm_vertical [ScrollViewDir]", "contents": "ScrollViewDir.vertical" },{ "trigger": "ScrollViewDirm_horizontal [ScrollViewDir]", "contents": "ScrollViewDir.horizontal" },{ "trigger": "ScrollViewDirm_both [ScrollViewDir]", "contents": "ScrollViewDir.both" },{ "trigger": "s_create():ret (return value: cc.ParticleExplosion):#ParticleExplosion [ParticleExplosion]", "contents": "create()" },{ "trigger": "s_createWithTotalParticles(int:#int):ret (return value: cc.ParticleExplosion):#ParticleExplosion [ParticleExplosion]", "contents": "createWithTotalParticles(${1:int:#int})" },{ "trigger": "s_setEnabled(bool:#bool):void [Component]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_setName(str:#string):void [Component]", "contents": "setName(${1:str:#string})" },{ "trigger": "s_isEnabled():ret (return value: bool):#bool [Component]", "contents": "isEnabled()" },{ "trigger": "s_update(float:#float):void [Component]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getOwner():ret (return value: cc.Node):#Node [Component]", "contents": "getOwner()" },{ "trigger": "s_init():ret (return value: bool):#bool [Component]", "contents": "init()" },{ "trigger": "s_setOwner(node:#cc.Node):void [Component]", "contents": "setOwner(${1:node:#cc.Node})" },{ "trigger": "s_getName():ret (return value: string):#string [Component]", "contents": "getName()" },{ "trigger": "s_create():ret (return value: cc.Component):#Component [Component]", "contents": "create()" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [Sequence]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.Sequence):#Sequence [Sequence]", "contents": "clone()" },{ "trigger": "s_stop():void [Sequence]", "contents": "stop()" },{ "trigger": "s_reverse():ret (return value: cc.Sequence):#Sequence [Sequence]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [Sequence]", "contents": "update(${1:float:#float})" },{ "trigger": "s_create(float:#float,float:#float,float:#float):ret (return value: cc.SkewBy):#SkewBy [SkewBy]", "contents": "create(${1:float:#float},${2:float:#float},${3:float:#float})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [SkewBy]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.SkewBy):#SkewBy [SkewBy]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.SkewBy):#SkewBy [SkewBy]", "contents": "reverse()" },{ "trigger": "s_create():ret (return value: ccs.ParticleDisplayData):#ParticleDisplayData [ParticleDisplayData]", "contents": "create()" },{ "trigger": "s_ParticleDisplayData():void [ParticleDisplayData]", "contents": "ParticleDisplayData()" },{ "trigger": "s_setTarget(func:#function):void [SceneReader]", "contents": "setTarget(${1:func:#function})" },{ "trigger": "s_createNodeWithSceneFile(str:#string,attachcomponenttype:#ccs.SceneReader::AttachComponentType):ret (return value: cc.Node):#Node [SceneReader]", "contents": "createNodeWithSceneFile(${1:str:#string},${2:attachcomponenttype:#ccs.SceneReader::AttachComponentType})" },{ "trigger": "s_getAttachComponentType():ret (return value: ccs.SceneReader::AttachComponentType):#SceneReader::AttachComponentType [SceneReader]", "contents": "getAttachComponentType()" },{ "trigger": "s_getNodeByTag(int:#int):ret (return value: cc.Node):#Node [SceneReader]", "contents": "getNodeByTag(${1:int:#int})" },{ "trigger": "s_destroyInstance():void [SceneReader]", "contents": "destroyInstance()" },{ "trigger": "s_sceneReaderVersion():ret (return value: char):#char [SceneReader]", "contents": "sceneReaderVersion()" },{ "trigger": "s_getInstance():ret (return value: ccs.SceneReader):#SceneReader [SceneReader]", "contents": "getInstance()" },{ "trigger": "RelativeAlignm_alignNone [RelativeAlign]", "contents": "RelativeAlign.alignNone" },{ "trigger": "RelativeAlignm_alignParentTopLeft [RelativeAlign]", "contents": "RelativeAlign.alignParentTopLeft" },{ "trigger": "RelativeAlignm_alignParentTopCenterHorizontal [RelativeAlign]", "contents": "RelativeAlign.alignParentTopCenterHorizontal" },{ "trigger": "RelativeAlignm_alignParentTopRight [RelativeAlign]", "contents": "RelativeAlign.alignParentTopRight" },{ "trigger": "RelativeAlignm_alignParentLeftCenterVertical [RelativeAlign]", "contents": "RelativeAlign.alignParentLeftCenterVertical" },{ "trigger": "RelativeAlignm_centerInParent [RelativeAlign]", "contents": "RelativeAlign.centerInParent" },{ "trigger": "RelativeAlignm_alignParentRightCenterVertical [RelativeAlign]", "contents": "RelativeAlign.alignParentRightCenterVertical" },{ "trigger": "RelativeAlignm_alignParentLeftBottom [RelativeAlign]", "contents": "RelativeAlign.alignParentLeftBottom" },{ "trigger": "RelativeAlignm_alignParentBottomCenterHorizontal [RelativeAlign]", "contents": "RelativeAlign.alignParentBottomCenterHorizontal" },{ "trigger": "RelativeAlignm_alignParentRightBottom [RelativeAlign]", "contents": "RelativeAlign.alignParentRightBottom" },{ "trigger": "RelativeAlignm_locationAboveLeftAlign [RelativeAlign]", "contents": "RelativeAlign.locationAboveLeftAlign" },{ "trigger": "RelativeAlignm_locationAboveCenter [RelativeAlign]", "contents": "RelativeAlign.locationAboveCenter" },{ "trigger": "RelativeAlignm_locationAboveRightAlign [RelativeAlign]", "contents": "RelativeAlign.locationAboveRightAlign" },{ "trigger": "RelativeAlignm_locationLeftOfTopAlign [RelativeAlign]", "contents": "RelativeAlign.locationLeftOfTopAlign" },{ "trigger": "RelativeAlignm_locationLeftOfCenter [RelativeAlign]", "contents": "RelativeAlign.locationLeftOfCenter" },{ "trigger": "RelativeAlignm_locationLeftOfBottomAlign [RelativeAlign]", "contents": "RelativeAlign.locationLeftOfBottomAlign" },{ "trigger": "RelativeAlignm_locationRightOfTopAlign [RelativeAlign]", "contents": "RelativeAlign.locationRightOfTopAlign" },{ "trigger": "RelativeAlignm_locationRightOfCenter [RelativeAlign]", "contents": "RelativeAlign.locationRightOfCenter" },{ "trigger": "RelativeAlignm_locationRightOfBottomAlign [RelativeAlign]", "contents": "RelativeAlign.locationRightOfBottomAlign" },{ "trigger": "RelativeAlignm_locationBelowLeftAlign [RelativeAlign]", "contents": "RelativeAlign.locationBelowLeftAlign" },{ "trigger": "RelativeAlignm_locationBelowCenter [RelativeAlign]", "contents": "RelativeAlign.locationBelowCenter" },{ "trigger": "RelativeAlignm_locationBelowRightAlign [RelativeAlign]", "contents": "RelativeAlign.locationBelowRightAlign" },{ "trigger": "s_EventKeyboard(keycode:#cc.EventKeyboard::KeyCode,bool:#bool):void [EventKeyboard]", "contents": "EventKeyboard(${1:keycode:#cc.EventKeyboard::KeyCode},${2:bool:#bool})" },{ "trigger": "s_clone():ret (return value: cc.EventListenerKeyboard):#EventListenerKeyboard [EventListenerKeyboard]", "contents": "clone()" },{ "trigger": "s_checkAvailable():ret (return value: bool):#bool [EventListenerKeyboard]", "contents": "checkAvailable()" },{ "trigger": "s_construct(physicsbody:#cc.PhysicsBody,physicsbody:#cc.PhysicsBody,vec2:#cc.Vec2):ret (return value: cc.PhysicsJointFixed):#PhysicsJointFixed [PhysicsJointFixed]", "contents": "construct(${1:physicsbody:#cc.PhysicsBody},${2:physicsbody:#cc.PhysicsBody},${3:vec2:#cc.Vec2})" },{ "trigger": "s_getEventCode():ret (return value: cc.EventTouch::EventCode):#EventTouch::EventCode [EventTouch]", "contents": "getEventCode()" },{ "trigger": "s_setEventCode(eventcode:#cc.EventTouch::EventCode):void [EventTouch]", "contents": "setEventCode(${1:eventcode:#cc.EventTouch::EventCode})" },{ "trigger": "s_EventTouch():void [EventTouch]", "contents": "EventTouch()" },{ "trigger": "f_setSpriteFrame(cc.SpriteFrame):void [Sprite]", "contents": "setSpriteFrame(${1:cc.SpriteFrame})" },{ "trigger": "f_setSpriteFrame(string):void [Sprite]", "contents": "setSpriteFrame(${1:string})" },{ "trigger": "s_setSpriteFrame(str:#string):void [Sprite]", "contents": "setSpriteFrame(${1:str:#string})" },{ "trigger": "f_setTexture(cc.Texture2D):void [Sprite]", "contents": "setTexture(${1:cc.Texture2D})" },{ "trigger": "f_setTexture(string):void [Sprite]", "contents": "setTexture(${1:string})" },{ "trigger": "s_setTexture(str:#string):void [Sprite]", "contents": "setTexture(${1:str:#string})" },{ "trigger": "s_getTexture():ret (return value: cc.Texture2D):#Texture2D [Sprite]", "contents": "getTexture()" },{ "trigger": "s_setFlippedY(bool:#bool):void [Sprite]", "contents": "setFlippedY(${1:bool:#bool})" },{ "trigger": "s_setFlippedX(bool:#bool):void [Sprite]", "contents": "setFlippedX(${1:bool:#bool})" },{ "trigger": "s_getBatchNode():ret (return value: cc.SpriteBatchNode):#SpriteBatchNode [Sprite]", "contents": "getBatchNode()" },{ "trigger": "s_getOffsetPosition():ret (return value: cc.Vec2):#Vec2 [Sprite]", "contents": "getOffsetPosition()" },{ "trigger": "s_removeAllChildrenWithCleanup(bool:#bool):void [Sprite]", "contents": "removeAllChildrenWithCleanup(${1:bool:#bool})" },{ "trigger": "s_updateTransform():void [Sprite]", "contents": "updateTransform()" },{ "trigger": "f_setTextureRect(rect_table, bool, size_table):void [Sprite]", "contents": "setTextureRect(${1:rect_table},${2: bool},${3: size_table})" },{ "trigger": "f_setTextureRect(rect_table):void [Sprite]", "contents": "setTextureRect(${1:rect_table})" },{ "trigger": "s_setTextureRect(rect:#rect_table,bool:#bool,size:#size_table):void [Sprite]", "contents": "setTextureRect(${1:rect:#rect_table},${2:bool:#bool},${3:size:#size_table})" },{ "trigger": "s_isFrameDisplayed(spriteframe:#cc.SpriteFrame):ret (return value: bool):#bool [Sprite]", "contents": "isFrameDisplayed(${1:spriteframe:#cc.SpriteFrame})" },{ "trigger": "s_getAtlasIndex():ret (return value: long):#long [Sprite]", "contents": "getAtlasIndex()" },{ "trigger": "s_setBatchNode(spritebatchnode:#cc.SpriteBatchNode):void [Sprite]", "contents": "setBatchNode(${1:spritebatchnode:#cc.SpriteBatchNode})" },{ "trigger": "s_setDisplayFrameWithAnimationName(str:#string,long:#long):void [Sprite]", "contents": "setDisplayFrameWithAnimationName(${1:str:#string},${2:long:#long})" },{ "trigger": "s_setTextureAtlas(textureatlas:#cc.TextureAtlas):void [Sprite]", "contents": "setTextureAtlas(${1:textureatlas:#cc.TextureAtlas})" },{ "trigger": "s_getSpriteFrame():ret (return value: cc.SpriteFrame):#SpriteFrame [Sprite]", "contents": "getSpriteFrame()" },{ "trigger": "s_isDirty():ret (return value: bool):#bool [Sprite]", "contents": "isDirty()" },{ "trigger": "s_setAtlasIndex(long:#long):void [Sprite]", "contents": "setAtlasIndex(${1:long:#long})" },{ "trigger": "s_setDirty(bool:#bool):void [Sprite]", "contents": "setDirty(${1:bool:#bool})" },{ "trigger": "s_isTextureRectRotated():ret (return value: bool):#bool [Sprite]", "contents": "isTextureRectRotated()" },{ "trigger": "s_getTextureRect():ret (return value: rect_table):#rect_table [Sprite]", "contents": "getTextureRect()" },{ "trigger": "s_getTextureAtlas():ret (return value: cc.TextureAtlas):#TextureAtlas [Sprite]", "contents": "getTextureAtlas()" },{ "trigger": "s_isFlippedX():ret (return value: bool):#bool [Sprite]", "contents": "isFlippedX()" },{ "trigger": "s_isFlippedY():ret (return value: bool):#bool [Sprite]", "contents": "isFlippedY()" },{ "trigger": "s_setVertexRect(rect:#rect_table):void [Sprite]", "contents": "setVertexRect(${1:rect:#rect_table})" },{ "trigger": "f_create(string):ret (retunr value: cc.Sprite):#Sprite [Sprite]", "contents": "create(${1:string})" },{ "trigger": "f_create():ret (retunr value: cc.Sprite):#Sprite [Sprite]", "contents": "create(${1:})" },{ "trigger": "f_create(string, rect_table):ret (retunr value: cc.Sprite):#Sprite [Sprite]", "contents": "create(${1:string},${2: rect_table})" },{ "trigger": "s_create(str:#string,rect:#rect_table):ret (retunr value: cc.Sprite):#Sprite [Sprite]", "contents": "create(${1:str:#string},${2:rect:#rect_table})" },{ "trigger": "f_createWithTexture(cc.Texture2D, rect_table, bool):ret (retunr value: cc.Sprite):#Sprite [Sprite]", "contents": "createWithTexture(${1:cc.Texture2D},${2: rect_table},${3: bool})" },{ "trigger": "f_createWithTexture(cc.Texture2D):ret (retunr value: cc.Sprite):#Sprite [Sprite]", "contents": "createWithTexture(${1:cc.Texture2D})" },{ "trigger": "s_createWithTexture(texture2d:#cc.Texture2D,rect:#rect_table,bool:#bool):ret (retunr value: cc.Sprite):#Sprite [Sprite]", "contents": "createWithTexture(${1:texture2d:#cc.Texture2D},${2:rect:#rect_table},${3:bool:#bool})" },{ "trigger": "s_createWithSpriteFrameName(str:#string):ret (return value: cc.Sprite):#Sprite [Sprite]", "contents": "createWithSpriteFrameName(${1:str:#string})" },{ "trigger": "s_createWithSpriteFrame(spriteframe:#cc.SpriteFrame):ret (return value: cc.Sprite):#Sprite [Sprite]", "contents": "createWithSpriteFrame(${1:spriteframe:#cc.SpriteFrame})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [Sprite]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_addChild(node:#cc.Node,int:#int,int:#int):void [Sprite]", "contents": "addChild(${1:node:#cc.Node},${2:int:#int},${3:int:#int})" },{ "trigger": "s_setScaleY(float:#float):void [Sprite]", "contents": "setScaleY(${1:float:#float})" },{ "trigger": "s_setScaleX(float:#float):void [Sprite]", "contents": "setScaleX(${1:float:#float})" },{ "trigger": "s_isOpacityModifyRGB():ret (return value: bool):#bool [Sprite]", "contents": "isOpacityModifyRGB()" },{ "trigger": "s_setPositionZ(float:#float):void [Sprite]", "contents": "setPositionZ(${1:float:#float})" },{ "trigger": "s_setAnchorPoint(vec2:#cc.Vec2):void [Sprite]", "contents": "setAnchorPoint(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setRotationSkewX(float:#float):void [Sprite]", "contents": "setRotationSkewX(${1:float:#float})" },{ "trigger": "s_getDescription():ret (return value: string):#string [Sprite]", "contents": "getDescription()" },{ "trigger": "s_setRotationSkewY(float:#float):void [Sprite]", "contents": "setRotationSkewY(${1:float:#float})" },{ "trigger": "f_setScale(float):void [Sprite]", "contents": "setScale(${1:float})" },{ "trigger": "f_setScale(float, float):void [Sprite]", "contents": "setScale(${1:float},${2: float})" },{ "trigger": "s_setScale(float:#float,float:#float):void [Sprite]", "contents": "setScale(${1:float:#float},${2:float:#float})" },{ "trigger": "s_reorderChild(node:#cc.Node,int:#int):void [Sprite]", "contents": "reorderChild(${1:node:#cc.Node},${2:int:#int})" },{ "trigger": "s_removeChild(node:#cc.Node,bool:#bool):void [Sprite]", "contents": "removeChild(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "s_sortAllChildren():void [Sprite]", "contents": "sortAllChildren()" },{ "trigger": "s_setOpacityModifyRGB(bool:#bool):void [Sprite]", "contents": "setOpacityModifyRGB(${1:bool:#bool})" },{ "trigger": "s_setRotation(float:#float):void [Sprite]", "contents": "setRotation(${1:float:#float})" },{ "trigger": "s_setSkewY(float:#float):void [Sprite]", "contents": "setSkewY(${1:float:#float})" },{ "trigger": "s_setVisible(bool:#bool):void [Sprite]", "contents": "setVisible(${1:bool:#bool})" },{ "trigger": "s_setSkewX(float:#float):void [Sprite]", "contents": "setSkewX(${1:float:#float})" },{ "trigger": "s_ignoreAnchorPointForPosition(bool:#bool):void [Sprite]", "contents": "ignoreAnchorPointForPosition(${1:bool:#bool})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseQuadraticActionIn):#EaseQuadraticActionIn [EaseQuadraticActionIn]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseQuadraticActionIn):#EaseQuadraticActionIn [EaseQuadraticActionIn]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseQuadraticActionIn]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseQuadraticActionIn):#EaseQuadraticActionIn [EaseQuadraticActionIn]", "contents": "reverse()" },{ "trigger": "s_init(int:#int,color3b:#color3b_table,char char:#unsigned,str:#string):ret (return value: bool):#bool [RichElementImage]", "contents": "init(${1:int:#int},${2:color3b:#color3b_table},${3:char char:#unsigned},${4:str:#string})" },{ "trigger": "s_create(int:#int,color3b:#color3b_table,char char:#unsigned,str:#string):ret (return value: ccui.RichElementImage):#RichElementImage [RichElementImage]", "contents": "create(${1:int:#int},${2:color3b:#color3b_table},${3:char char:#unsigned},${4:str:#string})" },{ "trigger": "s_RichElementImage():void [RichElementImage]", "contents": "RichElementImage()" },{ "trigger": "s_getAnimationDatas():ret (return value: map_table):#map_table [ArmatureDataManager]", "contents": "getAnimationDatas()" },{ "trigger": "s_removeAnimationData(str:#string):void [ArmatureDataManager]", "contents": "removeAnimationData(${1:str:#string})" },{ "trigger": "s_addArmatureData(str:#string,armaturedata:#ccs.ArmatureData,str:#string):void [ArmatureDataManager]", "contents": "addArmatureData(${1:str:#string},${2:armaturedata:#ccs.ArmatureData},${3:str:#string})" },{ "trigger": "f_addArmatureFileInfo(string, string, string):void [ArmatureDataManager]", "contents": "addArmatureFileInfo(${1:string},${2: string},${3: string})" },{ "trigger": "f_addArmatureFileInfo(string):void [ArmatureDataManager]", "contents": "addArmatureFileInfo(${1:string})" },{ "trigger": "s_addArmatureFileInfo(str:#string,str:#string,str:#string):void [ArmatureDataManager]", "contents": "addArmatureFileInfo(${1:str:#string},${2:str:#string},${3:str:#string})" },{ "trigger": "s_removeArmatureFileInfo(str:#string):void [ArmatureDataManager]", "contents": "removeArmatureFileInfo(${1:str:#string})" },{ "trigger": "s_getTextureDatas():ret (return value: map_table):#map_table [ArmatureDataManager]", "contents": "getTextureDatas()" },{ "trigger": "s_getTextureData(str:#string):ret (return value: ccs.TextureData):#TextureData [ArmatureDataManager]", "contents": "getTextureData(${1:str:#string})" },{ "trigger": "s_getArmatureData(str:#string):ret (return value: ccs.ArmatureData):#ArmatureData [ArmatureDataManager]", "contents": "getArmatureData(${1:str:#string})" },{ "trigger": "s_getAnimationData(str:#string):ret (return value: ccs.AnimationData):#AnimationData [ArmatureDataManager]", "contents": "getAnimationData(${1:str:#string})" },{ "trigger": "s_addAnimationData(str:#string,animationdata:#ccs.AnimationData,str:#string):void [ArmatureDataManager]", "contents": "addAnimationData(${1:str:#string},${2:animationdata:#ccs.AnimationData},${3:str:#string})" },{ "trigger": "s_init():ret (return value: bool):#bool [ArmatureDataManager]", "contents": "init()" },{ "trigger": "s_removeArmatureData(str:#string):void [ArmatureDataManager]", "contents": "removeArmatureData(${1:str:#string})" },{ "trigger": "s_getArmatureDatas():ret (return value: map_table):#map_table [ArmatureDataManager]", "contents": "getArmatureDatas()" },{ "trigger": "s_removeTextureData(str:#string):void [ArmatureDataManager]", "contents": "removeTextureData(${1:str:#string})" },{ "trigger": "s_addTextureData(str:#string,texturedata:#ccs.TextureData,str:#string):void [ArmatureDataManager]", "contents": "addTextureData(${1:str:#string},${2:texturedata:#ccs.TextureData},${3:str:#string})" },{ "trigger": "s_isAutoLoadSpriteFile():ret (return value: bool):#bool [ArmatureDataManager]", "contents": "isAutoLoadSpriteFile()" },{ "trigger": "s_addSpriteFrameFromFile(str:#string,str:#string,str:#string):void [ArmatureDataManager]", "contents": "addSpriteFrameFromFile(${1:str:#string},${2:str:#string},${3:str:#string})" },{ "trigger": "s_destroyInstance():void [ArmatureDataManager]", "contents": "destroyInstance()" },{ "trigger": "s_getInstance():ret (return value: ccs.ArmatureDataManager):#ArmatureDataManager [ArmatureDataManager]", "contents": "getInstance()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionJumpZoom):#TransitionJumpZoom [TransitionJumpZoom]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseQuinticActionInOut):#EaseQuinticActionInOut [EaseQuinticActionInOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseQuinticActionInOut):#EaseQuinticActionInOut [EaseQuinticActionInOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseQuinticActionInOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseQuinticActionInOut):#EaseQuinticActionInOut [EaseQuinticActionInOut]", "contents": "reverse()" },{ "trigger": "s_create(float:#float,vec2:#cc.Vec2,float:#float,int:#int):ret (return value: cc.JumpBy):#JumpBy [JumpBy]", "contents": "create(${1:float:#float},${2:vec2:#cc.Vec2},${3:float:#float},${4:int:#int})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [JumpBy]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.JumpBy):#JumpBy [JumpBy]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.JumpBy):#JumpBy [JumpBy]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [JumpBy]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getFragmentShaderLog():ret (return value: string):#string [GLProgram]", "contents": "getFragmentShaderLog()" },{ "trigger": "s_initWithByteArrays(char:#char,char:#char):ret (return value: bool):#bool [GLProgram]", "contents": "initWithByteArrays(${1:char:#char},${2:char:#char})" },{ "trigger": "s_setUniformLocationWithMatrix4fv(int:#int,float:#float,int int:#unsigned):void [GLProgram]", "contents": "setUniformLocationWithMatrix4fv(${1:int:#int},${2:float:#float},${3:int int:#unsigned})" },{ "trigger": "s_initWithFilenames(str:#string,str:#string):ret (return value: bool):#bool [GLProgram]", "contents": "initWithFilenames(${1:str:#string},${2:str:#string})" },{ "trigger": "s_getUniformLocationForName(char:#char):ret (return value: int):#int [GLProgram]", "contents": "getUniformLocationForName(${1:char:#char})" },{ "trigger": "s_use():void [GLProgram]", "contents": "use()" },{ "trigger": "s_getVertexShaderLog():ret (return value: string):#string [GLProgram]", "contents": "getVertexShaderLog()" },{ "trigger": "s_getUniform(str:#string):ret (return value: cc.Uniform):#Uniform [GLProgram]", "contents": "getUniform(${1:str:#string})" },{ "trigger": "f_setUniformsForBuiltins(cc.Mat4):void [GLProgram]", "contents": "setUniformsForBuiltins(${1:cc.Mat4})" },{ "trigger": "f_setUniformsForBuiltins():void [GLProgram]", "contents": "setUniformsForBuiltins(${1:})" },{ "trigger": "s_setUniformsForBuiltins(mat4:#cc.Mat4):void [GLProgram]", "contents": "setUniformsForBuiltins(${1:mat4:#cc.Mat4})" },{ "trigger": "s_setUniformLocationWith3i(int:#int,int:#int,int:#int,int:#int):void [GLProgram]", "contents": "setUniformLocationWith3i(${1:int:#int},${2:int:#int},${3:int:#int},${4:int:#int})" },{ "trigger": "s_setUniformLocationWith3iv(int:#int,int:#int,int int:#unsigned):void [GLProgram]", "contents": "setUniformLocationWith3iv(${1:int:#int},${2:int:#int},${3:int int:#unsigned})" },{ "trigger": "s_updateUniforms():void [GLProgram]", "contents": "updateUniforms()" },{ "trigger": "s_setUniformLocationWith4iv(int:#int,int:#int,int int:#unsigned):void [GLProgram]", "contents": "setUniformLocationWith4iv(${1:int:#int},${2:int:#int},${3:int int:#unsigned})" },{ "trigger": "s_getUniformLocation(str:#string):ret (return value: int):#int [GLProgram]", "contents": "getUniformLocation(${1:str:#string})" },{ "trigger": "s_setUniformLocationWith1i(int:#int,int:#int):void [GLProgram]", "contents": "setUniformLocationWith1i(${1:int:#int},${2:int:#int})" },{ "trigger": "s_setUniformLocationWith2iv(int:#int,int:#int,int int:#unsigned):void [GLProgram]", "contents": "setUniformLocationWith2iv(${1:int:#int},${2:int:#int},${3:int int:#unsigned})" },{ "trigger": "s_setUniformLocationWithMatrix3fv(int:#int,float:#float,int int:#unsigned):void [GLProgram]", "contents": "setUniformLocationWithMatrix3fv(${1:int:#int},${2:float:#float},${3:int int:#unsigned})" },{ "trigger": "s_reset():void [GLProgram]", "contents": "reset()" },{ "trigger": "s_bindAttribLocation(str:#string,int int:#unsigned):void [GLProgram]", "contents": "bindAttribLocation(${1:str:#string},${2:int int:#unsigned})" },{ "trigger": "s_getAttribLocation(str:#string):ret (return value: int):#int [GLProgram]", "contents": "getAttribLocation(${1:str:#string})" },{ "trigger": "s_getVertexAttrib(str:#string):ret (return value: cc.VertexAttrib):#VertexAttrib [GLProgram]", "contents": "getVertexAttrib(${1:str:#string})" },{ "trigger": "s_setUniformLocationWithMatrix2fv(int:#int,float:#float,int int:#unsigned):void [GLProgram]", "contents": "setUniformLocationWithMatrix2fv(${1:int:#int},${2:float:#float},${3:int int:#unsigned})" },{ "trigger": "s_setUniformLocationWith4i(int:#int,int:#int,int:#int,int:#int,int:#int):void [GLProgram]", "contents": "setUniformLocationWith4i(${1:int:#int},${2:int:#int},${3:int:#int},${4:int:#int},${5:int:#int})" },{ "trigger": "s_link():ret (return value: bool):#bool [GLProgram]", "contents": "link()" },{ "trigger": "s_setUniformLocationWith2i(int:#int,int:#int,int:#int):void [GLProgram]", "contents": "setUniformLocationWith2i(${1:int:#int},${2:int:#int},${3:int:#int})" },{ "trigger": "s_createWithByteArrays(char:#char,char:#char):ret (return value: cc.GLProgram):#GLProgram [GLProgram]", "contents": "createWithByteArrays(${1:char:#char},${2:char:#char})" },{ "trigger": "s_createWithFilenames(str:#string,str:#string):ret (return value: cc.GLProgram):#GLProgram [GLProgram]", "contents": "createWithFilenames(${1:str:#string},${2:str:#string})" },{ "trigger": "s_GLProgram():void [GLProgram]", "contents": "GLProgram()" },{ "trigger": "s_changeWidthAndHeight(float:#float,float:#float):void [LayerColor]", "contents": "changeWidthAndHeight(${1:float:#float},${2:float:#float})" },{ "trigger": "s_changeHeight(float:#float):void [LayerColor]", "contents": "changeHeight(${1:float:#float})" },{ "trigger": "s_changeWidth(float:#float):void [LayerColor]", "contents": "changeWidth(${1:float:#float})" },{ "trigger": "f_create(color4b_table, float, float):ret (retunr value: cc.LayerColor):#LayerColor [LayerColor]", "contents": "create(${1:color4b_table},${2: float},${3: float})" },{ "trigger": "f_create():ret (retunr value: cc.LayerColor):#LayerColor [LayerColor]", "contents": "create(${1:})" },{ "trigger": "f_create(color4b_table):ret (retunr value: cc.LayerColor):#LayerColor [LayerColor]", "contents": "create(${1:color4b_table})" },{ "trigger": "s_create(color4b:#color4b_table,float:#float,float:#float):ret (retunr value: cc.LayerColor):#LayerColor [LayerColor]", "contents": "create(${1:color4b:#color4b_table},${2:float:#float},${3:float:#float})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [LayerColor]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_getDescription():ret (return value: string):#string [LayerColor]", "contents": "getDescription()" },{ "trigger": "s_setContentSize(size:#size_table):void [LayerColor]", "contents": "setContentSize(${1:size:#size_table})" },{ "trigger": "s_fullPathForFilename(str:#string):ret (return value: string):#string [FileUtils]", "contents": "fullPathForFilename(${1:str:#string})" },{ "trigger": "s_getStringFromFile(str:#string):ret (return value: string):#string [FileUtils]", "contents": "getStringFromFile(${1:str:#string})" },{ "trigger": "s_setFilenameLookupDictionary(map:#map_table):void [FileUtils]", "contents": "setFilenameLookupDictionary(${1:map:#map_table})" },{ "trigger": "s_isAbsolutePath(str:#string):ret (return value: bool):#bool [FileUtils]", "contents": "isAbsolutePath(${1:str:#string})" },{ "trigger": "s_loadFilenameLookupDictionaryFromFile(str:#string):void [FileUtils]", "contents": "loadFilenameLookupDictionaryFromFile(${1:str:#string})" },{ "trigger": "s_isPopupNotify():ret (return value: bool):#bool [FileUtils]", "contents": "isPopupNotify()" },{ "trigger": "s_getValueVectorFromFile(str:#string):ret (return value: array_table):#array_table [FileUtils]", "contents": "getValueVectorFromFile(${1:str:#string})" },{ "trigger": "s_writeToFile(map:#map_table,str:#string):ret (return value: bool):#bool [FileUtils]", "contents": "writeToFile(${1:map:#map_table},${2:str:#string})" },{ "trigger": "s_getValueMapFromFile(str:#string):ret (return value: map_table):#map_table [FileUtils]", "contents": "getValueMapFromFile(${1:str:#string})" },{ "trigger": "s_addSearchResolutionsOrder(str:#string):void [FileUtils]", "contents": "addSearchResolutionsOrder(${1:str:#string})" },{ "trigger": "s_addSearchPath(str:#string):void [FileUtils]", "contents": "addSearchPath(${1:str:#string})" },{ "trigger": "s_isFileExist(str:#string):ret (return value: bool):#bool [FileUtils]", "contents": "isFileExist(${1:str:#string})" },{ "trigger": "s_purgeCachedEntries():void [FileUtils]", "contents": "purgeCachedEntries()" },{ "trigger": "s_fullPathFromRelativeFile(str:#string,str:#string):ret (return value: string):#string [FileUtils]", "contents": "fullPathFromRelativeFile(${1:str:#string},${2:str:#string})" },{ "trigger": "s_setPopupNotify(bool:#bool):void [FileUtils]", "contents": "setPopupNotify(${1:bool:#bool})" },{ "trigger": "s_getWritablePath():ret (return value: string):#string [FileUtils]", "contents": "getWritablePath()" },{ "trigger": "s_destroyInstance():void [FileUtils]", "contents": "destroyInstance()" },{ "trigger": "s_getInstance():ret (return value: cc.FileUtils):#FileUtils [FileUtils]", "contents": "getInstance()" },{ "trigger": "ccm_Scale9Sprite [lua_cocos2dx_extension_auto_api]", "contents": "cc.Scale9Sprite" },{ "trigger": "ccm_Control [lua_cocos2dx_extension_auto_api]", "contents": "cc.Control" },{ "trigger": "ccm_ControlButton [lua_cocos2dx_extension_auto_api]", "contents": "cc.ControlButton" },{ "trigger": "ccm_ControlHuePicker [lua_cocos2dx_extension_auto_api]", "contents": "cc.ControlHuePicker" },{ "trigger": "ccm_ControlSaturationBrightnessPicker [lua_cocos2dx_extension_auto_api]", "contents": "cc.ControlSaturationBrightnessPicker" },{ "trigger": "ccm_ControlColourPicker [lua_cocos2dx_extension_auto_api]", "contents": "cc.ControlColourPicker" },{ "trigger": "ccm_ControlPotentiometer [lua_cocos2dx_extension_auto_api]", "contents": "cc.ControlPotentiometer" },{ "trigger": "ccm_ControlSlider [lua_cocos2dx_extension_auto_api]", "contents": "cc.ControlSlider" },{ "trigger": "ccm_ControlStepper [lua_cocos2dx_extension_auto_api]", "contents": "cc.ControlStepper" },{ "trigger": "ccm_ControlSwitch [lua_cocos2dx_extension_auto_api]", "contents": "cc.ControlSwitch" },{ "trigger": "ccm_ScrollView [lua_cocos2dx_extension_auto_api]", "contents": "cc.ScrollView" },{ "trigger": "ccm_TableViewCell [lua_cocos2dx_extension_auto_api]", "contents": "cc.TableViewCell" },{ "trigger": "ccm_TableView [lua_cocos2dx_extension_auto_api]", "contents": "cc.TableView" },{ "trigger": "ccm_EditBox [lua_cocos2dx_extension_auto_api]", "contents": "cc.EditBox" },{ "trigger": "ccm_AssetsManager [lua_cocos2dx_extension_auto_api]", "contents": "cc.AssetsManager" },{ "trigger": "ccm_CCBAnimationManager [lua_cocos2dx_extension_auto_api]", "contents": "cc.CCBAnimationManager" },{ "trigger": "ccm_CCBReader [lua_cocos2dx_extension_auto_api]", "contents": "cc.CCBReader" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionRotoZoom):#TransitionRotoZoom [TransitionRotoZoom]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_setAmplitudeRate(float:#float):void [Ripple3D]", "contents": "setAmplitudeRate(${1:float:#float})" },{ "trigger": "s_getAmplitudeRate():ret (return value: float):#float [Ripple3D]", "contents": "getAmplitudeRate()" },{ "trigger": "s_setAmplitude(float:#float):void [Ripple3D]", "contents": "setAmplitude(${1:float:#float})" },{ "trigger": "s_getAmplitude():ret (return value: float):#float [Ripple3D]", "contents": "getAmplitude()" },{ "trigger": "s_setPosition(vec2:#cc.Vec2):void [Ripple3D]", "contents": "setPosition(${1:vec2:#cc.Vec2})" },{ "trigger": "s_getPosition():ret (return value: cc.Vec2):#Vec2 [Ripple3D]", "contents": "getPosition()" },{ "trigger": "s_create(float:#float,size:#size_table,vec2:#cc.Vec2,float:#float,int int:#unsigned,float:#float):ret (return value: cc.Ripple3D):#Ripple3D [Ripple3D]", "contents": "create(${1:float:#float},${2:size:#size_table},${3:vec2:#cc.Vec2},${4:float:#float},${5:int int:#unsigned},${6:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.Ripple3D):#Ripple3D [Ripple3D]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [Ripple3D]", "contents": "update(${1:float:#float})" },{ "trigger": "s_getMovement(str:#string):ret (return value: ccs.MovementData):#MovementData [AnimationData]", "contents": "getMovement(${1:str:#string})" },{ "trigger": "s_getMovementCount():ret (return value: long):#long [AnimationData]", "contents": "getMovementCount()" },{ "trigger": "s_addMovement(movementdata:#ccs.MovementData):void [AnimationData]", "contents": "addMovement(${1:movementdata:#ccs.MovementData})" },{ "trigger": "s_create():ret (return value: ccs.AnimationData):#AnimationData [AnimationData]", "contents": "create()" },{ "trigger": "s_AnimationData():void [AnimationData]", "contents": "AnimationData()" },{ "trigger": "s_setBoudarySet(bool:#bool):void [Follow]", "contents": "setBoudarySet(${1:bool:#bool})" },{ "trigger": "s_isBoundarySet():ret (return value: bool):#bool [Follow]", "contents": "isBoundarySet()" },{ "trigger": "s_create(node:#cc.Node,rect:#rect_table):ret (return value: cc.Follow):#Follow [Follow]", "contents": "create(${1:node:#cc.Node},${2:rect:#rect_table})" },{ "trigger": "s_step(float:#float):void [Follow]", "contents": "step(${1:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.Follow):#Follow [Follow]", "contents": "clone()" },{ "trigger": "s_stop():void [Follow]", "contents": "stop()" },{ "trigger": "s_reverse():ret (return value: cc.Follow):#Follow [Follow]", "contents": "reverse()" },{ "trigger": "s_isDone():ret (return value: bool):#bool [Follow]", "contents": "isDone()" },{ "trigger": "s_addChild(node:#cc.Node,int:#int,vec2:#cc.Vec2,vec2:#cc.Vec2):void [ParallaxNode]", "contents": "addChild(${1:node:#cc.Node},${2:int:#int},${3:vec2:#cc.Vec2},${4:vec2:#cc.Vec2})" },{ "trigger": "s_removeAllChildrenWithCleanup(bool:#bool):void [ParallaxNode]", "contents": "removeAllChildrenWithCleanup(${1:bool:#bool})" },{ "trigger": "s_setParallaxArray(_ccarray:#cc._ccArray):void [ParallaxNode]", "contents": "setParallaxArray(${1:_ccarray:#cc._ccArray})" },{ "trigger": "s_create():ret (return value: cc.ParallaxNode):#ParallaxNode [ParallaxNode]", "contents": "create()" },{ "trigger": "s_addChild(node:#cc.Node,int:#int,int:#int):void [ParallaxNode]", "contents": "addChild(${1:node:#cc.Node},${2:int:#int},${3:int:#int})" },{ "trigger": "s_removeChild(node:#cc.Node,bool:#bool):void [ParallaxNode]", "contents": "removeChild(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "s_setAlign(relativealign:#ccui.RelativeLayoutParameter::RelativeAlign):void [RelativeLayoutParameter]", "contents": "setAlign(${1:relativealign:#ccui.RelativeLayoutParameter::RelativeAlign})" },{ "trigger": "s_setRelativeToWidgetName(str:#string):void [RelativeLayoutParameter]", "contents": "setRelativeToWidgetName(${1:str:#string})" },{ "trigger": "s_getRelativeName():ret (return value: string):#string [RelativeLayoutParameter]", "contents": "getRelativeName()" },{ "trigger": "s_getRelativeToWidgetName():ret (return value: string):#string [RelativeLayoutParameter]", "contents": "getRelativeToWidgetName()" },{ "trigger": "s_setRelativeName(str:#string):void [RelativeLayoutParameter]", "contents": "setRelativeName(${1:str:#string})" },{ "trigger": "s_getAlign():ret (return value: ccui.RelativeLayoutParameter::RelativeAlign):#RelativeLayoutParameter::RelativeAlign [RelativeLayoutParameter]", "contents": "getAlign()" },{ "trigger": "s_create():ret (return value: ccui.RelativeLayoutParameter):#RelativeLayoutParameter [RelativeLayoutParameter]", "contents": "create()" },{ "trigger": "s_createCloneInstance():ret (return value: ccui.LayoutParameter):#LayoutParameter [RelativeLayoutParameter]", "contents": "createCloneInstance()" },{ "trigger": "s_copyProperties(layoutparameter:#ccui.LayoutParameter):void [RelativeLayoutParameter]", "contents": "copyProperties(${1:layoutparameter:#ccui.LayoutParameter})" },{ "trigger": "s_RelativeLayoutParameter():void [RelativeLayoutParameter]", "contents": "RelativeLayoutParameter()" },{ "trigger": "s_setPercent(float:#float):void [LoadingBar]", "contents": "setPercent(${1:float:#float})" },{ "trigger": "s_loadTexture(str:#string,texturerestype:#ccui.Widget::TextureResType):void [LoadingBar]", "contents": "loadTexture(${1:str:#string},${2:texturerestype:#ccui.Widget::TextureResType})" },{ "trigger": "s_setDirection(direction:#ccui.LoadingBar::Direction):void [LoadingBar]", "contents": "setDirection(${1:direction:#ccui.LoadingBar::Direction})" },{ "trigger": "s_setScale9Enabled(bool:#bool):void [LoadingBar]", "contents": "setScale9Enabled(${1:bool:#bool})" },{ "trigger": "s_setCapInsets(rect:#rect_table):void [LoadingBar]", "contents": "setCapInsets(${1:rect:#rect_table})" },{ "trigger": "s_getDirection():ret (return value: ccui.LoadingBar::Direction):#LoadingBar::Direction [LoadingBar]", "contents": "getDirection()" },{ "trigger": "s_getCapInsets():ret (return value: rect_table):#rect_table [LoadingBar]", "contents": "getCapInsets()" },{ "trigger": "s_isScale9Enabled():ret (return value: bool):#bool [LoadingBar]", "contents": "isScale9Enabled()" },{ "trigger": "s_getPercent():ret (return value: float):#float [LoadingBar]", "contents": "getPercent()" },{ "trigger": "f_create(string, float):ret (retunr value: ccui.LoadingBar):#LoadingBar [LoadingBar]", "contents": "create(${1:string},${2: float})" },{ "trigger": "f_create():ret (retunr value: ccui.LoadingBar):#LoadingBar [LoadingBar]", "contents": "create(${1:})" },{ "trigger": "s_create(str:#string,float:#float):ret (retunr value: ccui.LoadingBar):#LoadingBar [LoadingBar]", "contents": "create(${1:str:#string},${2:float:#float})" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [LoadingBar]", "contents": "createInstance()" },{ "trigger": "s_getVirtualRenderer():ret (return value: cc.Node):#Node [LoadingBar]", "contents": "getVirtualRenderer()" },{ "trigger": "s_getDescription():ret (return value: string):#string [LoadingBar]", "contents": "getDescription()" },{ "trigger": "s_getVirtualRendererSize():ret (return value: size_table):#size_table [LoadingBar]", "contents": "getVirtualRendererSize()" },{ "trigger": "s_ignoreContentAdaptWithSize(bool:#bool):void [LoadingBar]", "contents": "ignoreContentAdaptWithSize(${1:bool:#bool})" },{ "trigger": "s_LoadingBar():void [LoadingBar]", "contents": "LoadingBar()" },{ "trigger": "s_updateAtlasValues():void [AtlasNode]", "contents": "updateAtlasValues()" },{ "trigger": "s_getTexture():ret (return value: cc.Texture2D):#Texture2D [AtlasNode]", "contents": "getTexture()" },{ "trigger": "s_setTextureAtlas(textureatlas:#cc.TextureAtlas):void [AtlasNode]", "contents": "setTextureAtlas(${1:textureatlas:#cc.TextureAtlas})" },{ "trigger": "s_getTextureAtlas():ret (return value: cc.TextureAtlas):#TextureAtlas [AtlasNode]", "contents": "getTextureAtlas()" },{ "trigger": "s_getQuadsToDraw():ret (return value: long):#long [AtlasNode]", "contents": "getQuadsToDraw()" },{ "trigger": "s_setTexture(texture2d:#cc.Texture2D):void [AtlasNode]", "contents": "setTexture(${1:texture2d:#cc.Texture2D})" },{ "trigger": "s_setQuadsToDraw(long:#long):void [AtlasNode]", "contents": "setQuadsToDraw(${1:long:#long})" },{ "trigger": "s_create(str:#string,int:#int,int:#int,int:#int):ret (return value: cc.AtlasNode):#AtlasNode [AtlasNode]", "contents": "create(${1:str:#string},${2:int:#int},${3:int:#int},${4:int:#int})" },{ "trigger": "s_draw(renderer:#cc.Renderer,mat4:#cc.Mat4,bool:#bool):void [AtlasNode]", "contents": "draw(${1:renderer:#cc.Renderer},${2:mat4:#cc.Mat4},${3:bool:#bool})" },{ "trigger": "s_isOpacityModifyRGB():ret (return value: bool):#bool [AtlasNode]", "contents": "isOpacityModifyRGB()" },{ "trigger": "s_setColor(color3b:#color3b_table):void [AtlasNode]", "contents": "setColor(${1:color3b:#color3b_table})" },{ "trigger": "s_getColor():ret (return value: color3b_table):#color3b_table [AtlasNode]", "contents": "getColor()" },{ "trigger": "s_setOpacityModifyRGB(bool:#bool):void [AtlasNode]", "contents": "setOpacityModifyRGB(${1:bool:#bool})" },{ "trigger": "s_setOpacity(char char:#unsigned):void [AtlasNode]", "contents": "setOpacity(${1:char char:#unsigned})" },{ "trigger": "TextFiledEventTypem_attach_with_ime [TextFiledEventType]", "contents": "TextFiledEventType.attach_with_ime" },{ "trigger": "TextFiledEventTypem_detach_with_ime [TextFiledEventType]", "contents": "TextFiledEventType.detach_with_ime" },{ "trigger": "TextFiledEventTypem_insert_text [TextFiledEventType]", "contents": "TextFiledEventType.insert_text" },{ "trigger": "TextFiledEventTypem_delete_backward [TextFiledEventType]", "contents": "TextFiledEventType.delete_backward" },{ "trigger": "s_copy(basedata:#ccs.BaseData):void [FrameData]", "contents": "copy(${1:basedata:#ccs.BaseData})" },{ "trigger": "s_create():ret (return value: ccs.FrameData):#FrameData [FrameData]", "contents": "create()" },{ "trigger": "s_FrameData():void [FrameData]", "contents": "FrameData()" },{ "trigger": "s_create(float:#float,size:#size_table):ret (return value: cc.FadeOutBLTiles):#FadeOutBLTiles [FadeOutBLTiles]", "contents": "create(${1:float:#float},${2:size:#size_table})" },{ "trigger": "s_clone():ret (return value: cc.FadeOutBLTiles):#FadeOutBLTiles [FadeOutBLTiles]", "contents": "clone()" },{ "trigger": "s_testFunc(size:#size_table,float:#float):ret (return value: float):#float [FadeOutBLTiles]", "contents": "testFunc(${1:size:#size_table},${2:float:#float})" },{ "trigger": "s_placeTile(vec2:#cc.Vec2,tile:#cc.Tile):void [ShuffleTiles]", "contents": "placeTile(${1:vec2:#cc.Vec2},${2:tile:#cc.Tile})" },{ "trigger": "s_shuffle(int int:#unsigned,int int:#unsigned):void [ShuffleTiles]", "contents": "shuffle(${1:int int:#unsigned},${2:int int:#unsigned})" },{ "trigger": "s_getDelta(size:#size_table):ret (return value: size_table):#size_table [ShuffleTiles]", "contents": "getDelta(${1:size:#size_table})" },{ "trigger": "s_create(float:#float,size:#size_table,int int:#unsigned):ret (return value: cc.ShuffleTiles):#ShuffleTiles [ShuffleTiles]", "contents": "create(${1:float:#float},${2:size:#size_table},${3:int int:#unsigned})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [ShuffleTiles]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.ShuffleTiles):#ShuffleTiles [ShuffleTiles]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [ShuffleTiles]", "contents": "update(${1:float:#float})" },{ "trigger": "s_init():ret (return value: bool):#bool [ContourData]", "contents": "init()" },{ "trigger": "s_addVertex(vec2:#cc.Vec2):void [ContourData]", "contents": "addVertex(${1:vec2:#cc.Vec2})" },{ "trigger": "s_create():ret (return value: ccs.ContourData):#ContourData [ContourData]", "contents": "create()" },{ "trigger": "s_ContourData():void [ContourData]", "contents": "ContourData()" },{ "trigger": "s_getGrid():ret (return value: cc.GridBase):#GridBase [Grid3DAction]", "contents": "getGrid()" },{ "trigger": "s_clone():ret (return value: cc.Grid3DAction):#Grid3DAction [Grid3DAction]", "contents": "clone()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseQuarticActionInOut):#EaseQuarticActionInOut [EaseQuarticActionInOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseQuarticActionInOut):#EaseQuarticActionInOut [EaseQuarticActionInOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseQuarticActionInOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseQuarticActionInOut):#EaseQuarticActionInOut [EaseQuarticActionInOut]", "contents": "reverse()" },{ "trigger": "s_create():ret (return value: cc.ParticleFireworks):#ParticleFireworks [ParticleFireworks]", "contents": "create()" },{ "trigger": "s_createWithTotalParticles(int:#int):ret (return value: cc.ParticleFireworks):#ParticleFireworks [ParticleFireworks]", "contents": "createWithTotalParticles(${1:int:#int})" },{ "trigger": "s_setPosition(vec2:#cc.Vec2):void [Lens3D]", "contents": "setPosition(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setConcave(bool:#bool):void [Lens3D]", "contents": "setConcave(${1:bool:#bool})" },{ "trigger": "s_setLensEffect(float:#float):void [Lens3D]", "contents": "setLensEffect(${1:float:#float})" },{ "trigger": "s_getPosition():ret (return value: cc.Vec2):#Vec2 [Lens3D]", "contents": "getPosition()" },{ "trigger": "s_getLensEffect():ret (return value: float):#float [Lens3D]", "contents": "getLensEffect()" },{ "trigger": "s_create(float:#float,size:#size_table,vec2:#cc.Vec2,float:#float):ret (return value: cc.Lens3D):#Lens3D [Lens3D]", "contents": "create(${1:float:#float},${2:size:#size_table},${3:vec2:#cc.Vec2},${4:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.Lens3D):#Lens3D [Lens3D]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [Lens3D]", "contents": "update(${1:float:#float})" },{ "trigger": "s_setPeriod(float:#float):void [EaseElastic]", "contents": "setPeriod(${1:float:#float})" },{ "trigger": "s_getPeriod():ret (return value: float):#float [EaseElastic]", "contents": "getPeriod()" },{ "trigger": "s_clone():ret (return value: cc.EaseElastic):#EaseElastic [EaseElastic]", "contents": "clone()" },{ "trigger": "s_reverse():ret (return value: cc.EaseElastic):#EaseElastic [EaseElastic]", "contents": "reverse()" },{ "trigger": "s_copy(displaydata:#ccs.DisplayData):void [DisplayData]", "contents": "copy(${1:displaydata:#ccs.DisplayData})" },{ "trigger": "s_changeDisplayToTexture(str:#string):ret (return value: string):#string [DisplayData]", "contents": "changeDisplayToTexture(${1:str:#string})" },{ "trigger": "s_create():ret (return value: ccs.DisplayData):#DisplayData [DisplayData]", "contents": "create()" },{ "trigger": "s_DisplayData():void [DisplayData]", "contents": "DisplayData()" },{ "trigger": "s_setFntFile(str:#string):void [TextBMFont]", "contents": "setFntFile(${1:str:#string})" },{ "trigger": "s_getStringLength():ret (return value: long):#long [TextBMFont]", "contents": "getStringLength()" },{ "trigger": "s_setString(str:#string):void [TextBMFont]", "contents": "setString(${1:str:#string})" },{ "trigger": "s_getString():ret (return value: string):#string [TextBMFont]", "contents": "getString()" },{ "trigger": "f_create(string, string):ret (retunr value: ccui.TextBMFont):#TextBMFont [TextBMFont]", "contents": "create(${1:string},${2: string})" },{ "trigger": "f_create():ret (retunr value: ccui.TextBMFont):#TextBMFont [TextBMFont]", "contents": "create(${1:})" },{ "trigger": "s_create(str:#string,str:#string):ret (retunr value: ccui.TextBMFont):#TextBMFont [TextBMFont]", "contents": "create(${1:str:#string},${2:str:#string})" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [TextBMFont]", "contents": "createInstance()" },{ "trigger": "s_getVirtualRenderer():ret (return value: cc.Node):#Node [TextBMFont]", "contents": "getVirtualRenderer()" },{ "trigger": "s_getDescription():ret (return value: string):#string [TextBMFont]", "contents": "getDescription()" },{ "trigger": "s_getVirtualRendererSize():ret (return value: size_table):#size_table [TextBMFont]", "contents": "getVirtualRendererSize()" },{ "trigger": "s_TextBMFont():void [TextBMFont]", "contents": "TextBMFont()" },{ "trigger": "s_setEnabled(bool:#bool):void [ControlSwitch]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "f_setOn(bool):void [ControlSwitch]", "contents": "setOn(${1:bool})" },{ "trigger": "f_setOn(bool, bool):void [ControlSwitch]", "contents": "setOn(${1:bool},${2: bool})" },{ "trigger": "s_setOn(bool:#bool,bool:#bool):void [ControlSwitch]", "contents": "setOn(${1:bool:#bool},${2:bool:#bool})" },{ "trigger": "s_isOn():ret (return value: bool):#bool [ControlSwitch]", "contents": "isOn()" },{ "trigger": "f_initWithMaskSprite(cc.Sprite, cc.Sprite, cc.Sprite, cc.Sprite, cc.Label, cc.Label):ret (retunr value: bool):#bool [ControlSwitch]", "contents": "initWithMaskSprite(${1:cc.Sprite},${2: cc.Sprite},${3: cc.Sprite},${4: cc.Sprite},${5: cc.Label},${6: cc.Label})" },{ "trigger": "f_initWithMaskSprite(cc.Sprite, cc.Sprite, cc.Sprite, cc.Sprite):ret (retunr value: bool):#bool [ControlSwitch]", "contents": "initWithMaskSprite(${1:cc.Sprite},${2: cc.Sprite},${3: cc.Sprite},${4: cc.Sprite})" },{ "trigger": "s_initWithMaskSprite(sprite:#cc.Sprite,sprite:#cc.Sprite,sprite:#cc.Sprite,sprite:#cc.Sprite,label:#cc.Label,label:#cc.Label):ret (retunr value: bool):#bool [ControlSwitch]", "contents": "initWithMaskSprite(${1:sprite:#cc.Sprite},${2:sprite:#cc.Sprite},${3:sprite:#cc.Sprite},${4:sprite:#cc.Sprite},${5:label:#cc.Label},${6:label:#cc.Label})" },{ "trigger": "s_hasMoved():ret (return value: bool):#bool [ControlSwitch]", "contents": "hasMoved()" },{ "trigger": "s_locationFromTouch(touch:#cc.Touch):ret (return value: cc.Vec2):#Vec2 [ControlSwitch]", "contents": "locationFromTouch(${1:touch:#cc.Touch})" },{ "trigger": "f_create(cc.Sprite, cc.Sprite, cc.Sprite, cc.Sprite):ret (retunr value: cc.ControlSwitch):#ControlSwitch [ControlSwitch]", "contents": "create(${1:cc.Sprite},${2: cc.Sprite},${3: cc.Sprite},${4: cc.Sprite})" },{ "trigger": "f_create(cc.Sprite, cc.Sprite, cc.Sprite, cc.Sprite, cc.Label, cc.Label):ret (retunr value: cc.ControlSwitch):#ControlSwitch [ControlSwitch]", "contents": "create(${1:cc.Sprite},${2: cc.Sprite},${3: cc.Sprite},${4: cc.Sprite},${5: cc.Label},${6: cc.Label})" },{ "trigger": "s_create(sprite:#cc.Sprite,sprite:#cc.Sprite,sprite:#cc.Sprite,sprite:#cc.Sprite,label:#cc.Label,label:#cc.Label):ret (retunr value: cc.ControlSwitch):#ControlSwitch [ControlSwitch]", "contents": "create(${1:sprite:#cc.Sprite},${2:sprite:#cc.Sprite},${3:sprite:#cc.Sprite},${4:sprite:#cc.Sprite},${5:label:#cc.Label},${6:label:#cc.Label})" },{ "trigger": "s_onTouchMoved(touch:#cc.Touch,event:#cc.Event):void [ControlSwitch]", "contents": "onTouchMoved(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_onTouchEnded(touch:#cc.Touch,event:#cc.Event):void [ControlSwitch]", "contents": "onTouchEnded(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_onTouchCancelled(touch:#cc.Touch,event:#cc.Event):void [ControlSwitch]", "contents": "onTouchCancelled(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_onTouchBegan(touch:#cc.Touch,event:#cc.Event):ret (return value: bool):#bool [ControlSwitch]", "contents": "onTouchBegan(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_ControlSwitch():void [ControlSwitch]", "contents": "ControlSwitch()" },{ "trigger": "s_init():ret (return value: bool):#bool [MovementBoneData]", "contents": "init()" },{ "trigger": "s_getFrameData(int:#int):ret (return value: ccs.FrameData):#FrameData [MovementBoneData]", "contents": "getFrameData(${1:int:#int})" },{ "trigger": "s_addFrameData(framedata:#ccs.FrameData):void [MovementBoneData]", "contents": "addFrameData(${1:framedata:#ccs.FrameData})" },{ "trigger": "s_create():ret (return value: ccs.MovementBoneData):#MovementBoneData [MovementBoneData]", "contents": "create()" },{ "trigger": "s_MovementBoneData():void [MovementBoneData]", "contents": "MovementBoneData()" },{ "trigger": "s_getRadius():ret (return value: float):#float [PhysicsShapeCircle]", "contents": "getRadius()" },{ "trigger": "s_create(float:#float,physicsmaterial:#cc.PhysicsMaterial,vec2:#cc.Vec2):ret (return value: cc.PhysicsShapeCircle):#PhysicsShapeCircle [PhysicsShapeCircle]", "contents": "create(${1:float:#float},${2:physicsmaterial:#cc.PhysicsMaterial},${3:vec2:#cc.Vec2})" },{ "trigger": "s_calculateArea(float:#float):ret (return value: float):#float [PhysicsShapeCircle]", "contents": "calculateArea(${1:float:#float})" },{ "trigger": "s_calculateMoment(float:#float,float:#float,vec2:#cc.Vec2):ret (return value: float):#float [PhysicsShapeCircle]", "contents": "calculateMoment(${1:float:#float},${2:float:#float},${3:vec2:#cc.Vec2})" },{ "trigger": "s_getOffset():ret (return value: cc.Vec2):#Vec2 [PhysicsShapeCircle]", "contents": "getOffset()" },{ "trigger": "s_calculateDefaultMoment():ret (return value: float):#float [PhysicsShapeCircle]", "contents": "calculateDefaultMoment()" },{ "trigger": "s_clone():ret (return value: cc.EventListenerTouchAllAtOnce):#EventListenerTouchAllAtOnce [EventListenerTouchAllAtOnce]", "contents": "clone()" },{ "trigger": "s_checkAvailable():ret (return value: bool):#bool [EventListenerTouchAllAtOnce]", "contents": "checkAvailable()" },{ "trigger": "s_moveAnimationsFromNode(node:#cc.Node,node:#cc.Node):void [CCBAnimationManager]", "contents": "moveAnimationsFromNode(${1:node:#cc.Node},${2:node:#cc.Node})" },{ "trigger": "s_setAutoPlaySequenceId(int:#int):void [CCBAnimationManager]", "contents": "setAutoPlaySequenceId(${1:int:#int})" },{ "trigger": "s_getDocumentCallbackNames():ret (return value: array_table):#array_table [CCBAnimationManager]", "contents": "getDocumentCallbackNames()" },{ "trigger": "s_actionForSoundChannel(ccbsequenceproperty:#cc.CCBSequenceProperty):ret (return value: cc.Sequence):#Sequence [CCBAnimationManager]", "contents": "actionForSoundChannel(${1:ccbsequenceproperty:#cc.CCBSequenceProperty})" },{ "trigger": "s_setBaseValue(value:#cc.Value,node:#cc.Node,str:#string):void [CCBAnimationManager]", "contents": "setBaseValue(${1:value:#cc.Value},${2:node:#cc.Node},${3:str:#string})" },{ "trigger": "s_getDocumentOutletNodes():ret (return value: array_table):#array_table [CCBAnimationManager]", "contents": "getDocumentOutletNodes()" },{ "trigger": "s_getLastCompletedSequenceName():ret (return value: string):#string [CCBAnimationManager]", "contents": "getLastCompletedSequenceName()" },{ "trigger": "s_setRootNode(node:#cc.Node):void [CCBAnimationManager]", "contents": "setRootNode(${1:node:#cc.Node})" },{ "trigger": "s_runAnimationsForSequenceNamedTweenDuration(char:#char,float:#float):void [CCBAnimationManager]", "contents": "runAnimationsForSequenceNamedTweenDuration(${1:char:#char},${2:float:#float})" },{ "trigger": "s_addDocumentOutletName(str:#string):void [CCBAnimationManager]", "contents": "addDocumentOutletName(${1:str:#string})" },{ "trigger": "s_getSequences():ret (return value: array_table):#array_table [CCBAnimationManager]", "contents": "getSequences()" },{ "trigger": "s_getRootContainerSize():ret (return value: size_table):#size_table [CCBAnimationManager]", "contents": "getRootContainerSize()" },{ "trigger": "s_setDocumentControllerName(str:#string):void [CCBAnimationManager]", "contents": "setDocumentControllerName(${1:str:#string})" },{ "trigger": "s_setObject(ref:#cc.Ref,node:#cc.Node,str:#string):void [CCBAnimationManager]", "contents": "setObject(${1:ref:#cc.Ref},${2:node:#cc.Node},${3:str:#string})" },{ "trigger": "s_getContainerSize(node:#cc.Node):ret (return value: size_table):#size_table [CCBAnimationManager]", "contents": "getContainerSize(${1:node:#cc.Node})" },{ "trigger": "s_actionForCallbackChannel(ccbsequenceproperty:#cc.CCBSequenceProperty):ret (return value: cc.Sequence):#Sequence [CCBAnimationManager]", "contents": "actionForCallbackChannel(${1:ccbsequenceproperty:#cc.CCBSequenceProperty})" },{ "trigger": "s_getDocumentOutletNames():ret (return value: array_table):#array_table [CCBAnimationManager]", "contents": "getDocumentOutletNames()" },{ "trigger": "s_addDocumentCallbackControlEvents(eventtype:#cc.Control::EventType):void [CCBAnimationManager]", "contents": "addDocumentCallbackControlEvents(${1:eventtype:#cc.Control::EventType})" },{ "trigger": "s_init():ret (return value: bool):#bool [CCBAnimationManager]", "contents": "init()" },{ "trigger": "s_getKeyframeCallbacks():ret (return value: array_table):#array_table [CCBAnimationManager]", "contents": "getKeyframeCallbacks()" },{ "trigger": "s_getDocumentCallbackControlEvents():ret (return value: array_table):#array_table [CCBAnimationManager]", "contents": "getDocumentCallbackControlEvents()" },{ "trigger": "s_setRootContainerSize(size:#size_table):void [CCBAnimationManager]", "contents": "setRootContainerSize(${1:size:#size_table})" },{ "trigger": "s_runAnimationsForSequenceIdTweenDuration(int:#int,float:#float):void [CCBAnimationManager]", "contents": "runAnimationsForSequenceIdTweenDuration(${1:int:#int},${2:float:#float})" },{ "trigger": "s_getRunningSequenceName():ret (return value: char):#char [CCBAnimationManager]", "contents": "getRunningSequenceName()" },{ "trigger": "s_getAutoPlaySequenceId():ret (return value: int):#int [CCBAnimationManager]", "contents": "getAutoPlaySequenceId()" },{ "trigger": "s_addDocumentCallbackName(str:#string):void [CCBAnimationManager]", "contents": "addDocumentCallbackName(${1:str:#string})" },{ "trigger": "s_getRootNode():ret (return value: cc.Node):#Node [CCBAnimationManager]", "contents": "getRootNode()" },{ "trigger": "s_addDocumentOutletNode(node:#cc.Node):void [CCBAnimationManager]", "contents": "addDocumentOutletNode(${1:node:#cc.Node})" },{ "trigger": "s_getSequenceDuration(char:#char):ret (return value: float):#float [CCBAnimationManager]", "contents": "getSequenceDuration(${1:char:#char})" },{ "trigger": "s_addDocumentCallbackNode(node:#cc.Node):void [CCBAnimationManager]", "contents": "addDocumentCallbackNode(${1:node:#cc.Node})" },{ "trigger": "s_runAnimationsForSequenceNamed(char:#char):void [CCBAnimationManager]", "contents": "runAnimationsForSequenceNamed(${1:char:#char})" },{ "trigger": "s_getSequenceId(char:#char):ret (return value: int):#int [CCBAnimationManager]", "contents": "getSequenceId(${1:char:#char})" },{ "trigger": "s_getDocumentCallbackNodes():ret (return value: array_table):#array_table [CCBAnimationManager]", "contents": "getDocumentCallbackNodes()" },{ "trigger": "s_setSequences(array:#array_table):void [CCBAnimationManager]", "contents": "setSequences(${1:array:#array_table})" },{ "trigger": "s_debug():void [CCBAnimationManager]", "contents": "debug()" },{ "trigger": "s_getDocumentControllerName():ret (return value: string):#string [CCBAnimationManager]", "contents": "getDocumentControllerName()" },{ "trigger": "s_CCBAnimationManager():void [CCBAnimationManager]", "contents": "CCBAnimationManager()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseQuadraticActionOut):#EaseQuadraticActionOut [EaseQuadraticActionOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseQuadraticActionOut):#EaseQuadraticActionOut [EaseQuadraticActionOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseQuadraticActionOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseQuadraticActionOut):#EaseQuadraticActionOut [EaseQuadraticActionOut]", "contents": "reverse()" },{ "trigger": "s_getDisabledColor():ret (return value: color3b_table):#color3b_table [MenuItemLabel]", "contents": "getDisabledColor()" },{ "trigger": "s_setString(str:#string):void [MenuItemLabel]", "contents": "setString(${1:str:#string})" },{ "trigger": "s_setLabel(node:#cc.Node):void [MenuItemLabel]", "contents": "setLabel(${1:node:#cc.Node})" },{ "trigger": "s_setDisabledColor(color3b:#color3b_table):void [MenuItemLabel]", "contents": "setDisabledColor(${1:color3b:#color3b_table})" },{ "trigger": "s_getLabel():ret (return value: cc.Node):#Node [MenuItemLabel]", "contents": "getLabel()" },{ "trigger": "s_setEnabled(bool:#bool):void [MenuItemLabel]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_activate():void [MenuItemLabel]", "contents": "activate()" },{ "trigger": "s_unselected():void [MenuItemLabel]", "contents": "unselected()" },{ "trigger": "s_selected():void [MenuItemLabel]", "contents": "selected()" },{ "trigger": "s_setGridSize(size:#size_table):void [GridBase]", "contents": "setGridSize(${1:size:#size_table})" },{ "trigger": "s_calculateVertexPoints():void [GridBase]", "contents": "calculateVertexPoints()" },{ "trigger": "s_afterDraw(node:#cc.Node):void [GridBase]", "contents": "afterDraw(${1:node:#cc.Node})" },{ "trigger": "s_beforeDraw():void [GridBase]", "contents": "beforeDraw()" },{ "trigger": "s_isTextureFlipped():ret (return value: bool):#bool [GridBase]", "contents": "isTextureFlipped()" },{ "trigger": "s_getGridSize():ret (return value: size_table):#size_table [GridBase]", "contents": "getGridSize()" },{ "trigger": "s_getStep():ret (return value: cc.Vec2):#Vec2 [GridBase]", "contents": "getStep()" },{ "trigger": "s_set2DProjection():void [GridBase]", "contents": "set2DProjection()" },{ "trigger": "s_setStep(vec2:#cc.Vec2):void [GridBase]", "contents": "setStep(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setTextureFlipped(bool:#bool):void [GridBase]", "contents": "setTextureFlipped(${1:bool:#bool})" },{ "trigger": "s_blit():void [GridBase]", "contents": "blit()" },{ "trigger": "s_setActive(bool:#bool):void [GridBase]", "contents": "setActive(${1:bool:#bool})" },{ "trigger": "s_getReuseGrid():ret (return value: int):#int [GridBase]", "contents": "getReuseGrid()" },{ "trigger": "f_initWithSize(size_table):ret (retunr value: bool):#bool [GridBase]", "contents": "initWithSize(${1:size_table})" },{ "trigger": "f_initWithSize(size_table, cc.Texture2D, bool):ret (retunr value: bool):#bool [GridBase]", "contents": "initWithSize(${1:size_table},${2: cc.Texture2D},${3: bool})" },{ "trigger": "s_initWithSize(size:#size_table,texture2d:#cc.Texture2D,bool:#bool):ret (retunr value: bool):#bool [GridBase]", "contents": "initWithSize(${1:size:#size_table},${2:texture2d:#cc.Texture2D},${3:bool:#bool})" },{ "trigger": "s_setReuseGrid(int:#int):void [GridBase]", "contents": "setReuseGrid(${1:int:#int})" },{ "trigger": "s_isActive():ret (return value: bool):#bool [GridBase]", "contents": "isActive()" },{ "trigger": "s_reuse():void [GridBase]", "contents": "reuse()" },{ "trigger": "f_create(size_table):ret (retunr value: cc.GridBase):#GridBase [GridBase]", "contents": "create(${1:size_table})" },{ "trigger": "f_create(size_table, cc.Texture2D, bool):ret (retunr value: cc.GridBase):#GridBase [GridBase]", "contents": "create(${1:size_table},${2: cc.Texture2D},${3: bool})" },{ "trigger": "s_create(size:#size_table,texture2d:#cc.Texture2D,bool:#bool):ret (retunr value: cc.GridBase):#GridBase [GridBase]", "contents": "create(${1:size:#size_table},${2:texture2d:#cc.Texture2D},${3:bool:#bool})" },{ "trigger": "s_setMinusSprite(sprite:#cc.Sprite):void [ControlStepper]", "contents": "setMinusSprite(${1:sprite:#cc.Sprite})" },{ "trigger": "s_getMinusLabel():ret (return value: cc.Label):#Label [ControlStepper]", "contents": "getMinusLabel()" },{ "trigger": "s_setWraps(bool:#bool):void [ControlStepper]", "contents": "setWraps(${1:bool:#bool})" },{ "trigger": "s_isContinuous():ret (return value: bool):#bool [ControlStepper]", "contents": "isContinuous()" },{ "trigger": "s_getMinusSprite():ret (return value: cc.Sprite):#Sprite [ControlStepper]", "contents": "getMinusSprite()" },{ "trigger": "s_updateLayoutUsingTouchLocation(vec2:#cc.Vec2):void [ControlStepper]", "contents": "updateLayoutUsingTouchLocation(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setValueWithSendingEvent(double:#double,bool:#bool):void [ControlStepper]", "contents": "setValueWithSendingEvent(${1:double:#double},${2:bool:#bool})" },{ "trigger": "s_getPlusLabel():ret (return value: cc.Label):#Label [ControlStepper]", "contents": "getPlusLabel()" },{ "trigger": "s_stopAutorepeat():void [ControlStepper]", "contents": "stopAutorepeat()" },{ "trigger": "s_setMinimumValue(double:#double):void [ControlStepper]", "contents": "setMinimumValue(${1:double:#double})" },{ "trigger": "s_getPlusSprite():ret (return value: cc.Sprite):#Sprite [ControlStepper]", "contents": "getPlusSprite()" },{ "trigger": "s_setPlusSprite(sprite:#cc.Sprite):void [ControlStepper]", "contents": "setPlusSprite(${1:sprite:#cc.Sprite})" },{ "trigger": "s_setMinusLabel(label:#cc.Label):void [ControlStepper]", "contents": "setMinusLabel(${1:label:#cc.Label})" },{ "trigger": "s_setValue(double:#double):void [ControlStepper]", "contents": "setValue(${1:double:#double})" },{ "trigger": "s_setStepValue(double:#double):void [ControlStepper]", "contents": "setStepValue(${1:double:#double})" },{ "trigger": "s_setMaximumValue(double:#double):void [ControlStepper]", "contents": "setMaximumValue(${1:double:#double})" },{ "trigger": "s_update(float:#float):void [ControlStepper]", "contents": "update(${1:float:#float})" },{ "trigger": "s_startAutorepeat():void [ControlStepper]", "contents": "startAutorepeat()" },{ "trigger": "s_initWithMinusSpriteAndPlusSprite(sprite:#cc.Sprite,sprite:#cc.Sprite):ret (return value: bool):#bool [ControlStepper]", "contents": "initWithMinusSpriteAndPlusSprite(${1:sprite:#cc.Sprite},${2:sprite:#cc.Sprite})" },{ "trigger": "s_getValue():ret (return value: double):#double [ControlStepper]", "contents": "getValue()" },{ "trigger": "s_setPlusLabel(label:#cc.Label):void [ControlStepper]", "contents": "setPlusLabel(${1:label:#cc.Label})" },{ "trigger": "s_create(sprite:#cc.Sprite,sprite:#cc.Sprite):ret (return value: cc.ControlStepper):#ControlStepper [ControlStepper]", "contents": "create(${1:sprite:#cc.Sprite},${2:sprite:#cc.Sprite})" },{ "trigger": "s_onTouchMoved(touch:#cc.Touch,event:#cc.Event):void [ControlStepper]", "contents": "onTouchMoved(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_onTouchEnded(touch:#cc.Touch,event:#cc.Event):void [ControlStepper]", "contents": "onTouchEnded(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_onTouchBegan(touch:#cc.Touch,event:#cc.Event):ret (return value: bool):#bool [ControlStepper]", "contents": "onTouchBegan(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_ControlStepper():void [ControlStepper]", "contents": "ControlStepper()" },{ "trigger": "s_setEnabled(bool:#bool):void [ControlHuePicker]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_initWithTargetAndPos(node:#cc.Node,vec2:#cc.Vec2):ret (return value: bool):#bool [ControlHuePicker]", "contents": "initWithTargetAndPos(${1:node:#cc.Node},${2:vec2:#cc.Vec2})" },{ "trigger": "s_setHue(float:#float):void [ControlHuePicker]", "contents": "setHue(${1:float:#float})" },{ "trigger": "s_getStartPos():ret (return value: cc.Vec2):#Vec2 [ControlHuePicker]", "contents": "getStartPos()" },{ "trigger": "s_getHue():ret (return value: float):#float [ControlHuePicker]", "contents": "getHue()" },{ "trigger": "s_getSlider():ret (return value: cc.Sprite):#Sprite [ControlHuePicker]", "contents": "getSlider()" },{ "trigger": "s_setBackground(sprite:#cc.Sprite):void [ControlHuePicker]", "contents": "setBackground(${1:sprite:#cc.Sprite})" },{ "trigger": "s_setHuePercentage(float:#float):void [ControlHuePicker]", "contents": "setHuePercentage(${1:float:#float})" },{ "trigger": "s_getBackground():ret (return value: cc.Sprite):#Sprite [ControlHuePicker]", "contents": "getBackground()" },{ "trigger": "s_getHuePercentage():ret (return value: float):#float [ControlHuePicker]", "contents": "getHuePercentage()" },{ "trigger": "s_setSlider(sprite:#cc.Sprite):void [ControlHuePicker]", "contents": "setSlider(${1:sprite:#cc.Sprite})" },{ "trigger": "s_create(node:#cc.Node,vec2:#cc.Vec2):ret (return value: cc.ControlHuePicker):#ControlHuePicker [ControlHuePicker]", "contents": "create(${1:node:#cc.Node},${2:vec2:#cc.Vec2})" },{ "trigger": "s_onTouchMoved(touch:#cc.Touch,event:#cc.Event):void [ControlHuePicker]", "contents": "onTouchMoved(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_onTouchBegan(touch:#cc.Touch,event:#cc.Event):ret (return value: bool):#bool [ControlHuePicker]", "contents": "onTouchBegan(${1:touch:#cc.Touch},${2:event:#cc.Event})" },{ "trigger": "s_ControlHuePicker():void [ControlHuePicker]", "contents": "ControlHuePicker()" },{ "trigger": "s_create():ret (return value: ccs.ArmatureDisplayData):#ArmatureDisplayData [ArmatureDisplayData]", "contents": "create()" },{ "trigger": "s_ArmatureDisplayData():void [ArmatureDisplayData]", "contents": "ArmatureDisplayData()" },{ "trigger": "s_create():ret (return value: cc.RemoveSelf):#RemoveSelf [RemoveSelf]", "contents": "create()" },{ "trigger": "s_clone():ret (return value: cc.RemoveSelf):#RemoveSelf [RemoveSelf]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [RemoveSelf]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.RemoveSelf):#RemoveSelf [RemoveSelf]", "contents": "reverse()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseQuarticActionOut):#EaseQuarticActionOut [EaseQuarticActionOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseQuarticActionOut):#EaseQuarticActionOut [EaseQuarticActionOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseQuarticActionOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseQuarticActionOut):#EaseQuarticActionOut [EaseQuarticActionOut]", "contents": "reverse()" },{ "trigger": "f_create(cc.ActionInterval):ret (retunr value: cc.EaseElasticIn):#EaseElasticIn [EaseElasticIn]", "contents": "create(${1:cc.ActionInterval})" },{ "trigger": "f_create(cc.ActionInterval, float):ret (retunr value: cc.EaseElasticIn):#EaseElasticIn [EaseElasticIn]", "contents": "create(${1:cc.ActionInterval},${2: float})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval,float:#float):ret (retunr value: cc.EaseElasticIn):#EaseElasticIn [EaseElasticIn]", "contents": "create(${1:actioninterval:#cc.ActionInterval},${2:float:#float})" },{ "trigger": "s_clone():ret (return value: cc.EaseElasticIn):#EaseElasticIn [EaseElasticIn]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseElasticIn]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseElastic):#EaseElastic [EaseElasticIn]", "contents": "reverse()" },{ "trigger": "s_getText():ret (return value: char):#char [EditBox]", "contents": "getText()" },{ "trigger": "s_setPlaceholderFontName(char:#char):void [EditBox]", "contents": "setPlaceholderFontName(${1:char:#char})" },{ "trigger": "s_getPlaceHolder():ret (return value: char):#char [EditBox]", "contents": "getPlaceHolder()" },{ "trigger": "s_setFontName(char:#char):void [EditBox]", "contents": "setFontName(${1:char:#char})" },{ "trigger": "s_setPlaceholderFontSize(int:#int):void [EditBox]", "contents": "setPlaceholderFontSize(${1:int:#int})" },{ "trigger": "s_setInputMode(inputmode:#cc.EditBox::InputMode):void [EditBox]", "contents": "setInputMode(${1:inputmode:#cc.EditBox::InputMode})" },{ "trigger": "s_setPlaceholderFontColor(color3b:#color3b_table):void [EditBox]", "contents": "setPlaceholderFontColor(${1:color3b:#color3b_table})" },{ "trigger": "s_setFontColor(color3b:#color3b_table):void [EditBox]", "contents": "setFontColor(${1:color3b:#color3b_table})" },{ "trigger": "s_setPlaceholderFont(char:#char,int:#int):void [EditBox]", "contents": "setPlaceholderFont(${1:char:#char},${2:int:#int})" },{ "trigger": "s_setFontSize(int:#int):void [EditBox]", "contents": "setFontSize(${1:int:#int})" },{ "trigger": "s_initWithSizeAndBackgroundSprite(size:#size_table,scale9sprite:#cc.Scale9Sprite):ret (return value: bool):#bool [EditBox]", "contents": "initWithSizeAndBackgroundSprite(${1:size:#size_table},${2:scale9sprite:#cc.Scale9Sprite})" },{ "trigger": "s_setPlaceHolder(char:#char):void [EditBox]", "contents": "setPlaceHolder(${1:char:#char})" },{ "trigger": "s_setReturnType(keyboardreturntype:#cc.EditBox::KeyboardReturnType):void [EditBox]", "contents": "setReturnType(${1:keyboardreturntype:#cc.EditBox::KeyboardReturnType})" },{ "trigger": "s_setInputFlag(inputflag:#cc.EditBox::InputFlag):void [EditBox]", "contents": "setInputFlag(${1:inputflag:#cc.EditBox::InputFlag})" },{ "trigger": "s_getMaxLength():ret (return value: int):#int [EditBox]", "contents": "getMaxLength()" },{ "trigger": "s_setText(char:#char):void [EditBox]", "contents": "setText(${1:char:#char})" },{ "trigger": "s_setMaxLength(int:#int):void [EditBox]", "contents": "setMaxLength(${1:int:#int})" },{ "trigger": "s_setFont(char:#char,int:#int):void [EditBox]", "contents": "setFont(${1:char:#char},${2:int:#int})" },{ "trigger": "s_create(size:#size_table,scale9sprite:#cc.Scale9Sprite,scale9sprite:#cc.Scale9Sprite,scale9sprite:#cc.Scale9Sprite):ret (return value: cc.EditBox):#EditBox [EditBox]", "contents": "create(${1:size:#size_table},${2:scale9sprite:#cc.Scale9Sprite},${3:scale9sprite:#cc.Scale9Sprite},${4:scale9sprite:#cc.Scale9Sprite})" },{ "trigger": "s_setAnchorPoint(vec2:#cc.Vec2):void [EditBox]", "contents": "setAnchorPoint(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setPosition(vec2:#cc.Vec2):void [EditBox]", "contents": "setPosition(${1:vec2:#cc.Vec2})" },{ "trigger": "s_setVisible(bool:#bool):void [EditBox]", "contents": "setVisible(${1:bool:#bool})" },{ "trigger": "s_setContentSize(size:#size_table):void [EditBox]", "contents": "setContentSize(${1:size:#size_table})" },{ "trigger": "s_EditBox():void [EditBox]", "contents": "EditBox()" },{ "trigger": "s_create(float:#float,size:#size_table):ret (return value: cc.FadeOutDownTiles):#FadeOutDownTiles [FadeOutDownTiles]", "contents": "create(${1:float:#float},${2:size:#size_table})" },{ "trigger": "s_clone():ret (return value: cc.FadeOutDownTiles):#FadeOutDownTiles [FadeOutDownTiles]", "contents": "clone()" },{ "trigger": "s_testFunc(size:#size_table,float:#float):ret (return value: float):#float [FadeOutDownTiles]", "contents": "testFunc(${1:size:#size_table},${2:float:#float})" },{ "trigger": "s_init(int:#int,color3b:#color3b_table,char char:#unsigned,node:#cc.Node):ret (return value: bool):#bool [RichElementCustomNode]", "contents": "init(${1:int:#int},${2:color3b:#color3b_table},${3:char char:#unsigned},${4:node:#cc.Node})" },{ "trigger": "s_create(int:#int,color3b:#color3b_table,char char:#unsigned,node:#cc.Node):ret (return value: ccui.RichElementCustomNode):#RichElementCustomNode [RichElementCustomNode]", "contents": "create(${1:int:#int},${2:color3b:#color3b_table},${3:char char:#unsigned},${4:node:#cc.Node})" },{ "trigger": "s_RichElementCustomNode():void [RichElementCustomNode]", "contents": "RichElementCustomNode()" },{ "trigger": "ScrollViewMoveDirm_none [ScrollViewMoveDir]", "contents": "ScrollViewMoveDir.none" },{ "trigger": "ScrollViewMoveDirm_up [ScrollViewMoveDir]", "contents": "ScrollViewMoveDir.up" },{ "trigger": "ScrollViewMoveDirm_down [ScrollViewMoveDir]", "contents": "ScrollViewMoveDir.down" },{ "trigger": "ScrollViewMoveDirm_left [ScrollViewMoveDir]", "contents": "ScrollViewMoveDir.left" },{ "trigger": "ScrollViewMoveDirm_right [ScrollViewMoveDir]", "contents": "ScrollViewMoveDir.right" },{ "trigger": "s_hitTest(physicsshape:#cc.PhysicsShape,physicsshape:#cc.PhysicsShape):ret (return value: bool):#bool [EventListenerPhysicsContactWithGroup]", "contents": "hitTest(${1:physicsshape:#cc.PhysicsShape},${2:physicsshape:#cc.PhysicsShape})" },{ "trigger": "s_create(int:#int):ret (return value: cc.EventListenerPhysicsContactWithGroup):#EventListenerPhysicsContactWithGroup [EventListenerPhysicsContactWithGroup]", "contents": "create(${1:int:#int})" },{ "trigger": "s_clone():ret (return value: cc.EventListenerPhysicsContactWithGroup):#EventListenerPhysicsContactWithGroup [EventListenerPhysicsContactWithGroup]", "contents": "clone()" },{ "trigger": "s_create(float:#float,scene:#cc.Scene):ret (return value: cc.TransitionFadeDown):#TransitionFadeDown [TransitionFadeDown]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene})" },{ "trigger": "s_actionWithSize(size:#size_table):ret (return value: cc.ActionInterval):#ActionInterval [TransitionFadeDown]", "contents": "actionWithSize(${1:size:#size_table})" },{ "trigger": "ccm_Ref [lua_cocos2dx_auto_api]", "contents": "cc.Ref" },{ "trigger": "ccm_Console [lua_cocos2dx_auto_api]", "contents": "cc.Console" },{ "trigger": "ccm_EventListener [lua_cocos2dx_auto_api]", "contents": "cc.EventListener" },{ "trigger": "ccm_Event [lua_cocos2dx_auto_api]", "contents": "cc.Event" },{ "trigger": "ccm_EventDispatcher [lua_cocos2dx_auto_api]", "contents": "cc.EventDispatcher" },{ "trigger": "ccm_Touch [lua_cocos2dx_auto_api]", "contents": "cc.Touch" },{ "trigger": "ccm_EventTouch [lua_cocos2dx_auto_api]", "contents": "cc.EventTouch" },{ "trigger": "ccm_EventKeyboard [lua_cocos2dx_auto_api]", "contents": "cc.EventKeyboard" },{ "trigger": "ccm_Texture2D [lua_cocos2dx_auto_api]", "contents": "cc.Texture2D" },{ "trigger": "ccm_Node [lua_cocos2dx_auto_api]", "contents": "cc.Node" },{ "trigger": "ccm_AtlasNode [lua_cocos2dx_auto_api]", "contents": "cc.AtlasNode" },{ "trigger": "ccm_LabelAtlas [lua_cocos2dx_auto_api]", "contents": "cc.LabelAtlas" },{ "trigger": "ccm_Director [lua_cocos2dx_auto_api]", "contents": "cc.Director" },{ "trigger": "ccm_Timer [lua_cocos2dx_auto_api]", "contents": "cc.Timer" },{ "trigger": "ccm_Scheduler [lua_cocos2dx_auto_api]", "contents": "cc.Scheduler" },{ "trigger": "ccm_FileUtils [lua_cocos2dx_auto_api]", "contents": "cc.FileUtils" },{ "trigger": "ccm_UserDefault [lua_cocos2dx_auto_api]", "contents": "cc.UserDefault" },{ "trigger": "ccm_EventListenerTouchOneByOne [lua_cocos2dx_auto_api]", "contents": "cc.EventListenerTouchOneByOne" },{ "trigger": "ccm_EventListenerTouchAllAtOnce [lua_cocos2dx_auto_api]", "contents": "cc.EventListenerTouchAllAtOnce" },{ "trigger": "ccm_EventListenerKeyboard [lua_cocos2dx_auto_api]", "contents": "cc.EventListenerKeyboard" },{ "trigger": "ccm_EventMouse [lua_cocos2dx_auto_api]", "contents": "cc.EventMouse" },{ "trigger": "ccm_EventListenerMouse [lua_cocos2dx_auto_api]", "contents": "cc.EventListenerMouse" },{ "trigger": "ccm_EventAcceleration [lua_cocos2dx_auto_api]", "contents": "cc.EventAcceleration" },{ "trigger": "ccm_EventListenerAcceleration [lua_cocos2dx_auto_api]", "contents": "cc.EventListenerAcceleration" },{ "trigger": "ccm_EventCustom [lua_cocos2dx_auto_api]", "contents": "cc.EventCustom" },{ "trigger": "ccm_EventListenerCustom [lua_cocos2dx_auto_api]", "contents": "cc.EventListenerCustom" },{ "trigger": "ccm_EventFocus [lua_cocos2dx_auto_api]", "contents": "cc.EventFocus" },{ "trigger": "ccm_EventListenerFocus [lua_cocos2dx_auto_api]", "contents": "cc.EventListenerFocus" },{ "trigger": "ccm_Action [lua_cocos2dx_auto_api]", "contents": "cc.Action" },{ "trigger": "ccm_FiniteTimeAction [lua_cocos2dx_auto_api]", "contents": "cc.FiniteTimeAction" },{ "trigger": "ccm_Speed [lua_cocos2dx_auto_api]", "contents": "cc.Speed" },{ "trigger": "ccm_Follow [lua_cocos2dx_auto_api]", "contents": "cc.Follow" },{ "trigger": "ccm_SpriteFrame [lua_cocos2dx_auto_api]", "contents": "cc.SpriteFrame" },{ "trigger": "ccm_AnimationFrame [lua_cocos2dx_auto_api]", "contents": "cc.AnimationFrame" },{ "trigger": "ccm_Animation [lua_cocos2dx_auto_api]", "contents": "cc.Animation" },{ "trigger": "ccm_ActionInterval [lua_cocos2dx_auto_api]", "contents": "cc.ActionInterval" },{ "trigger": "ccm_Sequence [lua_cocos2dx_auto_api]", "contents": "cc.Sequence" },{ "trigger": "ccm_Repeat [lua_cocos2dx_auto_api]", "contents": "cc.Repeat" },{ "trigger": "ccm_RepeatForever [lua_cocos2dx_auto_api]", "contents": "cc.RepeatForever" },{ "trigger": "ccm_Spawn [lua_cocos2dx_auto_api]", "contents": "cc.Spawn" },{ "trigger": "ccm_RotateTo [lua_cocos2dx_auto_api]", "contents": "cc.RotateTo" },{ "trigger": "ccm_RotateBy [lua_cocos2dx_auto_api]", "contents": "cc.RotateBy" },{ "trigger": "ccm_MoveBy [lua_cocos2dx_auto_api]", "contents": "cc.MoveBy" },{ "trigger": "ccm_MoveTo [lua_cocos2dx_auto_api]", "contents": "cc.MoveTo" },{ "trigger": "ccm_SkewTo [lua_cocos2dx_auto_api]", "contents": "cc.SkewTo" },{ "trigger": "ccm_SkewBy [lua_cocos2dx_auto_api]", "contents": "cc.SkewBy" },{ "trigger": "ccm_JumpBy [lua_cocos2dx_auto_api]", "contents": "cc.JumpBy" },{ "trigger": "ccm_JumpTo [lua_cocos2dx_auto_api]", "contents": "cc.JumpTo" },{ "trigger": "ccm_BezierBy [lua_cocos2dx_auto_api]", "contents": "cc.BezierBy" },{ "trigger": "ccm_BezierTo [lua_cocos2dx_auto_api]", "contents": "cc.BezierTo" },{ "trigger": "ccm_ScaleTo [lua_cocos2dx_auto_api]", "contents": "cc.ScaleTo" },{ "trigger": "ccm_ScaleBy [lua_cocos2dx_auto_api]", "contents": "cc.ScaleBy" },{ "trigger": "ccm_Blink [lua_cocos2dx_auto_api]", "contents": "cc.Blink" },{ "trigger": "ccm_FadeTo [lua_cocos2dx_auto_api]", "contents": "cc.FadeTo" },{ "trigger": "ccm_FadeIn [lua_cocos2dx_auto_api]", "contents": "cc.FadeIn" },{ "trigger": "ccm_FadeOut [lua_cocos2dx_auto_api]", "contents": "cc.FadeOut" },{ "trigger": "ccm_TintTo [lua_cocos2dx_auto_api]", "contents": "cc.TintTo" },{ "trigger": "ccm_TintBy [lua_cocos2dx_auto_api]", "contents": "cc.TintBy" },{ "trigger": "ccm_DelayTime [lua_cocos2dx_auto_api]", "contents": "cc.DelayTime" },{ "trigger": "ccm_Animate [lua_cocos2dx_auto_api]", "contents": "cc.Animate" },{ "trigger": "ccm_TargetedAction [lua_cocos2dx_auto_api]", "contents": "cc.TargetedAction" },{ "trigger": "ccm_ActionCamera [lua_cocos2dx_auto_api]", "contents": "cc.ActionCamera" },{ "trigger": "ccm_OrbitCamera [lua_cocos2dx_auto_api]", "contents": "cc.OrbitCamera" },{ "trigger": "ccm_ActionManager [lua_cocos2dx_auto_api]", "contents": "cc.ActionManager" },{ "trigger": "ccm_ActionEase [lua_cocos2dx_auto_api]", "contents": "cc.ActionEase" },{ "trigger": "ccm_EaseRateAction [lua_cocos2dx_auto_api]", "contents": "cc.EaseRateAction" },{ "trigger": "ccm_EaseIn [lua_cocos2dx_auto_api]", "contents": "cc.EaseIn" },{ "trigger": "ccm_EaseOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseOut" },{ "trigger": "ccm_EaseInOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseInOut" },{ "trigger": "ccm_EaseExponentialIn [lua_cocos2dx_auto_api]", "contents": "cc.EaseExponentialIn" },{ "trigger": "ccm_EaseExponentialOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseExponentialOut" },{ "trigger": "ccm_EaseExponentialInOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseExponentialInOut" },{ "trigger": "ccm_EaseSineIn [lua_cocos2dx_auto_api]", "contents": "cc.EaseSineIn" },{ "trigger": "ccm_EaseSineOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseSineOut" },{ "trigger": "ccm_EaseSineInOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseSineInOut" },{ "trigger": "ccm_EaseElastic [lua_cocos2dx_auto_api]", "contents": "cc.EaseElastic" },{ "trigger": "ccm_EaseElasticIn [lua_cocos2dx_auto_api]", "contents": "cc.EaseElasticIn" },{ "trigger": "ccm_EaseElasticOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseElasticOut" },{ "trigger": "ccm_EaseElasticInOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseElasticInOut" },{ "trigger": "ccm_EaseBounce [lua_cocos2dx_auto_api]", "contents": "cc.EaseBounce" },{ "trigger": "ccm_EaseBounceIn [lua_cocos2dx_auto_api]", "contents": "cc.EaseBounceIn" },{ "trigger": "ccm_EaseBounceOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseBounceOut" },{ "trigger": "ccm_EaseBounceInOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseBounceInOut" },{ "trigger": "ccm_EaseBackIn [lua_cocos2dx_auto_api]", "contents": "cc.EaseBackIn" },{ "trigger": "ccm_EaseBackOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseBackOut" },{ "trigger": "ccm_EaseBackInOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseBackInOut" },{ "trigger": "ccm_EaseBezierAction [lua_cocos2dx_auto_api]", "contents": "cc.EaseBezierAction" },{ "trigger": "ccm_EaseQuadraticActionIn [lua_cocos2dx_auto_api]", "contents": "cc.EaseQuadraticActionIn" },{ "trigger": "ccm_EaseQuadraticActionOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseQuadraticActionOut" },{ "trigger": "ccm_EaseQuadraticActionInOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseQuadraticActionInOut" },{ "trigger": "ccm_EaseQuarticActionIn [lua_cocos2dx_auto_api]", "contents": "cc.EaseQuarticActionIn" },{ "trigger": "ccm_EaseQuarticActionOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseQuarticActionOut" },{ "trigger": "ccm_EaseQuarticActionInOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseQuarticActionInOut" },{ "trigger": "ccm_EaseQuinticActionIn [lua_cocos2dx_auto_api]", "contents": "cc.EaseQuinticActionIn" },{ "trigger": "ccm_EaseQuinticActionOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseQuinticActionOut" },{ "trigger": "ccm_EaseQuinticActionInOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseQuinticActionInOut" },{ "trigger": "ccm_EaseCircleActionIn [lua_cocos2dx_auto_api]", "contents": "cc.EaseCircleActionIn" },{ "trigger": "ccm_EaseCircleActionOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseCircleActionOut" },{ "trigger": "ccm_EaseCircleActionInOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseCircleActionInOut" },{ "trigger": "ccm_EaseCubicActionIn [lua_cocos2dx_auto_api]", "contents": "cc.EaseCubicActionIn" },{ "trigger": "ccm_EaseCubicActionOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseCubicActionOut" },{ "trigger": "ccm_EaseCubicActionInOut [lua_cocos2dx_auto_api]", "contents": "cc.EaseCubicActionInOut" },{ "trigger": "ccm_ActionInstant [lua_cocos2dx_auto_api]", "contents": "cc.ActionInstant" },{ "trigger": "ccm_Show [lua_cocos2dx_auto_api]", "contents": "cc.Show" },{ "trigger": "ccm_Hide [lua_cocos2dx_auto_api]", "contents": "cc.Hide" },{ "trigger": "ccm_ToggleVisibility [lua_cocos2dx_auto_api]", "contents": "cc.ToggleVisibility" },{ "trigger": "ccm_RemoveSelf [lua_cocos2dx_auto_api]", "contents": "cc.RemoveSelf" },{ "trigger": "ccm_FlipX [lua_cocos2dx_auto_api]", "contents": "cc.FlipX" },{ "trigger": "ccm_FlipY [lua_cocos2dx_auto_api]", "contents": "cc.FlipY" },{ "trigger": "ccm_Place [lua_cocos2dx_auto_api]", "contents": "cc.Place" },{ "trigger": "ccm_CallFunc [lua_cocos2dx_auto_api]", "contents": "cc.CallFunc" },{ "trigger": "ccm_GridAction [lua_cocos2dx_auto_api]", "contents": "cc.GridAction" },{ "trigger": "ccm_Grid3DAction [lua_cocos2dx_auto_api]", "contents": "cc.Grid3DAction" },{ "trigger": "ccm_TiledGrid3DAction [lua_cocos2dx_auto_api]", "contents": "cc.TiledGrid3DAction" },{ "trigger": "ccm_StopGrid [lua_cocos2dx_auto_api]", "contents": "cc.StopGrid" },{ "trigger": "ccm_ReuseGrid [lua_cocos2dx_auto_api]", "contents": "cc.ReuseGrid" },{ "trigger": "ccm_Waves3D [lua_cocos2dx_auto_api]", "contents": "cc.Waves3D" },{ "trigger": "ccm_FlipX3D [lua_cocos2dx_auto_api]", "contents": "cc.FlipX3D" },{ "trigger": "ccm_FlipY3D [lua_cocos2dx_auto_api]", "contents": "cc.FlipY3D" },{ "trigger": "ccm_Lens3D [lua_cocos2dx_auto_api]", "contents": "cc.Lens3D" },{ "trigger": "ccm_Ripple3D [lua_cocos2dx_auto_api]", "contents": "cc.Ripple3D" },{ "trigger": "ccm_Shaky3D [lua_cocos2dx_auto_api]", "contents": "cc.Shaky3D" },{ "trigger": "ccm_Liquid [lua_cocos2dx_auto_api]", "contents": "cc.Liquid" },{ "trigger": "ccm_Waves [lua_cocos2dx_auto_api]", "contents": "cc.Waves" },{ "trigger": "ccm_Twirl [lua_cocos2dx_auto_api]", "contents": "cc.Twirl" },{ "trigger": "ccm_PageTurn3D [lua_cocos2dx_auto_api]", "contents": "cc.PageTurn3D" },{ "trigger": "ccm_ProgressTo [lua_cocos2dx_auto_api]", "contents": "cc.ProgressTo" },{ "trigger": "ccm_ProgressFromTo [lua_cocos2dx_auto_api]", "contents": "cc.ProgressFromTo" },{ "trigger": "ccm_ShakyTiles3D [lua_cocos2dx_auto_api]", "contents": "cc.ShakyTiles3D" },{ "trigger": "ccm_ShatteredTiles3D [lua_cocos2dx_auto_api]", "contents": "cc.ShatteredTiles3D" },{ "trigger": "ccm_ShuffleTiles [lua_cocos2dx_auto_api]", "contents": "cc.ShuffleTiles" },{ "trigger": "ccm_FadeOutTRTiles [lua_cocos2dx_auto_api]", "contents": "cc.FadeOutTRTiles" },{ "trigger": "ccm_FadeOutBLTiles [lua_cocos2dx_auto_api]", "contents": "cc.FadeOutBLTiles" },{ "trigger": "ccm_FadeOutUpTiles [lua_cocos2dx_auto_api]", "contents": "cc.FadeOutUpTiles" },{ "trigger": "ccm_FadeOutDownTiles [lua_cocos2dx_auto_api]", "contents": "cc.FadeOutDownTiles" },{ "trigger": "ccm_TurnOffTiles [lua_cocos2dx_auto_api]", "contents": "cc.TurnOffTiles" },{ "trigger": "ccm_WavesTiles3D [lua_cocos2dx_auto_api]", "contents": "cc.WavesTiles3D" },{ "trigger": "ccm_JumpTiles3D [lua_cocos2dx_auto_api]", "contents": "cc.JumpTiles3D" },{ "trigger": "ccm_SplitRows [lua_cocos2dx_auto_api]", "contents": "cc.SplitRows" },{ "trigger": "ccm_SplitCols [lua_cocos2dx_auto_api]", "contents": "cc.SplitCols" },{ "trigger": "ccm_ActionTween [lua_cocos2dx_auto_api]", "contents": "cc.ActionTween" },{ "trigger": "ccm_CardinalSplineTo [lua_cocos2dx_auto_api]", "contents": "cc.CardinalSplineTo" },{ "trigger": "ccm_CardinalSplineBy [lua_cocos2dx_auto_api]", "contents": "cc.CardinalSplineBy" },{ "trigger": "ccm_CatmullRomTo [lua_cocos2dx_auto_api]", "contents": "cc.CatmullRomTo" },{ "trigger": "ccm_CatmullRomBy [lua_cocos2dx_auto_api]", "contents": "cc.CatmullRomBy" },{ "trigger": "ccm_DrawNode [lua_cocos2dx_auto_api]", "contents": "cc.DrawNode" },{ "trigger": "ccm_LabelTTF [lua_cocos2dx_auto_api]", "contents": "cc.LabelTTF" },{ "trigger": "ccm_GLProgram [lua_cocos2dx_auto_api]", "contents": "cc.GLProgram" },{ "trigger": "ccm_SpriteBatchNode [lua_cocos2dx_auto_api]", "contents": "cc.SpriteBatchNode" },{ "trigger": "ccm_Label [lua_cocos2dx_auto_api]", "contents": "cc.Label" },{ "trigger": "ccm_LabelBMFont [lua_cocos2dx_auto_api]", "contents": "cc.LabelBMFont" },{ "trigger": "ccm_Layer [lua_cocos2dx_auto_api]", "contents": "cc.Layer" },{ "trigger": "ccm_LayerColor [lua_cocos2dx_auto_api]", "contents": "cc.LayerColor" },{ "trigger": "ccm_LayerGradient [lua_cocos2dx_auto_api]", "contents": "cc.LayerGradient" },{ "trigger": "ccm_LayerMultiplex [lua_cocos2dx_auto_api]", "contents": "cc.LayerMultiplex" },{ "trigger": "ccm_Scene [lua_cocos2dx_auto_api]", "contents": "cc.Scene" },{ "trigger": "ccm_TransitionEaseScene [lua_cocos2dx_auto_api]", "contents": "cc.TransitionEaseScene" },{ "trigger": "ccm_TransitionScene [lua_cocos2dx_auto_api]", "contents": "cc.TransitionScene" },{ "trigger": "ccm_TransitionSceneOriented [lua_cocos2dx_auto_api]", "contents": "cc.TransitionSceneOriented" },{ "trigger": "ccm_TransitionRotoZoom [lua_cocos2dx_auto_api]", "contents": "cc.TransitionRotoZoom" },{ "trigger": "ccm_TransitionJumpZoom [lua_cocos2dx_auto_api]", "contents": "cc.TransitionJumpZoom" },{ "trigger": "ccm_TransitionMoveInL [lua_cocos2dx_auto_api]", "contents": "cc.TransitionMoveInL" },{ "trigger": "ccm_TransitionMoveInR [lua_cocos2dx_auto_api]", "contents": "cc.TransitionMoveInR" },{ "trigger": "ccm_TransitionMoveInT [lua_cocos2dx_auto_api]", "contents": "cc.TransitionMoveInT" },{ "trigger": "ccm_TransitionMoveInB [lua_cocos2dx_auto_api]", "contents": "cc.TransitionMoveInB" },{ "trigger": "ccm_TransitionSlideInL [lua_cocos2dx_auto_api]", "contents": "cc.TransitionSlideInL" },{ "trigger": "ccm_TransitionSlideInR [lua_cocos2dx_auto_api]", "contents": "cc.TransitionSlideInR" },{ "trigger": "ccm_TransitionSlideInB [lua_cocos2dx_auto_api]", "contents": "cc.TransitionSlideInB" },{ "trigger": "ccm_TransitionSlideInT [lua_cocos2dx_auto_api]", "contents": "cc.TransitionSlideInT" },{ "trigger": "ccm_TransitionShrinkGrow [lua_cocos2dx_auto_api]", "contents": "cc.TransitionShrinkGrow" },{ "trigger": "ccm_TransitionFlipX [lua_cocos2dx_auto_api]", "contents": "cc.TransitionFlipX" },{ "trigger": "ccm_TransitionFlipY [lua_cocos2dx_auto_api]", "contents": "cc.TransitionFlipY" },{ "trigger": "ccm_TransitionFlipAngular [lua_cocos2dx_auto_api]", "contents": "cc.TransitionFlipAngular" },{ "trigger": "ccm_TransitionZoomFlipX [lua_cocos2dx_auto_api]", "contents": "cc.TransitionZoomFlipX" },{ "trigger": "ccm_TransitionZoomFlipY [lua_cocos2dx_auto_api]", "contents": "cc.TransitionZoomFlipY" },{ "trigger": "ccm_TransitionZoomFlipAngular [lua_cocos2dx_auto_api]", "contents": "cc.TransitionZoomFlipAngular" },{ "trigger": "ccm_TransitionFade [lua_cocos2dx_auto_api]", "contents": "cc.TransitionFade" },{ "trigger": "ccm_TransitionCrossFade [lua_cocos2dx_auto_api]", "contents": "cc.TransitionCrossFade" },{ "trigger": "ccm_TransitionTurnOffTiles [lua_cocos2dx_auto_api]", "contents": "cc.TransitionTurnOffTiles" },{ "trigger": "ccm_TransitionSplitCols [lua_cocos2dx_auto_api]", "contents": "cc.TransitionSplitCols" },{ "trigger": "ccm_TransitionSplitRows [lua_cocos2dx_auto_api]", "contents": "cc.TransitionSplitRows" },{ "trigger": "ccm_TransitionFadeTR [lua_cocos2dx_auto_api]", "contents": "cc.TransitionFadeTR" },{ "trigger": "ccm_TransitionFadeBL [lua_cocos2dx_auto_api]", "contents": "cc.TransitionFadeBL" },{ "trigger": "ccm_TransitionFadeUp [lua_cocos2dx_auto_api]", "contents": "cc.TransitionFadeUp" },{ "trigger": "ccm_TransitionFadeDown [lua_cocos2dx_auto_api]", "contents": "cc.TransitionFadeDown" },{ "trigger": "ccm_TransitionPageTurn [lua_cocos2dx_auto_api]", "contents": "cc.TransitionPageTurn" },{ "trigger": "ccm_TransitionProgress [lua_cocos2dx_auto_api]", "contents": "cc.TransitionProgress" },{ "trigger": "ccm_TransitionProgressRadialCCW [lua_cocos2dx_auto_api]", "contents": "cc.TransitionProgressRadialCCW" },{ "trigger": "ccm_TransitionProgressRadialCW [lua_cocos2dx_auto_api]", "contents": "cc.TransitionProgressRadialCW" },{ "trigger": "ccm_TransitionProgressHorizontal [lua_cocos2dx_auto_api]", "contents": "cc.TransitionProgressHorizontal" },{ "trigger": "ccm_TransitionProgressVertical [lua_cocos2dx_auto_api]", "contents": "cc.TransitionProgressVertical" },{ "trigger": "ccm_TransitionProgressInOut [lua_cocos2dx_auto_api]", "contents": "cc.TransitionProgressInOut" },{ "trigger": "ccm_TransitionProgressOutIn [lua_cocos2dx_auto_api]", "contents": "cc.TransitionProgressOutIn" },{ "trigger": "ccm_MenuItem [lua_cocos2dx_auto_api]", "contents": "cc.MenuItem" },{ "trigger": "ccm_MenuItemLabel [lua_cocos2dx_auto_api]", "contents": "cc.MenuItemLabel" },{ "trigger": "ccm_MenuItemAtlasFont [lua_cocos2dx_auto_api]", "contents": "cc.MenuItemAtlasFont" },{ "trigger": "ccm_MenuItemFont [lua_cocos2dx_auto_api]", "contents": "cc.MenuItemFont" },{ "trigger": "ccm_MenuItemSprite [lua_cocos2dx_auto_api]", "contents": "cc.MenuItemSprite" },{ "trigger": "ccm_MenuItemImage [lua_cocos2dx_auto_api]", "contents": "cc.MenuItemImage" },{ "trigger": "ccm_MenuItemToggle [lua_cocos2dx_auto_api]", "contents": "cc.MenuItemToggle" },{ "trigger": "ccm_Menu [lua_cocos2dx_auto_api]", "contents": "cc.Menu" },{ "trigger": "ccm_ClippingNode [lua_cocos2dx_auto_api]", "contents": "cc.ClippingNode" },{ "trigger": "ccm_MotionStreak [lua_cocos2dx_auto_api]", "contents": "cc.MotionStreak" },{ "trigger": "ccm_Sprite [lua_cocos2dx_auto_api]", "contents": "cc.Sprite" },{ "trigger": "ccm_ProgressTimer [lua_cocos2dx_auto_api]", "contents": "cc.ProgressTimer" },{ "trigger": "ccm_Image [lua_cocos2dx_auto_api]", "contents": "cc.Image" },{ "trigger": "ccm_RenderTexture [lua_cocos2dx_auto_api]", "contents": "cc.RenderTexture" },{ "trigger": "ccm_NodeGrid [lua_cocos2dx_auto_api]", "contents": "cc.NodeGrid" },{ "trigger": "ccm_ParticleBatchNode [lua_cocos2dx_auto_api]", "contents": "cc.ParticleBatchNode" },{ "trigger": "ccm_ParticleSystem [lua_cocos2dx_auto_api]", "contents": "cc.ParticleSystem" },{ "trigger": "ccm_ParticleSystemQuad [lua_cocos2dx_auto_api]", "contents": "cc.ParticleSystemQuad" },{ "trigger": "ccm_ParticleFire [lua_cocos2dx_auto_api]", "contents": "cc.ParticleFire" },{ "trigger": "ccm_ParticleFireworks [lua_cocos2dx_auto_api]", "contents": "cc.ParticleFireworks" },{ "trigger": "ccm_ParticleSun [lua_cocos2dx_auto_api]", "contents": "cc.ParticleSun" },{ "trigger": "ccm_ParticleGalaxy [lua_cocos2dx_auto_api]", "contents": "cc.ParticleGalaxy" },{ "trigger": "ccm_ParticleFlower [lua_cocos2dx_auto_api]", "contents": "cc.ParticleFlower" },{ "trigger": "ccm_ParticleMeteor [lua_cocos2dx_auto_api]", "contents": "cc.ParticleMeteor" },{ "trigger": "ccm_ParticleSpiral [lua_cocos2dx_auto_api]", "contents": "cc.ParticleSpiral" },{ "trigger": "ccm_ParticleExplosion [lua_cocos2dx_auto_api]", "contents": "cc.ParticleExplosion" },{ "trigger": "ccm_ParticleSmoke [lua_cocos2dx_auto_api]", "contents": "cc.ParticleSmoke" },{ "trigger": "ccm_ParticleSnow [lua_cocos2dx_auto_api]", "contents": "cc.ParticleSnow" },{ "trigger": "ccm_ParticleRain [lua_cocos2dx_auto_api]", "contents": "cc.ParticleRain" },{ "trigger": "ccm_GridBase [lua_cocos2dx_auto_api]", "contents": "cc.GridBase" },{ "trigger": "ccm_Grid3D [lua_cocos2dx_auto_api]", "contents": "cc.Grid3D" },{ "trigger": "ccm_TiledGrid3D [lua_cocos2dx_auto_api]", "contents": "cc.TiledGrid3D" },{ "trigger": "ccm_TextureCache [lua_cocos2dx_auto_api]", "contents": "cc.TextureCache" },{ "trigger": "ccm_Application [lua_cocos2dx_auto_api]", "contents": "cc.Application" },{ "trigger": "ccm_GLViewProtocol [lua_cocos2dx_auto_api]", "contents": "cc.GLViewProtocol" },{ "trigger": "ccm_GLView [lua_cocos2dx_auto_api]", "contents": "cc.GLView" },{ "trigger": "ccm_AnimationCache [lua_cocos2dx_auto_api]", "contents": "cc.AnimationCache" },{ "trigger": "ccm_SpriteFrameCache [lua_cocos2dx_auto_api]", "contents": "cc.SpriteFrameCache" },{ "trigger": "ccm_ParallaxNode [lua_cocos2dx_auto_api]", "contents": "cc.ParallaxNode" },{ "trigger": "ccm_TMXObjectGroup [lua_cocos2dx_auto_api]", "contents": "cc.TMXObjectGroup" },{ "trigger": "ccm_TMXLayerInfo [lua_cocos2dx_auto_api]", "contents": "cc.TMXLayerInfo" },{ "trigger": "ccm_TMXTilesetInfo [lua_cocos2dx_auto_api]", "contents": "cc.TMXTilesetInfo" },{ "trigger": "ccm_TMXMapInfo [lua_cocos2dx_auto_api]", "contents": "cc.TMXMapInfo" },{ "trigger": "ccm_TMXLayer [lua_cocos2dx_auto_api]", "contents": "cc.TMXLayer" },{ "trigger": "ccm_TMXTiledMap [lua_cocos2dx_auto_api]", "contents": "cc.TMXTiledMap" },{ "trigger": "ccm_TileMapAtlas [lua_cocos2dx_auto_api]", "contents": "cc.TileMapAtlas" },{ "trigger": "ccm_Component [lua_cocos2dx_auto_api]", "contents": "cc.Component" },{ "trigger": "ccm_Sprite3D [lua_cocos2dx_auto_api]", "contents": "cc.Sprite3D" },{ "trigger": "ccm_SimpleAudioEngine [lua_cocos2dx_auto_api]", "contents": "cc.SimpleAudioEngine" },{ "trigger": "ccm_ProtectedNode [lua_cocos2dx_auto_api]", "contents": "cc.ProtectedNode" },{ "trigger": "s_setEnabled(bool:#bool):void [Menu]", "contents": "setEnabled(${1:bool:#bool})" },{ "trigger": "s_alignItemsVertically():void [Menu]", "contents": "alignItemsVertically()" },{ "trigger": "s_isEnabled():ret (return value: bool):#bool [Menu]", "contents": "isEnabled()" },{ "trigger": "s_alignItemsHorizontallyWithPadding(float:#float):void [Menu]", "contents": "alignItemsHorizontallyWithPadding(${1:float:#float})" },{ "trigger": "s_alignItemsVerticallyWithPadding(float:#float):void [Menu]", "contents": "alignItemsVerticallyWithPadding(${1:float:#float})" },{ "trigger": "s_alignItemsHorizontally():void [Menu]", "contents": "alignItemsHorizontally()" },{ "trigger": "f_addChild(cc.Node, int):void [Menu]", "contents": "addChild(${1:cc.Node},${2: int})" },{ "trigger": "f_addChild(cc.Node):void [Menu]", "contents": "addChild(${1:cc.Node})" },{ "trigger": "f_addChild(cc.Node, int, int):void [Menu]", "contents": "addChild(${1:cc.Node},${2: int},${3: int})" },{ "trigger": "s_addChild(node:#cc.Node,int:#int,int:#int):void [Menu]", "contents": "addChild(${1:node:#cc.Node},${2:int:#int},${3:int:#int})" },{ "trigger": "s_isOpacityModifyRGB():ret (return value: bool):#bool [Menu]", "contents": "isOpacityModifyRGB()" },{ "trigger": "s_getDescription():ret (return value: string):#string [Menu]", "contents": "getDescription()" },{ "trigger": "s_setOpacityModifyRGB(bool:#bool):void [Menu]", "contents": "setOpacityModifyRGB(${1:bool:#bool})" },{ "trigger": "s_removeChild(node:#cc.Node,bool:#bool):void [Menu]", "contents": "removeChild(${1:node:#cc.Node},${2:bool:#bool})" },{ "trigger": "s_addGLProgram(glprogram:#cc.GLProgram,str:#string):void [GLProgramCache]", "contents": "addGLProgram(${1:glprogram:#cc.GLProgram},${2:str:#string})" },{ "trigger": "s_getGLProgram(str:#string):ret (return value: cc.GLProgram):#GLProgram [GLProgramCache]", "contents": "getGLProgram(${1:str:#string})" },{ "trigger": "s_reloadDefaultGLPrograms():void [GLProgramCache]", "contents": "reloadDefaultGLPrograms()" },{ "trigger": "s_loadDefaultGLPrograms():void [GLProgramCache]", "contents": "loadDefaultGLPrograms()" },{ "trigger": "s_destroyInstance():void [GLProgramCache]", "contents": "destroyInstance()" },{ "trigger": "s_getInstance():ret (return value: cc.GLProgramCache):#GLProgramCache [GLProgramCache]", "contents": "getInstance()" },{ "trigger": "s_GLProgramCache():void [GLProgramCache]", "contents": "GLProgramCache()" },{ "trigger": "spm_Skeleton [lua_cocos2dx_spine_auto_api]", "contents": "sp.Skeleton" },{ "trigger": "spm_SkeletonAnimation [lua_cocos2dx_spine_auto_api]", "contents": "sp.SkeletonAnimation" },{ "trigger": "ListViewEventTypem_onsSelectedItem [ListViewEventType]", "contents": "ListViewEventType.onsSelectedItem" },{ "trigger": "s_setFrameSize(float:#float,float:#float):void [GLViewProtocol]", "contents": "setFrameSize(${1:float:#float},${2:float:#float})" },{ "trigger": "s_getViewPortRect():ret (return value: rect_table):#rect_table [GLViewProtocol]", "contents": "getViewPortRect()" },{ "trigger": "s_setIMEKeyboardState(bool:#bool):void [GLViewProtocol]", "contents": "setIMEKeyboardState(${1:bool:#bool})" },{ "trigger": "s_setScissorInPoints(float:#float,float:#float,float:#float,float:#float):void [GLViewProtocol]", "contents": "setScissorInPoints(${1:float:#float},${2:float:#float},${3:float:#float},${4:float:#float})" },{ "trigger": "s_getViewName():ret (return value: string):#string [GLViewProtocol]", "contents": "getViewName()" },{ "trigger": "s_isOpenGLReady():ret (return value: bool):#bool [GLViewProtocol]", "contents": "isOpenGLReady()" },{ "trigger": "s_end():void [GLViewProtocol]", "contents": "end()" },{ "trigger": "s_getScaleY():ret (return value: float):#float [GLViewProtocol]", "contents": "getScaleY()" },{ "trigger": "s_getScaleX():ret (return value: float):#float [GLViewProtocol]", "contents": "getScaleX()" },{ "trigger": "s_getVisibleOrigin():ret (return value: cc.Vec2):#Vec2 [GLViewProtocol]", "contents": "getVisibleOrigin()" },{ "trigger": "s_getFrameSize():ret (return value: size_table):#size_table [GLViewProtocol]", "contents": "getFrameSize()" },{ "trigger": "s_getDesignResolutionSize():ret (return value: size_table):#size_table [GLViewProtocol]", "contents": "getDesignResolutionSize()" },{ "trigger": "s_pollInputEvents():void [GLViewProtocol]", "contents": "pollInputEvents()" },{ "trigger": "s_swapBuffers():void [GLViewProtocol]", "contents": "swapBuffers()" },{ "trigger": "s_setDesignResolutionSize(float:#float,float:#float,resolutionpolicy:#ResolutionPolicy):void [GLViewProtocol]", "contents": "setDesignResolutionSize(${1:float:#float},${2:float:#float},${3:resolutionpolicy:#ResolutionPolicy})" },{ "trigger": "s_getResolutionPolicy():ret (return value: ResolutionPolicy):#ResolutionPolicy [GLViewProtocol]", "contents": "getResolutionPolicy()" },{ "trigger": "s_setViewPortInPoints(float:#float,float:#float,float:#float,float:#float):void [GLViewProtocol]", "contents": "setViewPortInPoints(${1:float:#float},${2:float:#float},${3:float:#float},${4:float:#float})" },{ "trigger": "s_getScissorRect():ret (return value: rect_table):#rect_table [GLViewProtocol]", "contents": "getScissorRect()" },{ "trigger": "s_setViewName(str:#string):void [GLViewProtocol]", "contents": "setViewName(${1:str:#string})" },{ "trigger": "s_getVisibleRect():ret (return value: rect_table):#rect_table [GLViewProtocol]", "contents": "getVisibleRect()" },{ "trigger": "s_getVisibleSize():ret (return value: size_table):#size_table [GLViewProtocol]", "contents": "getVisibleSize()" },{ "trigger": "s_isScissorEnabled():ret (return value: bool):#bool [GLViewProtocol]", "contents": "isScissorEnabled()" },{ "trigger": "s_create():ret (return value: cc.ParticleFire):#ParticleFire [ParticleFire]", "contents": "create()" },{ "trigger": "s_createWithTotalParticles(int:#int):ret (return value: cc.ParticleFire):#ParticleFire [ParticleFire]", "contents": "createWithTotalParticles(${1:int:#int})" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseBounceOut):#EaseBounceOut [EaseBounceOut]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseBounceOut):#EaseBounceOut [EaseBounceOut]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseBounceOut]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseBounce):#EaseBounce [EaseBounceOut]", "contents": "reverse()" },{ "trigger": "ccuim_LayoutParameter [lua_cocos2dx_ui_auto_api]", "contents": "ccui.LayoutParameter" },{ "trigger": "ccuim_LinearLayoutParameter [lua_cocos2dx_ui_auto_api]", "contents": "ccui.LinearLayoutParameter" },{ "trigger": "ccuim_RelativeLayoutParameter [lua_cocos2dx_ui_auto_api]", "contents": "ccui.RelativeLayoutParameter" },{ "trigger": "ccuim_Widget [lua_cocos2dx_ui_auto_api]", "contents": "ccui.Widget" },{ "trigger": "ccuim_Layout [lua_cocos2dx_ui_auto_api]", "contents": "ccui.Layout" },{ "trigger": "ccuim_Button [lua_cocos2dx_ui_auto_api]", "contents": "ccui.Button" },{ "trigger": "ccuim_CheckBox [lua_cocos2dx_ui_auto_api]", "contents": "ccui.CheckBox" },{ "trigger": "ccuim_ImageView [lua_cocos2dx_ui_auto_api]", "contents": "ccui.ImageView" },{ "trigger": "ccuim_Text [lua_cocos2dx_ui_auto_api]", "contents": "ccui.Text" },{ "trigger": "ccuim_TextAtlas [lua_cocos2dx_ui_auto_api]", "contents": "ccui.TextAtlas" },{ "trigger": "ccuim_LoadingBar [lua_cocos2dx_ui_auto_api]", "contents": "ccui.LoadingBar" },{ "trigger": "ccuim_ScrollView [lua_cocos2dx_ui_auto_api]", "contents": "ccui.ScrollView" },{ "trigger": "ccuim_ListView [lua_cocos2dx_ui_auto_api]", "contents": "ccui.ListView" },{ "trigger": "ccuim_Slider [lua_cocos2dx_ui_auto_api]", "contents": "ccui.Slider" },{ "trigger": "ccuim_TextField [lua_cocos2dx_ui_auto_api]", "contents": "ccui.TextField" },{ "trigger": "ccuim_TextBMFont [lua_cocos2dx_ui_auto_api]", "contents": "ccui.TextBMFont" },{ "trigger": "ccuim_PageView [lua_cocos2dx_ui_auto_api]", "contents": "ccui.PageView" },{ "trigger": "ccuim_Helper [lua_cocos2dx_ui_auto_api]", "contents": "ccui.Helper" },{ "trigger": "ccuim_RichElement [lua_cocos2dx_ui_auto_api]", "contents": "ccui.RichElement" },{ "trigger": "ccuim_RichElementText [lua_cocos2dx_ui_auto_api]", "contents": "ccui.RichElementText" },{ "trigger": "ccuim_RichElementImage [lua_cocos2dx_ui_auto_api]", "contents": "ccui.RichElementImage" },{ "trigger": "ccuim_RichElementCustomNode [lua_cocos2dx_ui_auto_api]", "contents": "ccui.RichElementCustomNode" },{ "trigger": "ccuim_RichText [lua_cocos2dx_ui_auto_api]", "contents": "ccui.RichText" },{ "trigger": "s_setObjectGroups(array:#array_table):void [TMXTiledMap]", "contents": "setObjectGroups(${1:array:#array_table})" },{ "trigger": "s_getProperty(str:#string):ret (return value: cc.Value):#Value [TMXTiledMap]", "contents": "getProperty(${1:str:#string})" },{ "trigger": "s_setMapSize(size:#size_table):void [TMXTiledMap]", "contents": "setMapSize(${1:size:#size_table})" },{ "trigger": "s_getObjectGroup(str:#string):ret (return value: cc.TMXObjectGroup):#TMXObjectGroup [TMXTiledMap]", "contents": "getObjectGroup(${1:str:#string})" },{ "trigger": "f_getObjectGroups():ret (retunr value: array_table):#array_table [TMXTiledMap]", "contents": "getObjectGroups(${1:})" },{ "trigger": "f_getObjectGroups():ret (retunr value: array_table):#array_table [TMXTiledMap]", "contents": "getObjectGroups(${1:})" },{ "trigger": "s_getObjectGroups():ret (retunr value: array_table):#array_table [TMXTiledMap]", "contents": "getObjectGroups()" },{ "trigger": "s_getTileSize():ret (return value: size_table):#size_table [TMXTiledMap]", "contents": "getTileSize()" },{ "trigger": "s_getMapSize():ret (return value: size_table):#size_table [TMXTiledMap]", "contents": "getMapSize()" },{ "trigger": "s_getProperties():ret (return value: map_table):#map_table [TMXTiledMap]", "contents": "getProperties()" },{ "trigger": "s_setTileSize(size:#size_table):void [TMXTiledMap]", "contents": "setTileSize(${1:size:#size_table})" },{ "trigger": "s_setProperties(map:#map_table):void [TMXTiledMap]", "contents": "setProperties(${1:map:#map_table})" },{ "trigger": "s_getLayer(str:#string):ret (return value: cc.TMXLayer):#TMXLayer [TMXTiledMap]", "contents": "getLayer(${1:str:#string})" },{ "trigger": "s_getMapOrientation():ret (return value: int):#int [TMXTiledMap]", "contents": "getMapOrientation()" },{ "trigger": "s_setMapOrientation(int:#int):void [TMXTiledMap]", "contents": "setMapOrientation(${1:int:#int})" },{ "trigger": "s_create(str:#string):ret (return value: cc.TMXTiledMap):#TMXTiledMap [TMXTiledMap]", "contents": "create(${1:str:#string})" },{ "trigger": "s_createWithXML(str:#string,str:#string):ret (return value: cc.TMXTiledMap):#TMXTiledMap [TMXTiledMap]", "contents": "createWithXML(${1:str:#string},${2:str:#string})" },{ "trigger": "s_getDescription():ret (return value: string):#string [TMXTiledMap]", "contents": "getDescription()" },{ "trigger": "s_getCurPageIndex():ret (return value: long):#long [PageView]", "contents": "getCurPageIndex()" },{ "trigger": "s_addWidgetToPage(widget:#ccui.Widget,long:#long,bool:#bool):void [PageView]", "contents": "addWidgetToPage(${1:widget:#ccui.Widget},${2:long:#long},${3:bool:#bool})" },{ "trigger": "s_getPage(long:#long):ret (return value: ccui.Layout):#Layout [PageView]", "contents": "getPage(${1:long:#long})" },{ "trigger": "s_removePage(layout:#ccui.Layout):void [PageView]", "contents": "removePage(${1:layout:#ccui.Layout})" },{ "trigger": "s_addEventListener(func:#function):void [PageView]", "contents": "addEventListener(${1:func:#function})" },{ "trigger": "s_insertPage(layout:#ccui.Layout,int:#int):void [PageView]", "contents": "insertPage(${1:layout:#ccui.Layout},${2:int:#int})" },{ "trigger": "s_scrollToPage(long:#long):void [PageView]", "contents": "scrollToPage(${1:long:#long})" },{ "trigger": "s_removePageAtIndex(long:#long):void [PageView]", "contents": "removePageAtIndex(${1:long:#long})" },{ "trigger": "s_getPages():ret (return value: array_table):#array_table [PageView]", "contents": "getPages()" },{ "trigger": "s_removeAllPages():void [PageView]", "contents": "removeAllPages()" },{ "trigger": "s_addPage(layout:#ccui.Layout):void [PageView]", "contents": "addPage(${1:layout:#ccui.Layout})" },{ "trigger": "s_create():ret (return value: ccui.PageView):#PageView [PageView]", "contents": "create()" },{ "trigger": "s_createInstance():ret (return value: cc.Ref):#Ref [PageView]", "contents": "createInstance()" },{ "trigger": "s_getLayoutType():ret (return value: ccui.Layout::Type):#Layout::Type [PageView]", "contents": "getLayoutType()" },{ "trigger": "s_getDescription():ret (return value: string):#string [PageView]", "contents": "getDescription()" },{ "trigger": "s_update(float:#float):void [PageView]", "contents": "update(${1:float:#float})" },{ "trigger": "s_setLayoutType(type:#ccui.Layout::Type):void [PageView]", "contents": "setLayoutType(${1:type:#ccui.Layout::Type})" },{ "trigger": "s_PageView():void [PageView]", "contents": "PageView()" },{ "trigger": "f_clampf(float:#float,float:#float,float:#float):float ret (return value: float):#float [cc]", "contents": "clampf(${1:float:#float},${2:float:#float},${3:float:#float})" },{ "trigger": "f_p(float:#float,float:#float):ret (return value: point_table):#point_table [cc]", "contents": "p(${1:float:#float},${2:float:#float})" },{ "trigger": "f_pAdd(point:#point_table,point:#point_table):ret (return value: point_table):#point_table [cc]", "contents": "pAdd(${1:point:#point_table},${2:point:#point_table})" },{ "trigger": "f_pSub(point:#point_table,point:#point_table):ret (return value: point_table):#point_table [cc]", "contents": "pSub(${1:point:#point_table},${2:point:#point_table})" },{ "trigger": "f_pMul(point:#point_table,point:#point_table):ret (return value: point_table):#point_table [cc]", "contents": "pMul(${1:point:#point_table},${2:point:#point_table})" },{ "trigger": "f_pMidpoint(point:#point_table,point:#point_table):ret (return value: point_table):#point_table [cc]", "contents": "pMidpoint(${1:point:#point_table},${2:point:#point_table})" },{ "trigger": "f_pForAngle(float:#float):ret (return value: point_table):#point_table [cc]", "contents": "pForAngle(${1:float:#float})" },{ "trigger": "f_pGetLength(point:#point_table):float ret (return value: float):#float [cc]", "contents": "pGetLength(${1:point:#point_table})" },{ "trigger": "f_pNormalize(point:#point_table):ret (return value: point_table):#point_table [cc]", "contents": "pNormalize(${1:point:#point_table})" },{ "trigger": "f_pCross(point:#point_table):float ret (return value: float):#float [cc]", "contents": "pCross(${1:point:#point_table})" },{ "trigger": "f_pDot(point:#point_table):float ret (return value: float):#float [cc]", "contents": "pDot(${1:point:#point_table})" },{ "trigger": "f_pToAngleSelf():float ret (return value: float):#float [cc]", "contents": "pToAngleSelf()" },{ "trigger": "f_pGetAngle(point:#point_table):float ret (return value: float):#float [cc]", "contents": "pGetAngle(${1:point:#point_table})" },{ "trigger": "f_pGetAngle(point:#point_table):float ret (return value: float):#float [cc]", "contents": "pGetAngle(${1:point:#point_table})" },{ "trigger": "f_pGetDistance(point:#point_table,point:#point_table):float ret (return value: float):#float [cc]", "contents": "pGetDistance(${1:point:#point_table},${2:point:#point_table})" },{ "trigger": "f_pIsLineIntersect(point:#point_table,point:#point_table,point:#point_table,point:#point_table,float:#float,float:#float):bool ret (return value: bool):#bool [cc]", "contents": "pIsLineIntersect(${1:point:#point_table},${2:point:#point_table},${3:point:#point_table},${4:point:#point_table},${5:float:#float},${6:float:#float})" },{ "trigger": "f_pPerp(point:#point_table):ret (return value: point_table):#point_table [cc]", "contents": "pPerp(${1:point:#point_table})" },{ "trigger": "f_RPerp(point:#point_table):ret (return value: point_table):#point_table [cc]", "contents": "RPerp(${1:point:#point_table})" },{ "trigger": "f_pProject(point:#point_table,point:#point_table):ret (return value: point_table):#point_table [cc]", "contents": "pProject(${1:point:#point_table},${2:point:#point_table})" },{ "trigger": "f_pRotate(point:#point_table,point:#point_table):ret (return value: point_table):#point_table [cc]", "contents": "pRotate(${1:point:#point_table},${2:point:#point_table})" },{ "trigger": "f_pUnrotate(point:#point_table,point:#point_table):ret (return value: point_table):#point_table [cc]", "contents": "pUnrotate(${1:point:#point_table},${2:point:#point_table})" },{ "trigger": "f_pLengthSQ(point:#point_table):float ret (return value: float):#float [cc]", "contents": "pLengthSQ(${1:point:#point_table})" },{ "trigger": "f_pDistanceSQ(point:#point_table,point:#point_table):float ret (return value: float):#float [cc]", "contents": "pDistanceSQ(${1:point:#point_table},${2:point:#point_table})" },{ "trigger": "f_pGetClampPoint(point:#point_table,point:#point_table,point:#point_table):ret (return value: point_table):#point_table [cc]", "contents": "pGetClampPoint(${1:point:#point_table},${2:point:#point_table},${3:point:#point_table})" },{ "trigger": "f_pFromSize(size:#size_table):ret (return value: size_table):#size_table [cc]", "contents": "pFromSize(${1:size:#size_table})" },{ "trigger": "f_pLerp(point:#point_table,point:#point_table,float:#float):ret (return value: point_table):#point_table [cc]", "contents": "pLerp(${1:point:#point_table},${2:point:#point_table},${3:float:#float})" },{ "trigger": "f_pFuzzyEqual(point:#point_table,point:#point_table,float:#float):bool (return value: bool):#bool [cc]", "contents": "pFuzzyEqual(${1:point:#point_table},${2:point:#point_table},${3:float:#float})" },{ "trigger": "f_pRotateByAngle(point:#point_table,point:#point_table,float:#float):ret (return value: point_table):#point_table [cc]", "contents": "pRotateByAngle(${1:point:#point_table},${2:point:#point_table},${3:float:#float})" },{ "trigger": "f_pIsSegmentIntersect(point:#point_table,point:#point_table,point:#point_table,point:#point_table):bool (return value: bool):#bool [cc]", "contents": "pIsSegmentIntersect(${1:point:#point_table},${2:point:#point_table},${3:point:#point_table},${4:point:#point_table})" },{ "trigger": "f_pGetIntersectPoint(point:#point_table,point:#point_table,point:#point_table,point:#point_table):ret (return value: point_table):#point_table [cc]", "contents": "pGetIntersectPoint(${1:point:#point_table},${2:point:#point_table},${3:point:#point_table},${4:point:#point_table})" },{ "trigger": "f_size(float:#float,float:#float):ret (return value: size_table):#size_table [cc]", "contents": "size(${1:float:#float},${2:float:#float})" },{ "trigger": "f_rect(float:#float,float:#float,float:#float,float:#float):ret (return value: rect_table):#rect_table [cc]", "contents": "rect(${1:float:#float},${2:float:#float},${3:float:#float},${4:float:#float})" },{ "trigger": "f_rectEqualToRect(rect:#rect_table,rect:#rect_table):bool (return value: bool):#bool [cc]", "contents": "rectEqualToRect(${1:rect:#rect_table},${2:rect:#rect_table})" },{ "trigger": "f_rectGetMaxX(rect:#rect_table):float (return value: float):#float [cc]", "contents": "rectGetMaxX(${1:rect:#rect_table})" },{ "trigger": "f_rectGetMidX(rect:#rect_table):float (return value: float):#float [cc]", "contents": "rectGetMidX(${1:rect:#rect_table})" },{ "trigger": "f_rectGetMinX(rect:#rect_table):float (return value: float):#float [cc]", "contents": "rectGetMinX(${1:rect:#rect_table})" },{ "trigger": "f_rectGetMaxY(rect:#rect_table):float (return value: float):#float [cc]", "contents": "rectGetMaxY(${1:rect:#rect_table})" },{ "trigger": "f_rectGetMidY(rect:#rect_table):float (return value: float):#float [cc]", "contents": "rectGetMidY(${1:rect:#rect_table})" },{ "trigger": "f_rectGetMinY(rect:#rect_table):float (return value: float):#float [cc]", "contents": "rectGetMinY(${1:rect:#rect_table})" },{ "trigger": "f_rectContainsPoint(rect:#rect_table,point:#point_table):bool (return value: bool):#bool [cc]", "contents": "rectContainsPoint(${1:rect:#rect_table},${2:point:#point_table})" },{ "trigger": "f_rectIntersectsRect(rect:#rect_table,rect:#rect_table):bool (return value: bool):#bool [cc]", "contents": "rectIntersectsRect(${1:rect:#rect_table},${2:rect:#rect_table})" },{ "trigger": "f_rectUnion(rect:#rect_table,rect:#rect_table):ret (return value: rect_table):#rect_table [cc]", "contents": "rectUnion(${1:rect:#rect_table},${2:rect:#rect_table})" },{ "trigger": "f_rectIntersection(rect:#rect_table,rect:#rect_table):ret (return value: rect_table):#rect_table [cc]", "contents": "rectIntersection(${1:rect:#rect_table},${2:rect:#rect_table})" },{ "trigger": "f_c3b(byte:#byte,byte:#byte,byte:#byte):ret (return value: color3b_table):#color3b_table [cc]", "contents": "c3b(${1:byte:#byte},${2:byte:#byte},${3:byte:#byte})" },{ "trigger": "f_c4b(byte:#byte,byte:#byte,byte:#byte,byte:#byte):ret (return value: color4b_table):#color4b_table [cc]", "contents": "c4b(${1:byte:#byte},${2:byte:#byte},${3:byte:#byte},${4:byte:#byte})" },{ "trigger": "f_c4f(float:#float,float:#float,float:#float,float:#float):ret (return value: color4f_table):#color4f_table [cc]", "contents": "c4f(${1:float:#float},${2:float:#float},${3:float:#float},${4:float:#float})" },{ "trigger": "f_vertex2F(float:#float,float:#float):ret (return value: vertex2f_table):#vertex2f_table [cc]", "contents": "vertex2F(${1:float:#float},${2:float:#float})" },{ "trigger": "f_Vertex3F(float:#float,float:#float,float:#float):ret (return value: vertex3f_table):#vertex3f_table [cc]", "contents": "Vertex3F(${1:float:#float},${2:float:#float},${3:float:#float})" },{ "trigger": "f_tex2F(float:#float,float:#float):ret (return value: tex2f_table):#tex2f_table [cc]", "contents": "tex2F(${1:float:#float},${2:float:#float})" },{ "trigger": "f_PointSprite(point:#point_table,color:#color4b_table,size:#size_table):ret (return value: point_sprite_table):#point_sprite_table [cc]", "contents": "PointSprite(${1:point:#point_table},${2:color:#color4b_table},${3:size:#size_table})" },{ "trigger": "f_Quad2(vertex2f:#vertex2f_table,vertex2f:#vertex2f_table,vertex2f:#vertex2f_table,vertex2f:#vertex2f_table):ret (return value: quad2_table):#quad2_table [cc]", "contents": "Quad2(${1:vertex2f:#vertex2f_table},${2:vertex2f:#vertex2f_table},${3:vertex2f:#vertex2f_table},${4:vertex2f:#vertex2f_table})" },{ "trigger": "f_Quad3(vertex3f:#vertex3f_table,vertex3f:#vertex3f_table,vertex3f:#vertex3f_table,vertex3f:#vertex3f_table):ret (return value: quad3_table):#quad3_table [cc]", "contents": "Quad3(${1:vertex3f:#vertex3f_table},${2:vertex3f:#vertex3f_table},${3:vertex3f:#vertex3f_table},${4:vertex3f:#vertex3f_table})" },{ "trigger": "f_Quad3(vertex3f:#vertex3f_table,vertex3f:#vertex3f_table,vertex3f:#vertex3f_table,vertex3f:#vertex3f_table):ret (return value: quad3_table):#quad3_table [cc]", "contents": "Quad3(${1:vertex3f:#vertex3f_table},${2:vertex3f:#vertex3f_table},${3:vertex3f:#vertex3f_table},${4:vertex3f:#vertex3f_table})" },{ "trigger": "f_V2F_C4B_T2F(vertex2f:#vertex2f_table,color4b:#color4b_table,t2f_quad_table:#t2f_quad_table):ret (return value: v2f_c4b_t2f_table):#v2f_c4b_t2f_table [cc]", "contents": "V2F_C4B_T2F(${1:vertex2f:#vertex2f_table},${2:color4b:#color4b_table},${3:t2f_quad_table:#t2f_quad_table})" },{ "trigger": "f_V2F_C4F_T2F(vertex2f:#vertex2f_table,color4f:#color4f_table,t2f_quad_table:#t2f_quad_table):ret (return value: v2f_c4f_t2f_table):#v2f_c4f_t2f_table [cc]", "contents": "V2F_C4F_T2F(${1:vertex2f:#vertex2f_table},${2:color4f:#color4f_table},${3:t2f_quad_table:#t2f_quad_table})" },{ "trigger": "f_V3F_C4B_T2F(vertex3f:#vertex3f_table,color4b:#color4b_table,t2f_quad_table:#t2f_quad_table):ret (return value: v3f_c4b_t2f_table):#v3f_c4b_t2f_table [cc]", "contents": "V3F_C4B_T2F(${1:vertex3f:#vertex3f_table},${2:color4b:#color4b_table},${3:t2f_quad_table:#t2f_quad_table})" },{ "trigger": "f_V2F_C4B_T2F_Quad(_bl:#v2f_c4b_t2f_table,_br:#v2f_c4b_t2f_table,_tl:#v2f_c4b_t2f_table,_tr:#v2f_c4b_t2f_table):ret (return value: v2f_c4b_t2f_quad_table):#v2f_c4b_t2f_quad_table [cc]", "contents": "V2F_C4B_T2F_Quad(${1:_bl:#v2f_c4b_t2f_table},${2:_br:#v2f_c4b_t2f_table},${3:_tl:#v2f_c4b_t2f_table},${4:_tr:#v2f_c4b_t2f_table})" },{ "trigger": "f_V3F_C4B_T2F_Quad(_bl:#v3f_c4b_t2f_table,_br:#v3f_c4b_t2f_table,_tl:#v3f_c4b_t2f_table,_tr:#v3f_c4b_t2f_table):ret (return value: v3f_c4b_t2f_quad_table):#v3f_c4b_t2f_quad_table [cc]", "contents": "V3F_C4B_T2F_Quad(${1:_bl:#v3f_c4b_t2f_table},${2:_br:#v3f_c4b_t2f_table},${3:_tl:#v3f_c4b_t2f_table},${4:_tr:#v3f_c4b_t2f_table})" },{ "trigger": "f_V2F_C4F_T2F_Quad(_bl:#v2f_c4f_t2f_table,_br:#v2f_c4f_t2f_table,_tl:#v2f_c4f_t2f_table,_tr:#v2f_c4f_t2f_table):ret (return value: v2f_c4f_t2f_quad_table):#v2f_c4f_t2f_quad_table [cc]", "contents": "V2F_C4F_T2F_Quad(${1:_bl:#v2f_c4f_t2f_table},${2:_br:#v2f_c4f_t2f_table},${3:_tl:#v2f_c4f_t2f_table},${4:_tr:#v2f_c4f_t2f_table})" },{ "trigger": "f_T2F_Quad(_bl:#tex2f_table,_br:#tex2f_table,_tl:#tex2f_table,_tr:#tex2f_table):ret (return value: t2f_quad_table):#t2f_quad_table [cc]", "contents": "T2F_Quad(${1:_bl:#tex2f_table},${2:_br:#tex2f_table},${3:_tl:#tex2f_table},${4:_tr:#tex2f_table})" },{ "trigger": "f_AnimationFrameData(t2f_quad_table:#t2f_quad_table,float:#float,size_table:#size_table):ret (return value: animation_frame_data_table):#animation_frame_data_table [cc]", "contents": "AnimationFrameData(${1:t2f_quad_table:#t2f_quad_table},${2:float:#float},${3:size_table:#size_table})" },{ "trigger": "f_PhysicsMaterial(float:#float,float:#float,float:#float):ret (return value: physics_material_data_table):#physics_material_data_table [cc]", "contents": "PhysicsMaterial(${1:float:#float},${2:float:#float},${3:float:#float})" },{ "trigger": "ccm_Ref [cc]", "contents": "cc.Ref" },{ "trigger": "ccm_Action [cc]", "contents": "cc.Action" },{ "trigger": "ccm_FiniteTimeAction [cc]", "contents": "cc.FiniteTimeAction" },{ "trigger": "ccm_Speed [cc]", "contents": "cc.Speed" },{ "trigger": "ccm_Follow [cc]", "contents": "cc.Follow" },{ "trigger": "ccm_GLProgram [cc]", "contents": "cc.GLProgram" },{ "trigger": "ccm_Touch [cc]", "contents": "cc.Touch" },{ "trigger": "ccm_Event [cc]", "contents": "cc.Event" },{ "trigger": "ccm_EventTouch [cc]", "contents": "cc.EventTouch" },{ "trigger": "ccm_EventKeyboard [cc]", "contents": "cc.EventKeyboard" },{ "trigger": "ccm_Texture2D [cc]", "contents": "cc.Texture2D" },{ "trigger": "ccm_EventListener [cc]", "contents": "cc.EventListener" },{ "trigger": "ccm_EventDispatcher [cc]", "contents": "cc.EventDispatcher" },{ "trigger": "ccm_Node [cc]", "contents": "cc.Node" },{ "trigger": "ccm_SpriteFrame [cc]", "contents": "cc.SpriteFrame" },{ "trigger": "ccm_AnimationFrame [cc]", "contents": "cc.AnimationFrame" },{ "trigger": "ccm_Animation [cc]", "contents": "cc.Animation" },{ "trigger": "ccm_ActionInterval [cc]", "contents": "cc.ActionInterval" },{ "trigger": "ccm_Sequence [cc]", "contents": "cc.Sequence" },{ "trigger": "ccm_Repeat [cc]", "contents": "cc.Repeat" },{ "trigger": "ccm_RepeatForever [cc]", "contents": "cc.RepeatForever" },{ "trigger": "ccm_Spawn [cc]", "contents": "cc.Spawn" },{ "trigger": "ccm_RotateTo [cc]", "contents": "cc.RotateTo" },{ "trigger": "ccm_RotateBy [cc]", "contents": "cc.RotateBy" },{ "trigger": "ccm_MoveBy [cc]", "contents": "cc.MoveBy" },{ "trigger": "ccm_MoveTo [cc]", "contents": "cc.MoveTo" },{ "trigger": "ccm_SkewTo [cc]", "contents": "cc.SkewTo" },{ "trigger": "ccm_SkewBy [cc]", "contents": "cc.SkewBy" },{ "trigger": "ccm_JumpBy [cc]", "contents": "cc.JumpBy" },{ "trigger": "ccm_JumpTo [cc]", "contents": "cc.JumpTo" },{ "trigger": "ccm_BezierBy [cc]", "contents": "cc.BezierBy" },{ "trigger": "ccm_BezierTo [cc]", "contents": "cc.BezierTo" },{ "trigger": "ccm_ScaleTo [cc]", "contents": "cc.ScaleTo" },{ "trigger": "ccm_ScaleBy [cc]", "contents": "cc.ScaleBy" },{ "trigger": "ccm_Blink [cc]", "contents": "cc.Blink" },{ "trigger": "ccm_FadeIn [cc]", "contents": "cc.FadeIn" },{ "trigger": "ccm_FadeOut [cc]", "contents": "cc.FadeOut" },{ "trigger": "ccm_FadeTo [cc]", "contents": "cc.FadeTo" },{ "trigger": "ccm_TintTo [cc]", "contents": "cc.TintTo" },{ "trigger": "ccm_TintBy [cc]", "contents": "cc.TintBy" },{ "trigger": "ccm_DelayTime [cc]", "contents": "cc.DelayTime" },{ "trigger": "ccm_Animate [cc]", "contents": "cc.Animate" },{ "trigger": "ccm_TargetedAction [cc]", "contents": "cc.TargetedAction" },{ "trigger": "ccm_ActionCamera [cc]", "contents": "cc.ActionCamera" },{ "trigger": "ccm_OrbitCamera [cc]", "contents": "cc.OrbitCamera" },{ "trigger": "ccm_ActionManager [cc]", "contents": "cc.ActionManager" },{ "trigger": "ccm_ActionEase [cc]", "contents": "cc.ActionEase" },{ "trigger": "ccm_EaseRateAction [cc]", "contents": "cc.EaseRateAction" },{ "trigger": "ccm_EaseIn [cc]", "contents": "cc.EaseIn" },{ "trigger": "ccm_EaseOut [cc]", "contents": "cc.EaseOut" },{ "trigger": "ccm_EaseInOut [cc]", "contents": "cc.EaseInOut" },{ "trigger": "ccm_EaseExponentialIn [cc]", "contents": "cc.EaseExponentialIn" },{ "trigger": "ccm_EaseExponentialOut [cc]", "contents": "cc.EaseExponentialOut" },{ "trigger": "ccm_EaseExponentialInOut [cc]", "contents": "cc.EaseExponentialInOut" },{ "trigger": "ccm_EaseSineIn [cc]", "contents": "cc.EaseSineIn" },{ "trigger": "ccm_EaseSineOut [cc]", "contents": "cc.EaseSineOut" },{ "trigger": "ccm_EaseSineInOut [cc]", "contents": "cc.EaseSineInOut" },{ "trigger": "ccm_EaseElastic [cc]", "contents": "cc.EaseElastic" },{ "trigger": "ccm_EaseElasticIn [cc]", "contents": "cc.EaseElasticIn" },{ "trigger": "ccm_EaseElasticOut [cc]", "contents": "cc.EaseElasticOut" },{ "trigger": "ccm_EaseElasticInOut [cc]", "contents": "cc.EaseElasticInOut" },{ "trigger": "ccm_EaseBounce [cc]", "contents": "cc.EaseBounce" },{ "trigger": "ccm_EaseBounceIn [cc]", "contents": "cc.EaseBounceIn" },{ "trigger": "ccm_EaseBounceOut [cc]", "contents": "cc.EaseBounceOut" },{ "trigger": "ccm_EaseBounceInOut [cc]", "contents": "cc.EaseBounceInOut" },{ "trigger": "ccm_EaseBackIn [cc]", "contents": "cc.EaseBackIn" },{ "trigger": "ccm_EaseBackOut [cc]", "contents": "cc.EaseBackOut" },{ "trigger": "ccm_EaseBackInOut [cc]", "contents": "cc.EaseBackInOut" },{ "trigger": "ccm_EaseBezierAction [cc]", "contents": "cc.EaseBezierAction" },{ "trigger": "ccm_EaseQuadraticActionIn [cc]", "contents": "cc.EaseQuadraticActionIn" },{ "trigger": "ccm_EaseQuadraticActionOut [cc]", "contents": "cc.EaseQuadraticActionOut" },{ "trigger": "ccm_EaseQuadraticActionInOut [cc]", "contents": "cc.EaseQuadraticActionInOut" },{ "trigger": "ccm_EaseQuarticActionIn [cc]", "contents": "cc.EaseQuarticActionIn" },{ "trigger": "ccm_EaseQuarticActionOut [cc]", "contents": "cc.EaseQuarticActionOut" },{ "trigger": "ccm_EaseQuarticActionInOut [cc]", "contents": "cc.EaseQuarticActionInOut" },{ "trigger": "ccm_EaseQuinticActionIn [cc]", "contents": "cc.EaseQuinticActionIn" },{ "trigger": "ccm_EaseQuinticActionOut [cc]", "contents": "cc.EaseQuinticActionOut" },{ "trigger": "ccm_EaseQuinticActionInOut [cc]", "contents": "cc.EaseQuinticActionInOut" },{ "trigger": "ccm_EaseCircleActionIn [cc]", "contents": "cc.EaseCircleActionIn" },{ "trigger": "ccm_EaseCircleActionOut [cc]", "contents": "cc.EaseCircleActionOut" },{ "trigger": "ccm_EaseCircleActionInOut [cc]", "contents": "cc.EaseCircleActionInOut" },{ "trigger": "ccm_EaseCubicActionIn [cc]", "contents": "cc.EaseCubicActionIn" },{ "trigger": "ccm_EaseCubicActionOut [cc]", "contents": "cc.EaseCubicActionOut" },{ "trigger": "ccm_EaseCubicActionInOut [cc]", "contents": "cc.EaseCubicActionInOut" },{ "trigger": "ccm_ActionInstant [cc]", "contents": "cc.ActionInstant" },{ "trigger": "ccm_Show [cc]", "contents": "cc.Show" },{ "trigger": "ccm_Hide [cc]", "contents": "cc.Hide" },{ "trigger": "ccm_ToggleVisibility [cc]", "contents": "cc.ToggleVisibility" },{ "trigger": "ccm_RemoveSelf [cc]", "contents": "cc.RemoveSelf" },{ "trigger": "ccm_FlipX [cc]", "contents": "cc.FlipX" },{ "trigger": "ccm_FlipY [cc]", "contents": "cc.FlipY" },{ "trigger": "ccm_Place [cc]", "contents": "cc.Place" },{ "trigger": "ccm_CallFunc [cc]", "contents": "cc.CallFunc" },{ "trigger": "ccm_GridAction [cc]", "contents": "cc.GridAction" },{ "trigger": "ccm_Grid3DAction [cc]", "contents": "cc.Grid3DAction" },{ "trigger": "ccm_TiledGrid3DAction [cc]", "contents": "cc.TiledGrid3DAction" },{ "trigger": "ccm_StopGrid [cc]", "contents": "cc.StopGrid" },{ "trigger": "ccm_ReuseGrid [cc]", "contents": "cc.ReuseGrid" },{ "trigger": "ccm_Waves3D [cc]", "contents": "cc.Waves3D" },{ "trigger": "ccm_FlipX3D [cc]", "contents": "cc.FlipX3D" },{ "trigger": "ccm_FlipY3D [cc]", "contents": "cc.FlipY3D" },{ "trigger": "ccm_Lens3D [cc]", "contents": "cc.Lens3D" },{ "trigger": "ccm_Ripple3D [cc]", "contents": "cc.Ripple3D" },{ "trigger": "ccm_Shaky3D [cc]", "contents": "cc.Shaky3D" },{ "trigger": "ccm_Liquid [cc]", "contents": "cc.Liquid" },{ "trigger": "ccm_Waves [cc]", "contents": "cc.Waves" },{ "trigger": "ccm_Twirl [cc]", "contents": "cc.Twirl" },{ "trigger": "ccm_PageTurn3D [cc]", "contents": "cc.PageTurn3D" },{ "trigger": "ccm_ProgressTo [cc]", "contents": "cc.ProgressTo" },{ "trigger": "ccm_ProgressFromTo [cc]", "contents": "cc.ProgressFromTo" },{ "trigger": "ccm_ShakyTiles3D [cc]", "contents": "cc.ShakyTiles3D" },{ "trigger": "ccm_ShatteredTiles3D [cc]", "contents": "cc.ShatteredTiles3D" },{ "trigger": "ccm_ShuffleTiles [cc]", "contents": "cc.ShuffleTiles" },{ "trigger": "ccm_FadeOutTRTiles [cc]", "contents": "cc.FadeOutTRTiles" },{ "trigger": "ccm_FadeOutBLTiles [cc]", "contents": "cc.FadeOutBLTiles" },{ "trigger": "ccm_FadeOutUpTiles [cc]", "contents": "cc.FadeOutUpTiles" },{ "trigger": "ccm_FadeOutDownTiles [cc]", "contents": "cc.FadeOutDownTiles" },{ "trigger": "ccm_TurnOffTiles [cc]", "contents": "cc.TurnOffTiles" },{ "trigger": "ccm_WavesTiles3D [cc]", "contents": "cc.WavesTiles3D" },{ "trigger": "ccm_JumpTiles3D [cc]", "contents": "cc.JumpTiles3D" },{ "trigger": "ccm_SplitRows [cc]", "contents": "cc.SplitRows" },{ "trigger": "ccm_SplitCols [cc]", "contents": "cc.SplitCols" },{ "trigger": "ccm_ActionTween [cc]", "contents": "cc.ActionTween" },{ "trigger": "ccm_CardinalSplineTo [cc]", "contents": "cc.CardinalSplineTo" },{ "trigger": "ccm_CardinalSplineBy [cc]", "contents": "cc.CardinalSplineBy" },{ "trigger": "ccm_CatmullRomTo [cc]", "contents": "cc.CatmullRomTo" },{ "trigger": "ccm_CatmullRomBy [cc]", "contents": "cc.CatmullRomBy" },{ "trigger": "ccm_AtlasNode [cc]", "contents": "cc.AtlasNode" },{ "trigger": "ccm_DrawNode [cc]", "contents": "cc.DrawNode" },{ "trigger": "ccm_LabelAtlas [cc]", "contents": "cc.LabelAtlas" },{ "trigger": "ccm_Director [cc]", "contents": "cc.Director" },{ "trigger": "ccm_GridBase [cc]", "contents": "cc.GridBase" },{ "trigger": "ccm_Grid3D [cc]", "contents": "cc.Grid3D" },{ "trigger": "ccm_TiledGrid3D [cc]", "contents": "cc.TiledGrid3D" },{ "trigger": "ccm_Sprite [cc]", "contents": "cc.Sprite" },{ "trigger": "ccm_LabelTTF [cc]", "contents": "cc.LabelTTF" },{ "trigger": "ccm_SpriteBatchNode [cc]", "contents": "cc.SpriteBatchNode" },{ "trigger": "ccm_Label [cc]", "contents": "cc.Label" },{ "trigger": "ccm_LabelBMFont [cc]", "contents": "cc.LabelBMFont" },{ "trigger": "ccm_Layer [cc]", "contents": "cc.Layer" },{ "trigger": "ccm_LayerColor [cc]", "contents": "cc.LayerColor" },{ "trigger": "ccm_LayerGradient [cc]", "contents": "cc.LayerGradient" },{ "trigger": "ccm_LayerMultiplex [cc]", "contents": "cc.LayerMultiplex" },{ "trigger": "ccm_Scene [cc]", "contents": "cc.Scene" },{ "trigger": "ccm_TransitionEaseScene [cc]", "contents": "cc.TransitionEaseScene" },{ "trigger": "ccm_TransitionScene [cc]", "contents": "cc.TransitionScene" },{ "trigger": "ccm_TransitionSceneOriented [cc]", "contents": "cc.TransitionSceneOriented" },{ "trigger": "ccm_TransitionRotoZoom [cc]", "contents": "cc.TransitionRotoZoom" },{ "trigger": "ccm_TransitionJumpZoom [cc]", "contents": "cc.TransitionJumpZoom" },{ "trigger": "ccm_TransitionMoveInL [cc]", "contents": "cc.TransitionMoveInL" },{ "trigger": "ccm_TransitionMoveInR [cc]", "contents": "cc.TransitionMoveInR" },{ "trigger": "ccm_TransitionMoveInT [cc]", "contents": "cc.TransitionMoveInT" },{ "trigger": "ccm_TransitionMoveInB [cc]", "contents": "cc.TransitionMoveInB" },{ "trigger": "ccm_TransitionSlideInL [cc]", "contents": "cc.TransitionSlideInL" },{ "trigger": "ccm_TransitionSlideInR [cc]", "contents": "cc.TransitionSlideInR" },{ "trigger": "ccm_TransitionSlideInB [cc]", "contents": "cc.TransitionSlideInB" },{ "trigger": "ccm_TransitionSlideInT [cc]", "contents": "cc.TransitionSlideInT" },{ "trigger": "ccm_TransitionShrinkGrow [cc]", "contents": "cc.TransitionShrinkGrow" },{ "trigger": "ccm_TransitionFlipX [cc]", "contents": "cc.TransitionFlipX" },{ "trigger": "ccm_TransitionFlipY [cc]", "contents": "cc.TransitionFlipY" },{ "trigger": "ccm_TransitionFlipAngular [cc]", "contents": "cc.TransitionFlipAngular" },{ "trigger": "ccm_TransitionZoomFlipX [cc]", "contents": "cc.TransitionZoomFlipX" },{ "trigger": "ccm_TransitionZoomFlipY [cc]", "contents": "cc.TransitionZoomFlipY" },{ "trigger": "ccm_TransitionZoomFlipAngular [cc]", "contents": "cc.TransitionZoomFlipAngular" },{ "trigger": "ccm_TransitionFade [cc]", "contents": "cc.TransitionFade" },{ "trigger": "ccm_TransitionCrossFade [cc]", "contents": "cc.TransitionCrossFade" },{ "trigger": "ccm_TransitionTurnOffTiles [cc]", "contents": "cc.TransitionTurnOffTiles" },{ "trigger": "ccm_TransitionSplitCols [cc]", "contents": "cc.TransitionSplitCols" },{ "trigger": "ccm_TransitionSplitRows [cc]", "contents": "cc.TransitionSplitRows" },{ "trigger": "ccm_TransitionFadeTR [cc]", "contents": "cc.TransitionFadeTR" },{ "trigger": "ccm_TransitionFadeBL [cc]", "contents": "cc.TransitionFadeBL" },{ "trigger": "ccm_TransitionFadeUp [cc]", "contents": "cc.TransitionFadeUp" },{ "trigger": "ccm_TransitionFadeDown [cc]", "contents": "cc.TransitionFadeDown" },{ "trigger": "ccm_TransitionPageTurn [cc]", "contents": "cc.TransitionPageTurn" },{ "trigger": "ccm_TransitionProgress [cc]", "contents": "cc.TransitionProgress" },{ "trigger": "ccm_TransitionProgressRadialCCW [cc]", "contents": "cc.TransitionProgressRadialCCW" },{ "trigger": "ccm_TransitionProgressRadialCW [cc]", "contents": "cc.TransitionProgressRadialCW" },{ "trigger": "ccm_TransitionProgressHorizontal [cc]", "contents": "cc.TransitionProgressHorizontal" },{ "trigger": "ccm_TransitionProgressVertical [cc]", "contents": "cc.TransitionProgressVertical" },{ "trigger": "ccm_TransitionProgressInOut [cc]", "contents": "cc.TransitionProgressInOut" },{ "trigger": "ccm_TransitionProgressOutIn [cc]", "contents": "cc.TransitionProgressOutIn" },{ "trigger": "ccm_MenuItem [cc]", "contents": "cc.MenuItem" },{ "trigger": "ccm_MenuItemLabel [cc]", "contents": "cc.MenuItemLabel" },{ "trigger": "ccm_MenuItemAtlasFont [cc]", "contents": "cc.MenuItemAtlasFont" },{ "trigger": "ccm_MenuItemFont [cc]", "contents": "cc.MenuItemFont" },{ "trigger": "ccm_MenuItemSprite [cc]", "contents": "cc.MenuItemSprite" },{ "trigger": "ccm_MenuItemImage [cc]", "contents": "cc.MenuItemImage" },{ "trigger": "ccm_MenuItemToggle [cc]", "contents": "cc.MenuItemToggle" },{ "trigger": "ccm_Menu [cc]", "contents": "cc.Menu" },{ "trigger": "ccm_ClippingNode [cc]", "contents": "cc.ClippingNode" },{ "trigger": "ccm_MotionStreak [cc]", "contents": "cc.MotionStreak" },{ "trigger": "ccm_ProgressTimer [cc]", "contents": "cc.ProgressTimer" },{ "trigger": "ccm_Image [cc]", "contents": "cc.Image" },{ "trigger": "ccm_RenderTexture [cc]", "contents": "cc.RenderTexture" },{ "trigger": "ccm_NodeGrid [cc]", "contents": "cc.NodeGrid" },{ "trigger": "ccm_ParticleBatchNode [cc]", "contents": "cc.ParticleBatchNode" },{ "trigger": "ccm_ParticleSystem [cc]", "contents": "cc.ParticleSystem" },{ "trigger": "ccm_ParticleSystemQuad [cc]", "contents": "cc.ParticleSystemQuad" },{ "trigger": "ccm_ParticleFire [cc]", "contents": "cc.ParticleFire" },{ "trigger": "ccm_ParticleFireworks [cc]", "contents": "cc.ParticleFireworks" },{ "trigger": "ccm_ParticleSun [cc]", "contents": "cc.ParticleSun" },{ "trigger": "ccm_ParticleGalaxy [cc]", "contents": "cc.ParticleGalaxy" },{ "trigger": "ccm_ParticleFlower [cc]", "contents": "cc.ParticleFlower" },{ "trigger": "ccm_ParticleMeteor [cc]", "contents": "cc.ParticleMeteor" },{ "trigger": "ccm_ParticleSpiral [cc]", "contents": "cc.ParticleSpiral" },{ "trigger": "ccm_ParticleExplosion [cc]", "contents": "cc.ParticleExplosion" },{ "trigger": "ccm_ParticleSmoke [cc]", "contents": "cc.ParticleSmoke" },{ "trigger": "ccm_ParticleSnow [cc]", "contents": "cc.ParticleSnow" },{ "trigger": "ccm_ParticleRain [cc]", "contents": "cc.ParticleRain" },{ "trigger": "ccm_EventListenerCustom [cc]", "contents": "cc.EventListenerCustom" },{ "trigger": "ccm_EventCustom [cc]", "contents": "cc.EventCustom" },{ "trigger": "ccm_FileUtils [cc]", "contents": "cc.FileUtils" },{ "trigger": "ccm_Application [cc]", "contents": "cc.Application" },{ "trigger": "ccm_GLViewProtocol [cc]", "contents": "cc.GLViewProtocol" },{ "trigger": "ccm_GLView [cc]", "contents": "cc.GLView" },{ "trigger": "ccm_ShaderCache [cc]", "contents": "cc.ShaderCache" },{ "trigger": "ccm_AnimationCache [cc]", "contents": "cc.AnimationCache" },{ "trigger": "ccm_SpriteFrameCache [cc]", "contents": "cc.SpriteFrameCache" },{ "trigger": "ccm_UserDefault [cc]", "contents": "cc.UserDefault" },{ "trigger": "ccm_TextureCache [cc]", "contents": "cc.TextureCache" },{ "trigger": "ccm_ParallaxNode [cc]", "contents": "cc.ParallaxNode" },{ "trigger": "ccm_TMXObjectGroup [cc]", "contents": "cc.TMXObjectGroup" },{ "trigger": "ccm_TMXLayerInfo [cc]", "contents": "cc.TMXLayerInfo" },{ "trigger": "ccm_TMXTilesetInfo [cc]", "contents": "cc.TMXTilesetInfo" },{ "trigger": "ccm_TMXMapInfo [cc]", "contents": "cc.TMXMapInfo" },{ "trigger": "ccm_TMXLayer [cc]", "contents": "cc.TMXLayer" },{ "trigger": "ccm_TMXTiledMap [cc]", "contents": "cc.TMXTiledMap" },{ "trigger": "ccm_TileMapAtlas [cc]", "contents": "cc.TileMapAtlas" },{ "trigger": "ccm_EventListenerTouchOneByOne [cc]", "contents": "cc.EventListenerTouchOneByOne" },{ "trigger": "ccm_EventListenerTouchAllAtOnce [cc]", "contents": "cc.EventListenerTouchAllAtOnce" },{ "trigger": "ccm_EventListenerKeyboard [cc]", "contents": "cc.EventListenerKeyboard" },{ "trigger": "ccm_EventMouse [cc]", "contents": "cc.EventMouse" },{ "trigger": "ccm_EventListenerMouse [cc]", "contents": "cc.EventListenerMouse" },{ "trigger": "ccm_EventAcceleration [cc]", "contents": "cc.EventAcceleration" },{ "trigger": "ccm_EventListenerAcceleration [cc]", "contents": "cc.EventListenerAcceleration" },{ "trigger": "ccm_Timer [cc]", "contents": "cc.Timer" },{ "trigger": "ccm_Scheduler [cc]", "contents": "cc.Scheduler" },{ "trigger": "ccm_Component [cc]", "contents": "cc.Component" },{ "trigger": "ccm_SimpleAudioEngine [cc]", "contents": "cc.SimpleAudioEngine" },{ "trigger": "ccm_Scale9Sprite [cc]", "contents": "cc.Scale9Sprite" },{ "trigger": "ccm_Control [cc]", "contents": "cc.Control" },{ "trigger": "ccm_ControlButton [cc]", "contents": "cc.ControlButton" },{ "trigger": "ccm_ControlHuePicker [cc]", "contents": "cc.ControlHuePicker" },{ "trigger": "ccm_ControlSaturationBrightnessPicker [cc]", "contents": "cc.ControlSaturationBrightnessPicker" },{ "trigger": "ccm_ControlColourPicker [cc]", "contents": "cc.ControlColourPicker" },{ "trigger": "ccm_ControlPotentiometer [cc]", "contents": "cc.ControlPotentiometer" },{ "trigger": "ccm_ControlSlider [cc]", "contents": "cc.ControlSlider" },{ "trigger": "ccm_ControlStepper [cc]", "contents": "cc.ControlStepper" },{ "trigger": "ccm_ControlSwitch [cc]", "contents": "cc.ControlSwitch" },{ "trigger": "ccm_ScrollView [cc]", "contents": "cc.ScrollView" },{ "trigger": "ccm_TableViewCell [cc]", "contents": "cc.TableViewCell" },{ "trigger": "ccm_TableView [cc]", "contents": "cc.TableView" },{ "trigger": "ccm_EditBox [cc]", "contents": "cc.EditBox" },{ "trigger": "ccm_AssetsManager [cc]", "contents": "cc.AssetsManager" },{ "trigger": "ccm_CCBAnimationManager [cc]", "contents": "cc.CCBAnimationManager" },{ "trigger": "ccm_CCBReader [cc]", "contents": "cc.CCBReader" },{ "trigger": "ccm_PhysicsShape [cc]", "contents": "cc.PhysicsShape" },{ "trigger": "ccm_PhysicsShapeCircle [cc]", "contents": "cc.PhysicsShapeCircle" },{ "trigger": "ccm_PhysicsShapeBox [cc]", "contents": "cc.PhysicsShapeBox" },{ "trigger": "ccm_PhysicsShapePolygon [cc]", "contents": "cc.PhysicsShapePolygon" },{ "trigger": "ccm_PhysicsShapeEdgeSegment [cc]", "contents": "cc.PhysicsShapeEdgeSegment" },{ "trigger": "ccm_PhysicsShapeEdgeBox [cc]", "contents": "cc.PhysicsShapeEdgeBox" },{ "trigger": "ccm_PhysicsShapeEdgePolygon [cc]", "contents": "cc.PhysicsShapeEdgePolygon" },{ "trigger": "ccm_PhysicsShapeEdgeChain [cc]", "contents": "cc.PhysicsShapeEdgeChain" },{ "trigger": "ccm_PhysicsBody [cc]", "contents": "cc.PhysicsBody" },{ "trigger": "ccm_PhysicsWorld [cc]", "contents": "cc.PhysicsWorld" },{ "trigger": "ccm_PhysicsDebugDraw [cc]", "contents": "cc.PhysicsDebugDraw" },{ "trigger": "ccm_PhysicsContact [cc]", "contents": "cc.PhysicsContact" },{ "trigger": "ccm_PhysicsContactPreSolve [cc]", "contents": "cc.PhysicsContactPreSolve" },{ "trigger": "ccm_PhysicsContactPostSolve [cc]", "contents": "cc.PhysicsContactPostSolve" },{ "trigger": "ccm_EventListenerPhysicsContact [cc]", "contents": "cc.EventListenerPhysicsContact" },{ "trigger": "ccm_EventListenerPhysicsContactWithBodies [cc]", "contents": "cc.EventListenerPhysicsContactWithBodies" },{ "trigger": "ccm_EventListenerPhysicsContactWithShapes [cc]", "contents": "cc.EventListenerPhysicsContactWithShapes" },{ "trigger": "ccm_EventListenerPhysicsContactWithGroup [cc]", "contents": "cc.EventListenerPhysicsContactWithGroup" },{ "trigger": "ccm_PhysicsJoint [cc]", "contents": "cc.PhysicsJoint" },{ "trigger": "ccm_PhysicsJointFixed [cc]", "contents": "cc.PhysicsJointFixed" },{ "trigger": "ccm_PhysicsJointLimit [cc]", "contents": "cc.PhysicsJointLimit" },{ "trigger": "ccm_PhysicsJointPin [cc]", "contents": "cc.PhysicsJointPin" },{ "trigger": "ccm_PhysicsJointDistance [cc]", "contents": "cc.PhysicsJointDistance" },{ "trigger": "ccm_PhysicsJointSpring [cc]", "contents": "cc.PhysicsJointSpring" },{ "trigger": "ccm_PhysicsJointGroove [cc]", "contents": "cc.PhysicsJointGroove" },{ "trigger": "ccm_PhysicsJointRotarySpring [cc]", "contents": "cc.PhysicsJointRotarySpring" },{ "trigger": "ccm_PhysicsJointRotaryLimit [cc]", "contents": "cc.PhysicsJointRotaryLimit" },{ "trigger": "ccm_PhysicsJointRatchet [cc]", "contents": "cc.PhysicsJointRatchet" },{ "trigger": "ccm_PhysicsJointGear [cc]", "contents": "cc.PhysicsJointGear" },{ "trigger": "ccm_PhysicsJointMotor [cc]", "contents": "cc.PhysicsJointMotor" },{ "trigger": "ccm_ [cc]", "contents": "cc." },{ "trigger": "ccm_Z_COMPRESSION_ZLIB [cc]", "contents": "cc.Z_COMPRESSION_ZLIB" },{ "trigger": "ccm_MENU_HANDLER_PRIORITY [cc]", "contents": "cc.MENU_HANDLER_PRIORITY" },{ "trigger": "ccm_MAC_USE_MAIN_THREAD [cc]", "contents": "cc.MAC_USE_MAIN_THREAD" },{ "trigger": "ccm_TABLECELL_TOUCHED [cc]", "contents": "cc.TABLECELL_TOUCHED" },{ "trigger": "ccm_SHADER_POSITION_TEXTURE_A8_COLOR [cc]", "contents": "cc.SHADER_POSITION_TEXTURE_A8_COLOR" },{ "trigger": "ccm_ASSETSMANAGER_CREATE_FILE [cc]", "contents": "cc.ASSETSMANAGER_CREATE_FILE" },{ "trigger": "ccm_CONTROL_EVENTTYPE_VALUE_CHANGED [cc]", "contents": "cc.CONTROL_EVENTTYPE_VALUE_CHANGED" },{ "trigger": "ccm_DEVICEI_PHONE [cc]", "contents": "cc.DEVICEI_PHONE" },{ "trigger": "ccm_PLATFORM_OS_TIZEN [cc]", "contents": "cc.PLATFORM_OS_TIZEN" },{ "trigger": "ccm_ASSETSMANAGER_PROTOCOL_SUCCESS [cc]", "contents": "cc.ASSETSMANAGER_PROTOCOL_SUCCESS" },{ "trigger": "ccm_PROGRESS_TIMER_TYPE_BAR [cc]", "contents": "cc.PROGRESS_TIMER_TYPE_BAR" },{ "trigger": "ccm_FLIPED_ALL [cc]", "contents": "cc.FLIPED_ALL" },{ "trigger": "ccm_EDITBOX_INPUT_FLAG_PASSWORD [cc]", "contents": "cc.EDITBOX_INPUT_FLAG_PASSWORD" },{ "trigger": "ccm_CONTROL_STATE_NORMAL [cc]", "contents": "cc.CONTROL_STATE_NORMAL" },{ "trigger": "ccm_KEYBOARD_RETURNTYPE_SEARCH [cc]", "contents": "cc.KEYBOARD_RETURNTYPE_SEARCH" },{ "trigger": "ccm_SHADER_POSITION_TEXTURE_U_COLOR [cc]", "contents": "cc.SHADER_POSITION_TEXTURE_U_COLOR" },{ "trigger": "ccm_PARTICLE_DURATION_INFINITY [cc]", "contents": "cc.PARTICLE_DURATION_INFINITY" },{ "trigger": "ccm_FLIPPED_MASK [cc]", "contents": "cc.FLIPPED_MASK" },{ "trigger": "ccm_WEBSOCKET_STATE_CLOSED [cc]", "contents": "cc.WEBSOCKET_STATE_CLOSED" },{ "trigger": "ccm_DEVICEI_PHONE5_RETINA_DISPLAY [cc]", "contents": "cc.DEVICEI_PHONE5_RETINA_DISPLAY" },{ "trigger": "ccm_FIX_ARTIFACTS_BY_STRECHING_TEXEL [cc]", "contents": "cc.FIX_ARTIFACTS_BY_STRECHING_TEXEL" },{ "trigger": "ccm_VERTICAL_TEXT_ALIGNMENT_TOP [cc]", "contents": "cc.VERTICAL_TEXT_ALIGNMENT_TOP" },{ "trigger": "ccm_LINE_BREAK_MODE_HEAD_TRUNCATION [cc]", "contents": "cc.LINE_BREAK_MODE_HEAD_TRUNCATION" },{ "trigger": "ccm_SCROLLVIEW_DIRECTION_BOTH [cc]", "contents": "cc.SCROLLVIEW_DIRECTION_BOTH" },{ "trigger": "ccm_PLATFORM_OS_IPHONE [cc]", "contents": "cc.PLATFORM_OS_IPHONE" },{ "trigger": "ccm_EDITBOX_INPUT_MODE_SINGLELINE [cc]", "contents": "cc.EDITBOX_INPUT_MODE_SINGLELINE" },{ "trigger": "ccm_TABLECELL_SIZE_AT_INDEX [cc]", "contents": "cc.TABLECELL_SIZE_AT_INDEX" },{ "trigger": "ccm_CONTROL_EVENTTYPE_DRAG_INSIDE [cc]", "contents": "cc.CONTROL_EVENTTYPE_DRAG_INSIDE" },{ "trigger": "ccm_ENABLE_STACKABLE_ACTIONS [cc]", "contents": "cc.ENABLE_STACKABLE_ACTIONS" },{ "trigger": "ccm_NODE_ON_EXIT_TRANSITION_DID_START [cc]", "contents": "cc.NODE_ON_EXIT_TRANSITION_DID_START" },{ "trigger": "ccm_UNIFORM_P_MATRIX_S [cc]", "contents": "cc.UNIFORM_P_MATRIX_S" },{ "trigger": "ccm_ASSETSMANAGER_PROTOCOL_PROGRESS [cc]", "contents": "cc.ASSETSMANAGER_PROTOCOL_PROGRESS" },{ "trigger": "ccm_TOUCHES_ALL_AT_ONCE [cc]", "contents": "cc.TOUCHES_ALL_AT_ONCE" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_PVRTC2A [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_PVRTC2A" },{ "trigger": "ccm_CONTROL_STEPPER_PART_NONE [cc]", "contents": "cc.CONTROL_STEPPER_PART_NONE" },{ "trigger": "ccm_PLATFORM_OS_EMSCRIPTEN [cc]", "contents": "cc.PLATFORM_OS_EMSCRIPTEN" },{ "trigger": "ccm_XMLHTTPREQUEST_RESPONSE_STRING [cc]", "contents": "cc.XMLHTTPREQUEST_RESPONSE_STRING" },{ "trigger": "ccm_CONTROL_EVENTTYPE_TOUCH_CANCEL [cc]", "contents": "cc.CONTROL_EVENTTYPE_TOUCH_CANCEL" },{ "trigger": "ccm_TMX_TILE_VERTICAL_FLAG [cc]", "contents": "cc.TMX_TILE_VERTICAL_FLAG" },{ "trigger": "ccm_TABLECELL_UNHIGH_LIGHT [cc]", "contents": "cc.TABLECELL_UNHIGH_LIGHT" },{ "trigger": "ccm_TEXTURE_ATLAS_USE_VAO [cc]", "contents": "cc.TEXTURE_ATLAS_USE_VAO" },{ "trigger": "ccm_ENABLE_GL_STATE_CACHE [cc]", "contents": "cc.ENABLE_GL_STATE_CACHE" },{ "trigger": "ccm_OS_VERSION_5_1_0 [cc]", "contents": "cc.OS_VERSION_5_1_0" },{ "trigger": "ccm_CONTROL_EVENTTYPE_DRAG_OUTSIDE [cc]", "contents": "cc.CONTROL_EVENTTYPE_DRAG_OUTSIDE" },{ "trigger": "ccm_ATTRIBUTE_NAME_TEX_COORD [cc]", "contents": "cc.ATTRIBUTE_NAME_TEX_COORD" },{ "trigger": "ccm_DIRECTOR_IOS_USE_BACKGROUND_THREAD [cc]", "contents": "cc.DIRECTOR_IOS_USE_BACKGROUND_THREAD" },{ "trigger": "ccm_EVENT_TOUCH_ALL_AT_ONCE [cc]", "contents": "cc.EVENT_TOUCH_ALL_AT_ONCE" },{ "trigger": "ccm_OS_VERSION_6_0_0 [cc]", "contents": "cc.OS_VERSION_6_0_0" },{ "trigger": "ccm_TMX_TILE_HORIZONTAL_FLAG [cc]", "contents": "cc.TMX_TILE_HORIZONTAL_FLAG" },{ "trigger": "ccm_UNIFORM_TIME_S [cc]", "contents": "cc.UNIFORM_TIME_S" },{ "trigger": "ccm_TRANSITION_ORIENTATION_UP_OVER [cc]", "contents": "cc.TRANSITION_ORIENTATION_UP_OVER" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_RG_B565 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_RG_B565" },{ "trigger": "ccm_LANGUAGE_JAPANESE [cc]", "contents": "cc.LANGUAGE_JAPANESE" },{ "trigger": "ccm_USE_L_A88_LABELS [cc]", "contents": "cc.USE_L_A88_LABELS" },{ "trigger": "ccm_POSITION_TYPE_RELATIVE [cc]", "contents": "cc.POSITION_TYPE_RELATIVE" },{ "trigger": "ccm_UNIFORM_RANDOM01 [cc]", "contents": "cc.UNIFORM_RANDOM01" },{ "trigger": "ccm_TMX_ORIENTATION_HEX [cc]", "contents": "cc.TMX_ORIENTATION_HEX" },{ "trigger": "ccm_SPRITEBATCHNODE_RENDER_SUBPIXEL [cc]", "contents": "cc.SPRITEBATCHNODE_RENDER_SUBPIXEL" },{ "trigger": "ccm_LABEL_AUTOMATIC_WIDTH [cc]", "contents": "cc.LABEL_AUTOMATIC_WIDTH" },{ "trigger": "ccm_POSITION_TYPE_FREE [cc]", "contents": "cc.POSITION_TYPE_FREE" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_RGB_A8888 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_RGB_A8888" },{ "trigger": "ccm_OS_VERSION_4_0 [cc]", "contents": "cc.OS_VERSION_4_0" },{ "trigger": "ccm_VERTICAL_TEXT_ALIGNMENT_CENTER [cc]", "contents": "cc.VERTICAL_TEXT_ALIGNMENT_CENTER" },{ "trigger": "ccm_OS_VERSION_4_2 [cc]", "contents": "cc.OS_VERSION_4_2" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_S3TC_DXT3 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_S3TC_DXT3" },{ "trigger": "ccm_EVENT_CUSTOM [cc]", "contents": "cc.EVENT_CUSTOM" },{ "trigger": "ccm_GLYPHCOLLECTION_DYNAMIC [cc]", "contents": "cc.GLYPHCOLLECTION_DYNAMIC" },{ "trigger": "ccm_MENU_STATE_TRACKING_TOUCH [cc]", "contents": "cc.MENU_STATE_TRACKING_TOUCH" },{ "trigger": "ccm_SPRITE_DEBUG_DRAW [cc]", "contents": "cc.SPRITE_DEBUG_DRAW" },{ "trigger": "ccm_DIRECTOR_STATS_INTERVAL [cc]", "contents": "cc.DIRECTOR_STATS_INTERVAL" },{ "trigger": "ccm_CONTROL_EVENTTYPE_DRAG_ENTER [cc]", "contents": "cc.CONTROL_EVENTTYPE_DRAG_ENTER" },{ "trigger": "ccm_RESOLUTION_MAC [cc]", "contents": "cc.RESOLUTION_MAC" },{ "trigger": "ccm_WEBSOCKET_STATE_CLOSING [cc]", "contents": "cc.WEBSOCKET_STATE_CLOSING" },{ "trigger": "ccm_Z_COMPRESSION_GZIP [cc]", "contents": "cc.Z_COMPRESSION_GZIP" },{ "trigger": "ccm_LINE_BREAK_MODE_MIDDLE_TRUNCATION [cc]", "contents": "cc.LINE_BREAK_MODE_MIDDLE_TRUNCATION" },{ "trigger": "ccm_VERTEX_ATTRIB_COLOR [cc]", "contents": "cc.VERTEX_ATTRIB_COLOR" },{ "trigger": "ccm_LINE_BREAK_MODE_WORD_WRAP [cc]", "contents": "cc.LINE_BREAK_MODE_WORD_WRAP" },{ "trigger": "ccm_RESOLUTION_MAC_RETINA_DISPLAY [cc]", "contents": "cc.RESOLUTION_MAC_RETINA_DISPLAY" },{ "trigger": "ccm_ATTRIBUTE_NAME_COLOR [cc]", "contents": "cc.ATTRIBUTE_NAME_COLOR" },{ "trigger": "ccm_PLATFORM_OS_MAC [cc]", "contents": "cc.PLATFORM_OS_MAC" },{ "trigger": "ccm_UNIFORM_COS_TIME [cc]", "contents": "cc.UNIFORM_COS_TIME" },{ "trigger": "ccm_PROGRESS_TIMER_TYPE_RADIAL [cc]", "contents": "cc.PROGRESS_TIMER_TYPE_RADIAL" },{ "trigger": "ccm_VERTEX_ATTRIB_MAX [cc]", "contents": "cc.VERTEX_ATTRIB_MAX" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_A_I88 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_A_I88" },{ "trigger": "ccm_BLEND_SRC [cc]", "contents": "cc.BLEND_SRC" },{ "trigger": "ccm_CONTROL_STEPPER_PART_PLUS [cc]", "contents": "cc.CONTROL_STEPPER_PART_PLUS" },{ "trigger": "ccm_OS_VERSION_4_2_1 [cc]", "contents": "cc.OS_VERSION_4_2_1" },{ "trigger": "ccm_KEYBOARD_RETURNTYPE_GO [cc]", "contents": "cc.KEYBOARD_RETURNTYPE_GO" },{ "trigger": "ccm_CHIPMUNK_IMPORT [cc]", "contents": "cc.CHIPMUNK_IMPORT" },{ "trigger": "ccm_ACTION_TAG_INVALID [cc]", "contents": "cc.ACTION_TAG_INVALID" },{ "trigger": "ccm_UNIFORM_SIN_TIME [cc]", "contents": "cc.UNIFORM_SIN_TIME" },{ "trigger": "ccm_OS_VERSION_4_1 [cc]", "contents": "cc.OS_VERSION_4_1" },{ "trigger": "ccm_LANGUAGE_HUNGARIAN [cc]", "contents": "cc.LANGUAGE_HUNGARIAN" },{ "trigger": "ccm_GLYPHCOLLECTION_ASCII [cc]", "contents": "cc.GLYPHCOLLECTION_ASCII" },{ "trigger": "ccm_LANGUAGE_SPANISH [cc]", "contents": "cc.LANGUAGE_SPANISH" },{ "trigger": "ccm_TEXTURE_ATLAS_USE_TRIANGLE_STRIP [cc]", "contents": "cc.TEXTURE_ATLAS_USE_TRIANGLE_STRIP" },{ "trigger": "ccm_LANGUAGE_ITALIAN [cc]", "contents": "cc.LANGUAGE_ITALIAN" },{ "trigger": "ccm_OS_VERSION_4_3 [cc]", "contents": "cc.OS_VERSION_4_3" },{ "trigger": "ccm_PVRMIPMAP_MAX [cc]", "contents": "cc.PVRMIPMAP_MAX" },{ "trigger": "ccm_UNIFORM_RANDOM01_S [cc]", "contents": "cc.UNIFORM_RANDOM01_S" },{ "trigger": "ccm_CONTROL_STATE_HIGH_LIGHTED [cc]", "contents": "cc.CONTROL_STATE_HIGH_LIGHTED" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_PVRTC4A [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_PVRTC4A" },{ "trigger": "ccm_EVENT_TOUCH_ONE_BY_ONE [cc]", "contents": "cc.EVENT_TOUCH_ONE_BY_ONE" },{ "trigger": "ccm_LABELBMFONT_DEBUG_DRAW [cc]", "contents": "cc.LABELBMFONT_DEBUG_DRAW" },{ "trigger": "ccm_TRANSITION_ORIENTATION_RIGHT_OVER [cc]", "contents": "cc.TRANSITION_ORIENTATION_RIGHT_OVER" },{ "trigger": "ccm_UNIFORM_ALPHA_TEST_VALUE_S [cc]", "contents": "cc.UNIFORM_ALPHA_TEST_VALUE_S" },{ "trigger": "ccm_EDITBOX_INPUT_MODE_URL [cc]", "contents": "cc.EDITBOX_INPUT_MODE_URL" },{ "trigger": "ccm_EVENT_UNKNOWN [cc]", "contents": "cc.EVENT_UNKNOWN" },{ "trigger": "ccm_VERTEX_ATTRIB_FLAG_POSITION [cc]", "contents": "cc.VERTEX_ATTRIB_FLAG_POSITION" },{ "trigger": "ccm_CONTROL_EVENTTYPE_DRAG_EXIT [cc]", "contents": "cc.CONTROL_EVENTTYPE_DRAG_EXIT" },{ "trigger": "ccm_ENABLE_DEPRECATED [cc]", "contents": "cc.ENABLE_DEPRECATED" },{ "trigger": "ccm_GLYPHCOLLECTION_NEHE [cc]", "contents": "cc.GLYPHCOLLECTION_NEHE" },{ "trigger": "ccm_EDITBOX_INPUT_MODE_PHONENUMBER [cc]", "contents": "cc.EDITBOX_INPUT_MODE_PHONENUMBER" },{ "trigger": "ccm_RESOLUTION_UNKNOWN [cc]", "contents": "cc.RESOLUTION_UNKNOWN" },{ "trigger": "ccm_LINE_BREAK_MODE_CHARACTER_WRAP [cc]", "contents": "cc.LINE_BREAK_MODE_CHARACTER_WRAP" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_RGB_A4444 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_RGB_A4444" },{ "trigger": "ccm_PARTICLE_START_SIZE_EQUAL_TO_END_SIZE [cc]", "contents": "cc.PARTICLE_START_SIZE_EQUAL_TO_END_SIZE" },{ "trigger": "ccm_SHADER_POSITION_COLOR [cc]", "contents": "cc.SHADER_POSITION_COLOR" },{ "trigger": "ccm_LANGUAGE_PORTUGUESE [cc]", "contents": "cc.LANGUAGE_PORTUGUESE" },{ "trigger": "ccm_EDITBOX_INPUT_MODE_NUMERIC [cc]", "contents": "cc.EDITBOX_INPUT_MODE_NUMERIC" },{ "trigger": "ccm_XMLHTTPREQUEST_RESPONSE_DOCUMENT [cc]", "contents": "cc.XMLHTTPREQUEST_RESPONSE_DOCUMENT" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_ETC [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_ETC" },{ "trigger": "ccm_OS_VERSION_5_0_1 [cc]", "contents": "cc.OS_VERSION_5_0_1" },{ "trigger": "ccm_EDITBOX_INPUT_FLAG_INITIAL_CAPS_WORD [cc]", "contents": "cc.EDITBOX_INPUT_FLAG_INITIAL_CAPS_WORD" },{ "trigger": "ccm_CONTROL_EVENTTYPE_TOUCH_UP_INSIDE [cc]", "contents": "cc.CONTROL_EVENTTYPE_TOUCH_UP_INSIDE" },{ "trigger": "ccm_PLATFORM_OS_WINDOWS [cc]", "contents": "cc.PLATFORM_OS_WINDOWS" },{ "trigger": "ccm_SCROLLVIEW_DIRECTION_VERTICAL [cc]", "contents": "cc.SCROLLVIEW_DIRECTION_VERTICAL" },{ "trigger": "ccm_WEBSOCKET_OPEN [cc]", "contents": "cc.WEBSOCKET_OPEN" },{ "trigger": "ccm_WEBSOCKET_ERROR [cc]", "contents": "cc.WEBSOCKET_ERROR" },{ "trigger": "ccm_UNIFORM_SIN_TIME_S [cc]", "contents": "cc.UNIFORM_SIN_TIME_S" },{ "trigger": "ccm_PRIORITY_SYSTEM [cc]", "contents": "cc.PRIORITY_SYSTEM" },{ "trigger": "ccm_SCROLLVIEW_DIRECTION_HORIZONTAL [cc]", "contents": "cc.SCROLLVIEW_DIRECTION_HORIZONTAL" },{ "trigger": "ccm_DIRECTOR_MAC_THREAD [cc]", "contents": "cc.DIRECTOR_MAC_THREAD" },{ "trigger": "ccm_LANGUAGE_RUSSIAN [cc]", "contents": "cc.LANGUAGE_RUSSIAN" },{ "trigger": "ccm_XMLHTTPREQUEST_RESPONSE_ARRAY_BUFFER [cc]", "contents": "cc.XMLHTTPREQUEST_RESPONSE_ARRAY_BUFFER" },{ "trigger": "ccm_PLATFORM_OS_NACL [cc]", "contents": "cc.PLATFORM_OS_NACL" },{ "trigger": "ccm_TEXT_ALIGNMENT_RIGHT [cc]", "contents": "cc.TEXT_ALIGNMENT_RIGHT" },{ "trigger": "ccm_CONTROL_EVENTTYPE_TOUCH_DOWN [cc]", "contents": "cc.CONTROL_EVENTTYPE_TOUCH_DOWN" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_AUTO [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_AUTO" },{ "trigger": "ccm_TMX_ORIENTATION_ORTHO [cc]", "contents": "cc.TMX_ORIENTATION_ORTHO" },{ "trigger": "ccm_Z_COMPRESSION_BZIP2 [cc]", "contents": "cc.Z_COMPRESSION_BZIP2" },{ "trigger": "ccm_NODE_TAG_INVALID [cc]", "contents": "cc.NODE_TAG_INVALID" },{ "trigger": "ccm_VERTEX_ATTRIB_FLAG_NONE [cc]", "contents": "cc.VERTEX_ATTRIB_FLAG_NONE" },{ "trigger": "ccm_NODE_ON_EXIT [cc]", "contents": "cc.NODE_ON_EXIT" },{ "trigger": "ccm_NUMBER_OF_CELLS_IN_TABLEVIEW [cc]", "contents": "cc.NUMBER_OF_CELLS_IN_TABLEVIEW" },{ "trigger": "ccm_TRANSITION_ORIENTATION_DOWN_OVER [cc]", "contents": "cc.TRANSITION_ORIENTATION_DOWN_OVER" },{ "trigger": "ccm_MAC_USE_OWN_THREAD [cc]", "contents": "cc.MAC_USE_OWN_THREAD" },{ "trigger": "ccm_UNIFORM_P_MATRIX [cc]", "contents": "cc.UNIFORM_P_MATRIX" },{ "trigger": "ccm_DIRECTOR_PROJECTION_DEFAULT [cc]", "contents": "cc.DIRECTOR_PROJECTION_DEFAULT" },{ "trigger": "ccm_EDITBOX_INPUT_FLAG_SENSITIVE [cc]", "contents": "cc.EDITBOX_INPUT_FLAG_SENSITIVE" },{ "trigger": "ccm_ATTRIBUTE_NAME_POSITION [cc]", "contents": "cc.ATTRIBUTE_NAME_POSITION" },{ "trigger": "ccm_ITEM_SIZE [cc]", "contents": "cc.ITEM_SIZE" },{ "trigger": "ccm_WEBSOCKET_STATE_CONNECTING [cc]", "contents": "cc.WEBSOCKET_STATE_CONNECTING" },{ "trigger": "ccm_DIRECTOR_PROJECTION_CUSTOM [cc]", "contents": "cc.DIRECTOR_PROJECTION_CUSTOM" },{ "trigger": "ccm_LANGUAGE_GERMAN [cc]", "contents": "cc.LANGUAGE_GERMAN" },{ "trigger": "ccm_UNIFORM_COS_TIME_S [cc]", "contents": "cc.UNIFORM_COS_TIME_S" },{ "trigger": "ccm_NODE_ON_CLEAN_UP [cc]", "contents": "cc.NODE_ON_CLEAN_UP" },{ "trigger": "ccm_SHADER_POSITION_TEXTURE_COLOR [cc]", "contents": "cc.SHADER_POSITION_TEXTURE_COLOR" },{ "trigger": "ccm_WEBSOCKET_MESSAGE [cc]", "contents": "cc.WEBSOCKET_MESSAGE" },{ "trigger": "ccm_SHADER_POSITION_TEXTURE_COLOR_ALPHA_TEST [cc]", "contents": "cc.SHADER_POSITION_TEXTURE_COLOR_ALPHA_TEST" },{ "trigger": "ccm_TABLECELL_WILL_RECYCLE [cc]", "contents": "cc.TABLECELL_WILL_RECYCLE" },{ "trigger": "ccm_UNIFORM_SAMPLER [cc]", "contents": "cc.UNIFORM_SAMPLER" },{ "trigger": "ccm_OS_VERSION_4_0_1 [cc]", "contents": "cc.OS_VERSION_4_0_1" },{ "trigger": "ccm_BLEND_DST [cc]", "contents": "cc.BLEND_DST" },{ "trigger": "ccm_PLATFORM_OS_ANDROID [cc]", "contents": "cc.PLATFORM_OS_ANDROID" },{ "trigger": "ccm_EDITBOX_INPUT_MODE_DECIMAL [cc]", "contents": "cc.EDITBOX_INPUT_MODE_DECIMAL" },{ "trigger": "ccm_PLATFORM_OS_LINUX [cc]", "contents": "cc.PLATFORM_OS_LINUX" },{ "trigger": "ccm_SHADER_POSITION_U_COLOR [cc]", "contents": "cc.SHADER_POSITION_U_COLOR" },{ "trigger": "ccm_DEVICEI_PHONE_RETINA_DISPLAY [cc]", "contents": "cc.DEVICEI_PHONE_RETINA_DISPLAY" },{ "trigger": "ccm_SCROLLVIEW_SCRIPT_ZOOM [cc]", "contents": "cc.SCROLLVIEW_SCRIPT_ZOOM" },{ "trigger": "ccm_MAC_VERSION_10_7 [cc]", "contents": "cc.MAC_VERSION_10_7" },{ "trigger": "ccm_MAC_VERSION_10_6 [cc]", "contents": "cc.MAC_VERSION_10_6" },{ "trigger": "ccm_ASSETSMANAGER_NO_NEW_VERSION [cc]", "contents": "cc.ASSETSMANAGER_NO_NEW_VERSION" },{ "trigger": "ccm_MAC_VERSION_10_8 [cc]", "contents": "cc.MAC_VERSION_10_8" },{ "trigger": "ccm_DEVICEI_PAD [cc]", "contents": "cc.DEVICEI_PAD" },{ "trigger": "ccm_VERTICAL_TEXT_ALIGNMENT_BOTTOM [cc]", "contents": "cc.VERTICAL_TEXT_ALIGNMENT_BOTTOM" },{ "trigger": "ccm_TABLEVIEW_FILL_BOTTOMUP [cc]", "contents": "cc.TABLEVIEW_FILL_BOTTOMUP" },{ "trigger": "ccm_PARTICLE_MODE_GRAVITY [cc]", "contents": "cc.PARTICLE_MODE_GRAVITY" },{ "trigger": "ccm_VERTEX_ATTRIB_TEX_COORDS [cc]", "contents": "cc.VERTEX_ATTRIB_TEX_COORDS" },{ "trigger": "ccm_LINE_BREAK_MODE_CLIP [cc]", "contents": "cc.LINE_BREAK_MODE_CLIP" },{ "trigger": "ccm_NODE_ON_ENTER_TRANSITION_DID_FINISH [cc]", "contents": "cc.NODE_ON_ENTER_TRANSITION_DID_FINISH" },{ "trigger": "ccm_EVENT_MOUSE [cc]", "contents": "cc.EVENT_MOUSE" },{ "trigger": "ccm_UNIFORM_MAX [cc]", "contents": "cc.UNIFORM_MAX" },{ "trigger": "ccm_DIRECTOR_PROJECTION2_D [cc]", "contents": "cc.DIRECTOR_PROJECTION2_D" },{ "trigger": "ccm_UNIFORM_MV_MATRIX_S [cc]", "contents": "cc.UNIFORM_MV_MATRIX_S" },{ "trigger": "ccm_KEYBOARD_RETURNTYPE_DONE [cc]", "contents": "cc.KEYBOARD_RETURNTYPE_DONE" },{ "trigger": "ccm_SCROLLVIEW_SCRIPT_SCROLL [cc]", "contents": "cc.SCROLLVIEW_SCRIPT_SCROLL" },{ "trigger": "ccm_Z_COMPRESSION_NONE [cc]", "contents": "cc.Z_COMPRESSION_NONE" },{ "trigger": "ccm_EDITBOX_INPUT_FLAG_INITIAL_CAPS_SENTENCE [cc]", "contents": "cc.EDITBOX_INPUT_FLAG_INITIAL_CAPS_SENTENCE" },{ "trigger": "ccm_ASSETSMANAGER_NETWORK [cc]", "contents": "cc.ASSETSMANAGER_NETWORK" },{ "trigger": "ccm_LANGUAGE_KOREAN [cc]", "contents": "cc.LANGUAGE_KOREAN" },{ "trigger": "ccm_LINE_BREAK_MODE_TAIL_TRUNCATION [cc]", "contents": "cc.LINE_BREAK_MODE_TAIL_TRUNCATION" },{ "trigger": "ccm_PRIORITY_NON_SYSTEM_MIN [cc]", "contents": "cc.PRIORITY_NON_SYSTEM_MIN" },{ "trigger": "ccm_REPEAT_FOREVER [cc]", "contents": "cc.REPEAT_FOREVER" },{ "trigger": "ccm_EVENT_ACCELERATION [cc]", "contents": "cc.EVENT_ACCELERATION" },{ "trigger": "ccm_LANGUAGE_CHINESE [cc]", "contents": "cc.LANGUAGE_CHINESE" },{ "trigger": "ccm_XMLHTTPREQUEST_RESPONSE_JSON [cc]", "contents": "cc.XMLHTTPREQUEST_RESPONSE_JSON" },{ "trigger": "ccm_OS_VERSION_4_3_1 [cc]", "contents": "cc.OS_VERSION_4_3_1" },{ "trigger": "ccm_KEYBOARD_RETURNTYPE_DEFAULT [cc]", "contents": "cc.KEYBOARD_RETURNTYPE_DEFAULT" },{ "trigger": "ccm_OS_VERSION_4_3_3 [cc]", "contents": "cc.OS_VERSION_4_3_3" },{ "trigger": "ccm_OS_VERSION_4_3_2 [cc]", "contents": "cc.OS_VERSION_4_3_2" },{ "trigger": "ccm_OS_VERSION_4_3_5 [cc]", "contents": "cc.OS_VERSION_4_3_5" },{ "trigger": "ccm_OS_VERSION_4_3_4 [cc]", "contents": "cc.OS_VERSION_4_3_4" },{ "trigger": "ccm_DEVICE_MAC_RETINA_DISPLAY [cc]", "contents": "cc.DEVICE_MAC_RETINA_DISPLAY" },{ "trigger": "ccm_UNIFORM_MV_MATRIX [cc]", "contents": "cc.UNIFORM_MV_MATRIX" },{ "trigger": "ccm_WEBSOCKET_CLOSE [cc]", "contents": "cc.WEBSOCKET_CLOSE" },{ "trigger": "ccm_UNIFORM_SAMPLER_S [cc]", "contents": "cc.UNIFORM_SAMPLER_S" },{ "trigger": "ccm_GLYPHCOLLECTION_CUSTOM [cc]", "contents": "cc.GLYPHCOLLECTION_CUSTOM" },{ "trigger": "ccm_TMX_TILE_DIAGONAL_FLAG [cc]", "contents": "cc.TMX_TILE_DIAGONAL_FLAG" },{ "trigger": "ccm_ASSETSMANAGER_PROTOCOL_ERROR [cc]", "contents": "cc.ASSETSMANAGER_PROTOCOL_ERROR" },{ "trigger": "ccm_TRANSITION_ORIENTATION_LEFT_OVER [cc]", "contents": "cc.TRANSITION_ORIENTATION_LEFT_OVER" },{ "trigger": "ccm_CONTROL_STATE_SELECTED [cc]", "contents": "cc.CONTROL_STATE_SELECTED" },{ "trigger": "ccm_IMAGE_FORMAT_JPEG [cc]", "contents": "cc.IMAGE_FORMAT_JPEG" },{ "trigger": "ccm_LANGUAGE_FRENCH [cc]", "contents": "cc.LANGUAGE_FRENCH" },{ "trigger": "ccm_NODE_RENDER_SUBPIXEL [cc]", "contents": "cc.NODE_RENDER_SUBPIXEL" },{ "trigger": "ccm_EVENT_KEYBOARD [cc]", "contents": "cc.EVENT_KEYBOARD" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_RGB5_A1 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_RGB5_A1" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_RG_B888 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_RG_B888" },{ "trigger": "ccm_VERTEX_ATTRIB_FLAG_TEX_COORDS [cc]", "contents": "cc.VERTEX_ATTRIB_FLAG_TEX_COORDS" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_I8 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_I8" },{ "trigger": "ccm_ANIMATION_FRAME_DISPLAYED_NOTIFICATION [cc]", "contents": "cc.ANIMATION_FRAME_DISPLAYED_NOTIFICATION" },{ "trigger": "ccm_TEXT_ALIGNMENT_LEFT [cc]", "contents": "cc.TEXT_ALIGNMENT_LEFT" },{ "trigger": "ccm_NODE_ON_ENTER [cc]", "contents": "cc.NODE_ON_ENTER" },{ "trigger": "ccm_LANGUAGE_ARABIC [cc]", "contents": "cc.LANGUAGE_ARABIC" },{ "trigger": "ccm_ENABLE_BOX2_D_INTEGRATION [cc]", "contents": "cc.ENABLE_BOX2_D_INTEGRATION" },{ "trigger": "ccm_WEBSOCKET_STATE_OPEN [cc]", "contents": "cc.WEBSOCKET_STATE_OPEN" },{ "trigger": "ccm_UNIFORM_MVP_MATRIX [cc]", "contents": "cc.UNIFORM_MVP_MATRIX" },{ "trigger": "ccm_VERTEX_ATTRIB_FLAG_COLOR [cc]", "contents": "cc.VERTEX_ATTRIB_FLAG_COLOR" },{ "trigger": "ccm_DEVICE_MAC [cc]", "contents": "cc.DEVICE_MAC" },{ "trigger": "ccm_TOUCHES_ONE_BY_ONE [cc]", "contents": "cc.TOUCHES_ONE_BY_ONE" },{ "trigger": "ccm_UNIFORM_TIME [cc]", "contents": "cc.UNIFORM_TIME" },{ "trigger": "ccm_CONTROL_STATE_DISABLED [cc]", "contents": "cc.CONTROL_STATE_DISABLED" },{ "trigger": "ccm_MAC_USE_DISPLAY_LINK_THREAD [cc]", "contents": "cc.MAC_USE_DISPLAY_LINK_THREAD" },{ "trigger": "ccm_DEVICEI_PAD_RETINA_DISPLAY [cc]", "contents": "cc.DEVICEI_PAD_RETINA_DISPLAY" },{ "trigger": "ccm_TMX_ORIENTATION_ISO [cc]", "contents": "cc.TMX_ORIENTATION_ISO" },{ "trigger": "ccm_PARTICLE_START_RADIUS_EQUAL_TO_END_RADIUS [cc]", "contents": "cc.PARTICLE_START_RADIUS_EQUAL_TO_END_RADIUS" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_S3TC_DXT5 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_S3TC_DXT5" },{ "trigger": "ccm_SHADER_POSITION_LENGTH_TEXURE_COLOR [cc]", "contents": "cc.SHADER_POSITION_LENGTH_TEXURE_COLOR" },{ "trigger": "ccm_VERTEX_ATTRIB_POSITION [cc]", "contents": "cc.VERTEX_ATTRIB_POSITION" },{ "trigger": "ccm_VERTEX_ATTRIB_TEX_COORD [cc]", "contents": "cc.VERTEX_ATTRIB_TEX_COORD" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_S3TC_DXT1 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_S3TC_DXT1" },{ "trigger": "ccm_TABLECELL_SIZE_FOR_INDEX [cc]", "contents": "cc.TABLECELL_SIZE_FOR_INDEX" },{ "trigger": "ccm_POSITION_TYPE_GROUPED [cc]", "contents": "cc.POSITION_TYPE_GROUPED" },{ "trigger": "ccm_EDITBOX_INPUT_FLAG_INITIAL_CAPS_ALL_CHARACTERS [cc]", "contents": "cc.EDITBOX_INPUT_FLAG_INITIAL_CAPS_ALL_CHARACTERS" },{ "trigger": "ccm_DIRECTOR_PROJECTION3_D [cc]", "contents": "cc.DIRECTOR_PROJECTION3_D" },{ "trigger": "ccm_PARTICLE_MODE_RADIUS [cc]", "contents": "cc.PARTICLE_MODE_RADIUS" },{ "trigger": "ccm_ENABLE_PROFILERS [cc]", "contents": "cc.ENABLE_PROFILERS" },{ "trigger": "ccm_LANGUAGE_ENGLISH [cc]", "contents": "cc.LANGUAGE_ENGLISH" },{ "trigger": "ccm_PLATFORM_OS_BLACKBERRY [cc]", "contents": "cc.PLATFORM_OS_BLACKBERRY" },{ "trigger": "ccm_EDITBOX_INPUT_MODE_ANY [cc]", "contents": "cc.EDITBOX_INPUT_MODE_ANY" },{ "trigger": "ccm_IMAGE_FORMAT_PNG [cc]", "contents": "cc.IMAGE_FORMAT_PNG" },{ "trigger": "ccm_KEYBOARD_RETURNTYPE_SEND [cc]", "contents": "cc.KEYBOARD_RETURNTYPE_SEND" },{ "trigger": "ccm_SCROLLVIEW_DIRECTION_NONE [cc]", "contents": "cc.SCROLLVIEW_DIRECTION_NONE" },{ "trigger": "ccm_SPRITE_INDEX_NOT_INITIALIZED [cc]", "contents": "cc.SPRITE_INDEX_NOT_INITIALIZED" },{ "trigger": "ccm_LABELATLAS_DEBUG_DRAW [cc]", "contents": "cc.LABELATLAS_DEBUG_DRAW" },{ "trigger": "ccm_UNIFORM_MVP_MATRIX_S [cc]", "contents": "cc.UNIFORM_MVP_MATRIX_S" },{ "trigger": "ccm_MENU_STATE_WAITING [cc]", "contents": "cc.MENU_STATE_WAITING" },{ "trigger": "ccm_TABLEVIEW_FILL_TOPDOWN [cc]", "contents": "cc.TABLEVIEW_FILL_TOPDOWN" },{ "trigger": "ccm_XMLHTTPREQUEST_RESPONSE_BLOB [cc]", "contents": "cc.XMLHTTPREQUEST_RESPONSE_BLOB" },{ "trigger": "ccm_FILE_UTILS_SEARCH_SUFFIX_MODE [cc]", "contents": "cc.FILE_UTILS_SEARCH_SUFFIX_MODE" },{ "trigger": "ccm_CONTROL_EVENTTYPE_TOUCH_UP_OUTSIDE [cc]", "contents": "cc.CONTROL_EVENTTYPE_TOUCH_UP_OUTSIDE" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_PVRTC4 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_PVRTC4" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_DEFAULT [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_DEFAULT" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_A8 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_A8" },{ "trigger": "ccm_ASSETSMANAGER_UNCOMPRESS [cc]", "contents": "cc.ASSETSMANAGER_UNCOMPRESS" },{ "trigger": "ccm_EDITBOX_INPUT_MODE_EMAILADDR [cc]", "contents": "cc.EDITBOX_INPUT_MODE_EMAILADDR" },{ "trigger": "ccm_CONTROL_STEPPER_PART_MINUS [cc]", "contents": "cc.CONTROL_STEPPER_PART_MINUS" },{ "trigger": "ccm_TABLECELL_HIGH_LIGHT [cc]", "contents": "cc.TABLECELL_HIGH_LIGHT" },{ "trigger": "ccm_VERTEX_ATTRIB_FLAG_POS_COLOR_TEX [cc]", "contents": "cc.VERTEX_ATTRIB_FLAG_POS_COLOR_TEX" },{ "trigger": "ccm_TEXT_ALIGNMENT_CENTER [cc]", "contents": "cc.TEXT_ALIGNMENT_CENTER" },{ "trigger": "ccm_FILE_UTILS_SEARCH_DIRECTORY_MODE [cc]", "contents": "cc.FILE_UTILS_SEARCH_DIRECTORY_MODE" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_BGR_A8888 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_BGR_A8888" },{ "trigger": "ccm_PLATFORM_OS_IPAD [cc]", "contents": "cc.PLATFORM_OS_IPAD" },{ "trigger": "ccm_DEVICEI_PHONE5 [cc]", "contents": "cc.DEVICEI_PHONE5" },{ "trigger": "ccm_OS_VERSION_5_0 [cc]", "contents": "cc.OS_VERSION_5_0" },{ "trigger": "ccm_GL_ALL [cc]", "contents": "cc.GL_ALL" },{ "trigger": "ccm_SHADER_POSITION_TEXTURE [cc]", "contents": "cc.SHADER_POSITION_TEXTURE" },{ "trigger": "ccm_TEXTURE2_D_PIXEL_FORMAT_PVRTC2 [cc]", "contents": "cc.TEXTURE2_D_PIXEL_FORMAT_PVRTC2" },{ "trigger": "ccm_Handler [cc]", "contents": "cc.Handler" },{ "trigger": "ccm_KeyCode [cc]", "contents": "cc.KeyCode" },{ "trigger": "ccm_LabelEffect [cc]", "contents": "cc.LabelEffect" },{ "trigger": "ccm_PHYSICSSHAPE_MATERIAL_DEFAULT [cc]", "contents": "cc.PHYSICSSHAPE_MATERIAL_DEFAULT" },{ "trigger": "ccm_PHYSICSBODY_MATERIAL_DEFAULT [cc]", "contents": "cc.PHYSICSBODY_MATERIAL_DEFAULT" },{ "trigger": "ccm_CCBProxy [cc]", "contents": "cc.CCBProxy" },{ "trigger": "ccm_Console [cc]", "contents": "cc.Console" },{ "trigger": "ccm_ProtectedNode [cc]", "contents": "cc.ProtectedNode" },{ "trigger": "ccm_GLNode [cc]", "contents": "cc.GLNode" },{ "trigger": "ccm_ResolutionPolicy [cc]", "contents": "cc.ResolutionPolicy" },{ "trigger": "s_getMovementBoneData(str:#string):ret (return value: ccs.MovementBoneData):#MovementBoneData [MovementData]", "contents": "getMovementBoneData(${1:str:#string})" },{ "trigger": "s_addMovementBoneData(movementbonedata:#ccs.MovementBoneData):void [MovementData]", "contents": "addMovementBoneData(${1:movementbonedata:#ccs.MovementBoneData})" },{ "trigger": "s_create():ret (return value: ccs.MovementData):#MovementData [MovementData]", "contents": "create()" },{ "trigger": "s_MovementData():void [MovementData]", "contents": "MovementData()" },{ "trigger": "s_create(actioninterval:#cc.ActionInterval):ret (return value: cc.EaseQuinticActionIn):#EaseQuinticActionIn [EaseQuinticActionIn]", "contents": "create(${1:actioninterval:#cc.ActionInterval})" },{ "trigger": "s_clone():ret (return value: cc.EaseQuinticActionIn):#EaseQuinticActionIn [EaseQuinticActionIn]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [EaseQuinticActionIn]", "contents": "update(${1:float:#float})" },{ "trigger": "s_reverse():ret (return value: cc.EaseQuinticActionIn):#EaseQuinticActionIn [EaseQuinticActionIn]", "contents": "reverse()" },{ "trigger": "f_create(float, cc.Scene):ret (retunr value: cc.TransitionFlipY):#TransitionFlipY [TransitionFlipY]", "contents": "create(${1:float},${2: cc.Scene})" },{ "trigger": "f_create(float, cc.Scene, cc.TransitionScene::Orientation):ret (retunr value: cc.TransitionFlipY):#TransitionFlipY [TransitionFlipY]", "contents": "create(${1:float},${2: cc.Scene},${3: cc.TransitionScene::Orientation})" },{ "trigger": "s_create(float:#float,scene:#cc.Scene,orientation:#cc.TransitionScene::Orientation):ret (retunr value: cc.TransitionFlipY):#TransitionFlipY [TransitionFlipY]", "contents": "create(${1:float:#float},${2:scene:#cc.Scene},${3:orientation:#cc.TransitionScene::Orientation})" },{ "trigger": "f_getForcedTarget():ret (retunr value: cc.Node):#Node [TargetedAction]", "contents": "getForcedTarget(${1:})" },{ "trigger": "f_getForcedTarget():ret (retunr value: cc.Node):#Node [TargetedAction]", "contents": "getForcedTarget(${1:})" },{ "trigger": "s_getForcedTarget():ret (retunr value: cc.Node):#Node [TargetedAction]", "contents": "getForcedTarget()" },{ "trigger": "s_setForcedTarget(node:#cc.Node):void [TargetedAction]", "contents": "setForcedTarget(${1:node:#cc.Node})" },{ "trigger": "s_create(node:#cc.Node,finitetimeaction:#cc.FiniteTimeAction):ret (return value: cc.TargetedAction):#TargetedAction [TargetedAction]", "contents": "create(${1:node:#cc.Node},${2:finitetimeaction:#cc.FiniteTimeAction})" },{ "trigger": "s_startWithTarget(node:#cc.Node):void [TargetedAction]", "contents": "startWithTarget(${1:node:#cc.Node})" },{ "trigger": "s_clone():ret (return value: cc.TargetedAction):#TargetedAction [TargetedAction]", "contents": "clone()" },{ "trigger": "s_stop():void [TargetedAction]", "contents": "stop()" },{ "trigger": "s_reverse():ret (return value: cc.TargetedAction):#TargetedAction [TargetedAction]", "contents": "reverse()" },{ "trigger": "s_update(float:#float):void [TargetedAction]", "contents": "update(${1:float:#float})" },{ "trigger": "s_create():ret (return value: cc.ParticleSnow):#ParticleSnow [ParticleSnow]", "contents": "create()" },{ "trigger": "s_createWithTotalParticles(int:#int):ret (return value: cc.ParticleSnow):#ParticleSnow [ParticleSnow]", "contents": "createWithTotalParticles(${1:int:#int})" },{ "trigger": "s_turnOnTile(vec2:#cc.Vec2):void [FadeOutTRTiles]", "contents": "turnOnTile(${1:vec2:#cc.Vec2})" },{ "trigger": "s_turnOffTile(vec2:#cc.Vec2):void [FadeOutTRTiles]", "contents": "turnOffTile(${1:vec2:#cc.Vec2})" },{ "trigger": "s_transformTile(vec2:#cc.Vec2,float:#float):void [FadeOutTRTiles]", "contents": "transformTile(${1:vec2:#cc.Vec2},${2:float:#float})" },{ "trigger": "s_testFunc(size:#size_table,float:#float):ret (return value: float):#float [FadeOutTRTiles]", "contents": "testFunc(${1:size:#size_table},${2:float:#float})" },{ "trigger": "s_create(float:#float,size:#size_table):ret (return value: cc.FadeOutTRTiles):#FadeOutTRTiles [FadeOutTRTiles]", "contents": "create(${1:float:#float},${2:size:#size_table})" },{ "trigger": "s_clone():ret (return value: cc.FadeOutTRTiles):#FadeOutTRTiles [FadeOutTRTiles]", "contents": "clone()" },{ "trigger": "s_update(float:#float):void [FadeOutTRTiles]", "contents": "update(${1:float:#float})" }
]
}